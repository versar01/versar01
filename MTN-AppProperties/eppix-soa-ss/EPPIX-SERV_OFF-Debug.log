20210722: 100530     DEBUG     0[main] - com.eppixcomm.eppix.base.test.TestDeactivateSimN2N.loadproperties(TestDeactivateSimN2N.java:77) - loading appProperties
20210722: 100530     DEBUG     7[main] - com.eppixcomm.eppix.base.test.TestDeactivateSimN2N.loadproperties(TestDeactivateSimN2N.java:84) - appProperties loaded : {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20210722: 100530     DEBUG     8[main] - com.eppixcomm.eppix.base.test.TestDeactivateSimN2N.dbConnectionInit(TestDeactivateSimN2N.java:97) - DB Connection start
20210722: 100530     DEBUG     8[main] - com.eppixcomm.eppix.base.test.TestDeactivateSimN2N.dbConnectionInit(TestDeactivateSimN2N.java:100) - {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20210722: 100531     DEBUG   682[main] - com.eppixcomm.eppix.common.data.DACFactory.<init>(DACFactory.java:95) - constructor( connection, thrower )
20210722: 100531     DEBUG   684[main] - com.eppixcomm.eppix.common.data.ConnectionContext.connect(ConnectionContext.java:100) - connect( connection )
20210722: 100531     DEBUG   685[main] - com.eppixcomm.eppix.common.data.ConnectionContext.get(ConnectionContext.java:82) - get()
20210722: 100531     DEBUG   700[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20210722: 100531     DEBUG   809[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberUpgradeMigradeDAC(BaseDACFactory.java:518) - getSubscriberUpgradeMigradeDAC
20210722: 100531     DEBUG   819[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl com.eppixcomm.eppix.base.dml.SubscriberUpgradeMigradeDML@6d21714c
20210722: 100531     DEBUG   820[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl
20210722: 100531     DEBUG   839[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100531     DEBUG   839[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl TO MAP
20210722: 100531     DEBUG   839[main] - com.eppixcomm.eppix.base.test.TestDeactivateSimN2N.dbConnectionInit(TestDeactivateSimN2N.java:123) - DB Connection successfull
20210722: 100531     DEBUG   842[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.Sysdirm )
20210722: 100531     DEBUG   898[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSysdirmDAC(BaseAbstractDACFactory.java:327) - getSysdirmDAC()
20210722: 100531     DEBUG   902[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SysdirmDACImpl com.eppixcomm.eppix.base.dml.SysdirmAbstractDMLFactory@7e32c033
20210722: 100531     DEBUG   903[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SysdirmDACImpl
20210722: 100531     DEBUG   903[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100531     DEBUG   904[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SysdirmDACImpl TO MAP
20210722: 100531     DEBUG   904[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractBLO.get(SysdirmAbstractBLO.java:501) - get( filter )
20210722: 100531     DEBUG   904[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractDACImpl.get(SysdirmAbstractDACImpl.java:435) - get( filter )
20210722: 100531     DEBUG   907[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
Sysdirm|0|equalSystemKey|

20210722: 100531     DEBUG  1053[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: Sysdirm
Execute SQL Statement: SELECT SYSTEM_KEY, KEY_VALUE, DESCRIPTION
FROM SYSDIRM
WHERE (SYSTEM_KEY) = ?
Argument(s): |ASSWITCHM1|
20210722: 100531     DEBUG  1055[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5d6f64b1
20210722: 100531     DEBUG  1160[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VpnProviderNetwk )
20210722: 100531     DEBUG  1161[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getVpnProviderNetwkDAC(BaseAbstractDACFactory.java:435) - getVpnProviderNetwkDAC()
20210722: 100531     DEBUG  1169[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.VpnProviderNetwkDACImpl com.eppixcomm.eppix.base.dml.VpnProviderNetwkDMLFactory@5e8c92f4
20210722: 100531     DEBUG  1170[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.VpnProviderNetwkDACImpl
20210722: 100531     DEBUG  1173[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100531     DEBUG  1174[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.VpnProviderNetwkDACImpl TO MAP
20210722: 100531     DEBUG  1175[main] - com.eppixcomm.eppix.base.blo.VpnProviderNetwkAbstractBLO.iterate(VpnProviderNetwkAbstractBLO.java:500) - iterate( filter )
20210722: 100531     DEBUG  1175[main] - com.eppixcomm.eppix.base.blo.VpnProviderNetwkAbstractDACImpl.iterate(VpnProviderNetwkAbstractDACImpl.java:421) - iterate( filter )
20210722: 100531     DEBUG  1177[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
VpnProviderNetwk|0|VpnNetworkPrefixMatch|

20210722: 100532     DEBUG  1339[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2276) - iterator(param SQL): DML Name: VpnProviderNetwk
Execute SQL Statement: SELECT VPN_PROVIDER_ID, VPN_NETWORK_PREFIX, VPN_MSISDN_MASK, VPN_SIM_MASK
FROM VPN_PROVIDER_NETWK
WHERE VPN_NETWORK_PREFIX LIKE ?
Argument(s): |%78%|
20210722: 100532     DEBUG  1343[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@694f9431
20210722: 100532     DEBUG  1395[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VamActiveMsisdn )
20210722: 100532     DEBUG  1397[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getVamActiveMsisdnDAC(BaseDACFactory.java:260) - getVamActiveMsisdnDAC()
20210722: 100532     DEBUG  1419[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.VamActiveMsisdnDACImpl com.eppixcomm.eppix.base.dml.VamActiveMsisdnDMLFactory@3581c5f3
20210722: 100532     DEBUG  1419[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.VamActiveMsisdnDACImpl
20210722: 100532     DEBUG  1421[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100532     DEBUG  1421[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.VamActiveMsisdnDACImpl TO MAP
20210722: 100532     DEBUG  1421[main] - com.eppixcomm.eppix.base.blo.VamActiveMsisdnAbstractBLO.get(VamActiveMsisdnAbstractBLO.java:654) - get( filter )
20210722: 100532     DEBUG  1421[main] - com.eppixcomm.eppix.base.blo.VamActiveMsisdnAbstractDACImpl.get(VamActiveMsisdnAbstractDACImpl.java:683) - get( filter )
20210722: 100532     DEBUG  1425[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
VamActiveMsisdn|0|equalVamMsisdnNo+equalVamStatCode|

20210722: 100532     DEBUG  1592[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: VamActiveMsisdn
Execute SQL Statement: SELECT VAM_SUBSCRIBER_ID, VAM_SIM_NO, VAM_MSISDN_NO, VAM_TWINBILL_NO, VAM_STAT_CODE, VAM_CONNECT_DATE, VAM_DCONNECT_DATE, VAM_INTERN_TARIFF, VAM_CONTR_TERMINAT, VAM_CONTR_PERIOD, VAM_TERMINAT_NOTIF, VAM_DIR_ENTRY, VAM_ITEMISED, VAM_DEPARTMENT, VAM_SALESMAN, VAM_DEALER_ID, VAM_ABAR_DATE, VAM_SUBS_SUFFIX, VAM_MESS_COMMENT, VAM_AIRTIME_NET, VAM_PR_FLAG, VAM_HIERARCHY, VAM_MSISDN_KNOWN, VAM_TARIFF_CHG, VAM_ORIG_PROV_ID, VAM_IMP_PROV_ID, VAM_ORIG_SERV_PROV, VAM_IMP_SERV_PROV, VAM_MSISDN_TYPE, VAM_DUMMY, VAM_MSISDN_EXPRTD, VAM_EXPORTED_TO, VAM_ANALYSIS_1, VAM_ANALYSIS_2, VAM_ANALYSIS_3, VAM_ANALYSIS_4, VAM_ANALYSIS_5
FROM VAM_ACTIVE_MSISDN
WHERE (VAM_MSISDN_NO) = ? AND (VAM_STAT_CODE) = ?
Argument(s): |783290561|1|
20210722: 100532     DEBUG  1609[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1b9e1916
20210722: 100532     DEBUG  1710[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VpnProviderNetwk )
20210722: 100532     DEBUG  1711[main] - com.eppixcomm.eppix.base.blo.VpnProviderNetwkAbstractBLO.iterate(VpnProviderNetwkAbstractBLO.java:500) - iterate( filter )
20210722: 100532     DEBUG  1711[main] - com.eppixcomm.eppix.base.blo.VpnProviderNetwkAbstractDACImpl.iterate(VpnProviderNetwkAbstractDACImpl.java:421) - iterate( filter )
20210722: 100532     DEBUG  1712[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
VpnProviderNetwk|0|VpnNetworkPrefixMatch|

20210722: 100532     DEBUG  1815[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2276) - iterator(param SQL): DML Name: VpnProviderNetwk
Execute SQL Statement: SELECT VPN_PROVIDER_ID, VPN_NETWORK_PREFIX, VPN_MSISDN_MASK, VPN_SIM_MASK
FROM VPN_PROVIDER_NETWK
WHERE VPN_NETWORK_PREFIX LIKE ?
Argument(s): |%78%|
20210722: 100532     DEBUG  1816[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@45fe3ee3
20210722: 100532     DEBUG  1877[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getSim(SubscriberUpgradeMigradeBLO.java:9536) - 
=======================================================================================
PARAM OPTION: ALL
PARAM SIM NO: 0006417202044
PARAM NETWORK ID: 
PARAM HLR: 
PARAM DEALER ID: 
PARAM CUSTOMER: 
=======================================================================================
20210722: 100532     DEBUG  1880[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SacSimAssignCus )
20210722: 100532     DEBUG  1881[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSacSimAssignCusDAC(BaseAbstractDACFactory.java:1345) - getSacSimAssignCusDAC()
20210722: 100532     DEBUG  1888[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SacSimAssignCusDACImpl com.eppixcomm.eppix.base.dml.SacSimAssignCusDMLFactory@5eb5c224
20210722: 100532     DEBUG  1889[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SacSimAssignCusDACImpl
20210722: 100532     DEBUG  1891[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100532     DEBUG  1892[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SacSimAssignCusDACImpl TO MAP
20210722: 100532     DEBUG  1893[main] - com.eppixcomm.eppix.base.blo.SacSimAssignCusAbstractBLO.get(SacSimAssignCusAbstractBLO.java:287) - get( filter )
20210722: 100532     DEBUG  1893[main] - com.eppixcomm.eppix.base.blo.SacSimAssignCusAbstractDACImpl.get(SacSimAssignCusAbstractDACImpl.java:205) - get( filter )
20210722: 100532     DEBUG  1894[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
SacSimAssignCus|0|equalSacSimNo|

20210722: 100532     DEBUG  2040[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SacSimAssignCus
Execute SQL Statement: SELECT SAC_BILL_AC_NO, SAC_SIM_NO 
FROM sac_sim_assign_cus
WHERE SAC_SIM_NO = ? 
Argument(s): |0006417202044|
20210722: 100532      INFO  2142[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getSim(SubscriberUpgradeMigradeBLO.java:10165) - Passed customer no  not found in Sac_Sim_assign_cus
20210722: 100532     DEBUG  2145[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SmnSimNos )
20210722: 100532     DEBUG  2147[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSmnSimNosDAC(BaseAbstractDACFactory.java:387) - getSmnSimNosDAC()
20210722: 100532     DEBUG  2162[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SmnSimNosDACImpl com.eppixcomm.eppix.base.dml.SmnSimNosDMLFactory@ee7d9f1
20210722: 100532     DEBUG  2163[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SmnSimNosDACImpl
20210722: 100532     DEBUG  2167[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100532     DEBUG  2168[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SmnSimNosDACImpl TO MAP
20210722: 100532     DEBUG  2168[main] - com.eppixcomm.eppix.base.blo.SmnSimNosAbstractBLO.get(SmnSimNosAbstractBLO.java:498) - get( filter )
20210722: 100532     DEBUG  2169[main] - com.eppixcomm.eppix.base.blo.SmnSimNosAbstractDACImpl.get(SmnSimNosAbstractDACImpl.java:635) - get( filter )
20210722: 100532     DEBUG  2171[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
SmnSimNos|0|equalSmnSimNo|

20210722: 100533     DEBUG  2327[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SmnSimNos
Execute SQL Statement: SELECT SMN_SIM_NO, SMN_NETWORK_ID, SMN_IMSI_NO, SMN_KI, SMN_ON_NETWORK, SMN_HLR, SMN_PUK_NO, SMN_STATUS, SMN_ACTIVE_DATE, SMN_AVAIL_DATE, SMN_EXPIRY_DATE, SMN_WAREHOUSE, SMN_PRODUCT_CODE, SMN_DEALER_ID, SMN_TRANSPORT_KEY, SMN_PIN_NO, SMN_PUK_NO_2, SMN_PIN_NO_2, SMN_ANALYSIS_1, SMN_ANALYSIS_2, SMN_ANALYSIS_3
FROM SMN_SIM_NOS
WHERE SMN_SIM_NO = ?
Argument(s): |0006417202044|
20210722: 100533     DEBUG  2330[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@dcf3e99
20210722: 100533     DEBUG  2414[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getSim(SubscriberUpgradeMigradeBLO.java:10256) - NETWORK PARAMS: OPTION: ALL NETWORK ID:  NETWORKID.LENGTH: 0
20210722: 100533     DEBUG  2415[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VamActiveMsisdn )
20210722: 100533     DEBUG  2416[main] - com.eppixcomm.eppix.base.blo.VamActiveMsisdnAbstractBLO.get(VamActiveMsisdnAbstractBLO.java:654) - get( filter )
20210722: 100533     DEBUG  2417[main] - com.eppixcomm.eppix.base.blo.VamActiveMsisdnAbstractDACImpl.get(VamActiveMsisdnAbstractDACImpl.java:683) - get( filter )
20210722: 100533     DEBUG  2418[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
VamActiveMsisdn|0|equalVamSubscriberId+equalVamSimNo+equalVamHierarchy+INVamStatCode_3|

20210722: 100533     DEBUG  2563[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: VamActiveMsisdn
Execute SQL Statement: SELECT VAM_SUBSCRIBER_ID, VAM_SIM_NO, VAM_MSISDN_NO, VAM_TWINBILL_NO, VAM_STAT_CODE, VAM_CONNECT_DATE, VAM_DCONNECT_DATE, VAM_INTERN_TARIFF, VAM_CONTR_TERMINAT, VAM_CONTR_PERIOD, VAM_TERMINAT_NOTIF, VAM_DIR_ENTRY, VAM_ITEMISED, VAM_DEPARTMENT, VAM_SALESMAN, VAM_DEALER_ID, VAM_ABAR_DATE, VAM_SUBS_SUFFIX, VAM_MESS_COMMENT, VAM_AIRTIME_NET, VAM_PR_FLAG, VAM_HIERARCHY, VAM_MSISDN_KNOWN, VAM_TARIFF_CHG, VAM_ORIG_PROV_ID, VAM_IMP_PROV_ID, VAM_ORIG_SERV_PROV, VAM_IMP_SERV_PROV, VAM_MSISDN_TYPE, VAM_DUMMY, VAM_MSISDN_EXPRTD, VAM_EXPORTED_TO, VAM_ANALYSIS_1, VAM_ANALYSIS_2, VAM_ANALYSIS_3, VAM_ANALYSIS_4, VAM_ANALYSIS_5
FROM VAM_ACTIVE_MSISDN
WHERE VAM_SUBSCRIBER_ID = ? AND (VAM_SIM_NO) = ? AND (VAM_HIERARCHY) = ? AND VAM_STAT_CODE IN ( ? , ? , ? )
Argument(s): |1003715120|0006417202044|0|1|4|6|
20210722: 100533     DEBUG  2567[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@515f550a
20210722: 100533     DEBUG  2658[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SbdSubDets )
20210722: 100533     DEBUG  2659[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSbdSubDetsDAC(BaseAbstractDACFactory.java:234) - getSbdSubDetsDAC()
20210722: 100533     DEBUG  2673[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl com.eppixcomm.eppix.base.dml.SbdSubDetsAbstractDMLFactory@379619aa
20210722: 100533     DEBUG  2674[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl
20210722: 100533     DEBUG  2677[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100533     DEBUG  2678[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl TO MAP
20210722: 100533     DEBUG  2678[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractBLO.get(SbdSubDetsAbstractBLO.java:531) - get( filter )
20210722: 100533     DEBUG  2678[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractDACImpl.get(SbdSubDetsAbstractDACImpl.java:556) - get( filter )
20210722: 100533     DEBUG  2680[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
SbdSubDets|0|equalSbdSubscriberId|

20210722: 100533     DEBUG  2835[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SbdSubDets
Execute SQL Statement: SELECT SBD_SUBSCRIBER_ID, SBD_DIALLING_NO, SBD_BILL_AC_NO, SBD_CONNECT_DATE, SBD_DCONNECT_DATE, SBD_TERM_DATE, SBD_TITLE, SBD_SURNAME, SBD_FIRSTNAME, SBD_GENDER, SBD_DOB, SBD_PASSWORD, SBD_LOCATION_CODE, SBD_BILL_CYCLE, SBD_PACKAGE_CODE, SBD_BILLED_UPTO, SBD_TARIFF_PLAN
FROM SBD_SUB_DETS
WHERE SBD_SUBSCRIBER_ID = ?
Argument(s): |1003715120|
20210722: 100533     DEBUG  2838[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@182decdb
20210722: 100533     DEBUG  2942[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SbaSubAux )
20210722: 100533     DEBUG  2944[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSbaSubAuxDAC(BaseAbstractDACFactory.java:995) - getSbaSubAuxDAC()
20210722: 100533     DEBUG  2960[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SbaSubAuxDACImpl com.eppixcomm.eppix.base.dml.SbaSubAuxDMLFactory@2401f4c3
20210722: 100533     DEBUG  2961[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SbaSubAuxDACImpl
20210722: 100533     DEBUG  2966[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100533     DEBUG  2967[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SbaSubAuxDACImpl TO MAP
20210722: 100533     DEBUG  2968[main] - com.eppixcomm.eppix.base.blo.SbaSubAuxAbstractBLO.get(SbaSubAuxAbstractBLO.java:283) - get( filter )
20210722: 100533     DEBUG  2969[main] - com.eppixcomm.eppix.base.blo.SbaSubAuxAbstractDACImpl.get(SbaSubAuxAbstractDACImpl.java:101) - get( filter )
20210722: 100533     DEBUG  2973[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
SbaSubAux|0|equalSbaSubscriberId|

20210722: 100533     DEBUG  3128[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SbaSubAux
Execute SQL Statement: SELECT SBA_SUBSCRIBER_ID, SBA_ID_NUMBER, SBA_MATCHCODE, SBA_MARKETING, SBA_THIRD_PARTY, SBA_CUST_DEPT, SBA_DEALER_ID, SBA_DEPARTMENT, SBA_SALESMAN, SBA_REGION, SBA_INVOICE_ADDRID, SBA_INV_ACCOUNT, SBA_PREPAID_STAT, SBA_ANALYSIS_1, SBA_ANALYSIS_2, SBA_ANALYSIS_3, SBA_ANALYSIS_4, SBA_ANALYSIS_5, SBA_ANALYSIS_6, SBA_ANALYSIS_7, SBA_ANALYSIS_8, SBA_ANALYSIS_9, SBA_ANALYSIS_10, SBA_ANALYSIS_11, SBA_ANALYSIS_12, SBA_ANALYSIS_13, SBA_ANALYSIS_14, SBA_ANALYSIS_15, SBA_ANALYSIS_16, SBA_ANALYSIS_17, SBA_ANALYSIS_18, SBA_ANALYSIS_19, SBA_ANALYSIS_20, SBA_ANALYSIS_21, SBA_ANALYSIS_22, SBA_ANALYSIS_23, SBA_ANALYSIS_24, SBA_ANALYSIS_25, SBA_ANALYSIS_26, SBA_ANALYSIS_27, SBA_ANALYSIS_28, SBA_ANALYSIS_29, SBA_ANALYSIS_30,SBA_COMMENTS
FROM SBA_SUB_AUX
WHERE SBA_SUBSCRIBER_ID = ?
Argument(s): |1003715120|
20210722: 100533     DEBUG  3132[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@123772c4
20210722: 100533     DEBUG  3226[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SdSimDeactivate )
20210722: 100533     DEBUG  3227[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSdSimDeactivateDAC(BaseAbstractDACFactory.java:1141) - getSdSimDeactivateDAC()
20210722: 100533     DEBUG  3236[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SdSimDeactivateDACImpl com.eppixcomm.eppix.base.dml.SdSimDeactivateDMLFactory@73a28541
20210722: 100533     DEBUG  3236[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SdSimDeactivateDACImpl
20210722: 100533     DEBUG  3240[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100533     DEBUG  3241[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SdSimDeactivateDACImpl TO MAP
20210722: 100533     DEBUG  3241[main] - com.eppixcomm.eppix.base.blo.SdSimDeactivateAbstractBLO.get(SdSimDeactivateAbstractBLO.java:400) - get( filter )
20210722: 100533     DEBUG  3243[main] - com.eppixcomm.eppix.base.blo.SdSimDeactivateAbstractDACImpl.get(SdSimDeactivateAbstractDACImpl.java:421) - get( filter )
20210722: 100533     DEBUG  3243[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
SdSimDeactivate|0|equalSdSimNo+notnullSdDconnectDate+greaterthanSdDconnectDate|equalSdTransStatus|

20210722: 100534     DEBUG  3397[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SdSimDeactivate
Execute SQL Statement: SELECT SD_SUBSCRIBER_ID,SD_HANDSET_NO,SD_SIM_NO,SD_TRANS_STATUS,SD_STAT_CODE,SD_DCONNECT_DATE,SD_PRORATA_TO_DATE,SD_REASON,SD_LETTER_TYPE,SD_DISCON_CHARGE1,SD_DISCON_CHARGE2,SD_DISCON_CHARGE3,SD_DISCON_CHARGE4,SD_DISCON_CHARGE5,SD_EL_COMMAND,SD_EPPIX_STAMP,SD_N2N_STAMP,SD_ERROR_COMMENT
FROM SD_SIM_DEACTIVATE
WHERE SD_SIM_NO = ?  AND SD_DCONNECT_DATE IS NOT NULL AND SD_DCONNECT_DATE > ?  AND (SD_TRANS_STATUS = ?  )
Argument(s): |0006417202044|2021-07-22|F|
20210722: 100534     ERROR  3505[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getSimFutureDeactivate(SubscriberUpgradeMigradeBLO.java:29969) - No SIM details found in table sd_sim_deactivate for SIM no 0006417202044
20210722: 100534     DEBUG  3506[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.Sysdirm )
20210722: 100534     DEBUG  3506[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractBLO.get(SysdirmAbstractBLO.java:501) - get( filter )
20210722: 100534     DEBUG  3506[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractDACImpl.get(SysdirmAbstractDACImpl.java:435) - get( filter )
20210722: 100534     DEBUG  3507[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
Sysdirm|0|equalSystemKey|

20210722: 100534     DEBUG  3556[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: Sysdirm
Execute SQL Statement: SELECT SYSTEM_KEY, KEY_VALUE, DESCRIPTION
FROM SYSDIRM
WHERE (SYSTEM_KEY) = ?
Argument(s): |ASONNETWK|
20210722: 100534     DEBUG  3557[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1e81f4dc
20210722: 100534     DEBUG  3660[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SbdSubDets )
20210722: 100534     DEBUG  3661[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractBLO.get(SbdSubDetsAbstractBLO.java:531) - get( filter )
20210722: 100534     DEBUG  3662[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractDACImpl.get(SbdSubDetsAbstractDACImpl.java:556) - get( filter )
20210722: 100534     DEBUG  3662[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
SbdSubDets|0|equalSbdSubscriberId|

20210722: 100534     DEBUG  3714[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SbdSubDets
Execute SQL Statement: SELECT SBD_SUBSCRIBER_ID, SBD_DIALLING_NO, SBD_BILL_AC_NO, SBD_CONNECT_DATE, SBD_DCONNECT_DATE, SBD_TERM_DATE, SBD_TITLE, SBD_SURNAME, SBD_FIRSTNAME, SBD_GENDER, SBD_DOB, SBD_PASSWORD, SBD_LOCATION_CODE, SBD_BILL_CYCLE, SBD_PACKAGE_CODE, SBD_BILLED_UPTO, SBD_TARIFF_PLAN
FROM SBD_SUB_DETS
WHERE SBD_SUBSCRIBER_ID = ?
Argument(s): |1003715120|
20210722: 100534     DEBUG  3716[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7960847b
20210722: 100534      INFO  3813[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.tmpN2NLocSrvPopulate(SubscriberUpgradeMigradeBLO.java:44814) - SBD Record found for subscriber: 1003715120
20210722: 100534     DEBUG  3820[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
getVasVamVsmSubSimlist|0|NONE|

20210722: 100534     DEBUG  3969[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2376) - iterator(static SQL): DML Name: getVasVamVsmSubSimlist
Execute SQL Statement: SELECT VAS_SUBSCRIBER_ID,VAS_SERVICE_CODE,VAS_INTERN_TARIFF,VAS_SERVICE_TYPE,VAS_ACT_DATE DATE,VAS_DEACT_DATE,VAS_SUB_CHARGE1,VAS_SUB_CHARGE2,VAS_SUB_CHARGE3,VAS_TWINBILL_NO,VAS_MULTI_CHARGE, VAM_SUBSCRIBER_ID, VAM_SIM_NO, VAM_MSISDN_NO, VAM_TWINBILL_NO, VAM_STAT_CODE, VAM_CONNECT_DATE, VAM_DCONNECT_DATE, VAM_INTERN_TARIFF, VAM_CONTR_TERMINAT, VAM_CONTR_PERIOD, VAM_TERMINAT_NOTIF, VAM_DIR_ENTRY, VAM_ITEMISED, VAM_DEPARTMENT, VAM_SALESMAN, VAM_DEALER_ID, VAM_ABAR_DATE, VAM_SUBS_SUFFIX, VAM_MESS_COMMENT, VAM_AIRTIME_NET, VAM_PR_FLAG, VAM_HIERARCHY, VAM_MSISDN_KNOWN, VAM_TARIFF_CHG, VAM_ORIG_PROV_ID, VAM_IMP_PROV_ID, VAM_ORIG_SERV_PROV, VAM_IMP_SERV_PROV, VAM_MSISDN_TYPE, VAM_DUMMY, VAM_MSISDN_EXPRTD, VAM_EXPORTED_TO, VAM_ANALYSIS_1, VAM_ANALYSIS_2, VAM_ANALYSIS_3, VAM_ANALYSIS_4, VAM_ANALYSIS_5, VSM_SUBSCRIBER_ID, VSM_SERVICE_CODE, VSM_MSISDN_NO, VSM_ACTIVATE_DATE, VSM_DEACT_DATE, VSM_BILLED_UPTO, VSM_NODE_SENT FROM vam_active_msisdn, vas_active_service, vsm_service_msisdn WHERE vam_subscriber_id =  ? AND vam_sim_no MATCHES ? AND vam_subscriber_id = vas_subscriber_id AND vas_service_code = vsm_service_code AND vsm_msisdn_no = vam_msisdn_no AND vsm_subscriber_id = vam_subscriber_id ORDER BY vas_service_code
Argument(s): |1003715120|0006417202044|
20210722: 100534     DEBUG  3973[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@77556fd
20210722: 100534     DEBUG  4025[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TsTariffService )
20210722: 100534     DEBUG  4033[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getTsTariffServiceDAC(BaseDACFactory.java:291) - getTsTariffServiceDAC()
20210722: 100534     DEBUG  4037[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.TsTariffServiceDACImpl com.eppixcomm.eppix.base.dml.TsTariffServiceAbstractDMLFactory@16f65612
20210722: 100534     DEBUG  4037[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.TsTariffServiceDACImpl
20210722: 100534     DEBUG  4039[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100534     DEBUG  4039[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.TsTariffServiceDACImpl TO MAP
20210722: 100534     DEBUG  4039[main] - com.eppixcomm.eppix.base.blo.TsTariffServiceAbstractBLO.get(TsTariffServiceAbstractBLO.java:593) - get( filter )
20210722: 100534     DEBUG  4039[main] - com.eppixcomm.eppix.base.blo.TsTariffServiceAbstractDACImpl.get(TsTariffServiceAbstractDACImpl.java:589) - get( filter )
20210722: 100534     DEBUG  4040[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
TsTariffService|0|equalTsPackageCode+equalTsServiceCode+equalornullTsInternalTariff|

20210722: 100534     DEBUG  4187[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TsTariffService
Execute SQL Statement: SELECT TS_PACKAGE_CODE, TS_INTERNAL_TARIFF, TS_SERVICE_CODE, TS_NET_SERV_CODE, TS_ACT_CHARGE, TS_TDEACT_CHARGE, TS_REACT_CHARGE, TS_PDEACT_CHARGE, TS_SUB_CHARGE1, TS_SUB_CHARGE2, TS_SUB_CHARGE3, TS_CHARGE_PERIOD, TS_CHARGE_FREQ, TS_DISCOUNT_REF, TS_ACT_INCLUSIVE
FROM TS_TARIFF_SERVICE
WHERE (TS_PACKAGE_CODE) = ? AND (TS_SERVICE_CODE) = ? AND ((TS_INTERNAL_TARIFF) = ? OR TS_INTERNAL_TARIFF IS NULL)
Argument(s): |QQQQQ|BSTL|QQA|
20210722: 100534     DEBUG  4189[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2aae9190
20210722: 100535     DEBUG  4290[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getSim(SubscriberUpgradeMigradeBLO.java:9536) - 
=======================================================================================
PARAM OPTION: ALL
PARAM SIM NO: 0006417202044
PARAM NETWORK ID: 
PARAM HLR: 
PARAM DEALER ID: 
PARAM CUSTOMER: 
=======================================================================================
20210722: 100535     DEBUG  4291[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SacSimAssignCus )
20210722: 100535     DEBUG  4291[main] - com.eppixcomm.eppix.base.blo.SacSimAssignCusAbstractBLO.get(SacSimAssignCusAbstractBLO.java:287) - get( filter )
20210722: 100535     DEBUG  4292[main] - com.eppixcomm.eppix.base.blo.SacSimAssignCusAbstractDACImpl.get(SacSimAssignCusAbstractDACImpl.java:205) - get( filter )
20210722: 100535     DEBUG  4292[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
SacSimAssignCus|0|equalSacSimNo|

20210722: 100535     DEBUG  4336[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SacSimAssignCus
Execute SQL Statement: SELECT SAC_BILL_AC_NO, SAC_SIM_NO 
FROM sac_sim_assign_cus
WHERE SAC_SIM_NO = ? 
Argument(s): |0006417202044|
20210722: 100535      INFO  4432[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getSim(SubscriberUpgradeMigradeBLO.java:10165) - Passed customer no  not found in Sac_Sim_assign_cus
20210722: 100535     DEBUG  4433[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SmnSimNos )
20210722: 100535     DEBUG  4434[main] - com.eppixcomm.eppix.base.blo.SmnSimNosAbstractBLO.get(SmnSimNosAbstractBLO.java:498) - get( filter )
20210722: 100535     DEBUG  4435[main] - com.eppixcomm.eppix.base.blo.SmnSimNosAbstractDACImpl.get(SmnSimNosAbstractDACImpl.java:635) - get( filter )
20210722: 100535     DEBUG  4436[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
SmnSimNos|0|equalSmnSimNo|

20210722: 100535     DEBUG  4481[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SmnSimNos
Execute SQL Statement: SELECT SMN_SIM_NO, SMN_NETWORK_ID, SMN_IMSI_NO, SMN_KI, SMN_ON_NETWORK, SMN_HLR, SMN_PUK_NO, SMN_STATUS, SMN_ACTIVE_DATE, SMN_AVAIL_DATE, SMN_EXPIRY_DATE, SMN_WAREHOUSE, SMN_PRODUCT_CODE, SMN_DEALER_ID, SMN_TRANSPORT_KEY, SMN_PIN_NO, SMN_PUK_NO_2, SMN_PIN_NO_2, SMN_ANALYSIS_1, SMN_ANALYSIS_2, SMN_ANALYSIS_3
FROM SMN_SIM_NOS
WHERE SMN_SIM_NO = ?
Argument(s): |0006417202044|
20210722: 100535     DEBUG  4483[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@299a06ac
20210722: 100535     DEBUG  4585[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getSim(SubscriberUpgradeMigradeBLO.java:10256) - NETWORK PARAMS: OPTION: ALL NETWORK ID:  NETWORKID.LENGTH: 0
20210722: 100535     DEBUG  4588[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VstServiceTypes )
20210722: 100535     DEBUG  4589[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getVstServiceTypesDAC(BaseAbstractDACFactory.java:499) - getVstServiceTypesDAC()
20210722: 100535     DEBUG  4598[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.VstServiceTypesDACImpl com.eppixcomm.eppix.base.dml.VstServiceTypesDMLFactory@136432db
20210722: 100535     DEBUG  4598[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.VstServiceTypesDACImpl
20210722: 100535     DEBUG  4601[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100535     DEBUG  4602[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.VstServiceTypesDACImpl TO MAP
20210722: 100535     DEBUG  4602[main] - com.eppixcomm.eppix.base.blo.VstServiceTypesAbstractBLO.get(VstServiceTypesAbstractBLO.java:595) - get( filter )
20210722: 100535     DEBUG  4603[main] - com.eppixcomm.eppix.base.blo.VstServiceTypesAbstractDACImpl.get(VstServiceTypesAbstractDACImpl.java:540) - get( filter )
20210722: 100535     DEBUG  4604[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
VstServiceTypes|0|equalVstServiceType|

20210722: 100535     DEBUG  4767[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: VstServiceTypes
Execute SQL Statement: SELECT VST_SERVICE_TYPE, VST_SERVICE_DESC, VST_MULTI_CHARGE, VST_SERVICE_CLASS, VST_AUTO_CONNECT, VST_ORIGINATOR, VST_TARIFF_RELATED, VST_PARAMETERISED, VST_PARAMS_LEVEL, VST_ARCHIVE_MONTHS, VST_FUTURE_ACT, VST_NODE_LEVEL
FROM VST_SERVICE_TYPES
WHERE VST_SERVICE_TYPE = ?
Argument(s): |BT|
20210722: 100535     DEBUG  4768[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4ac68d3e
20210722: 100535     DEBUG  4860[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.NgsNetGroupServ )
20210722: 100535     DEBUG  4862[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getNgsNetGroupServDAC(BaseAbstractDACFactory.java:748) - getNgsNetGroupServDAC()
20210722: 100535     DEBUG  4871[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.NgsNetGroupServDACImpl com.eppixcomm.eppix.base.dml.NgsNetGroupServAbstractDMLFactory@3d04a311
20210722: 100535     DEBUG  4872[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.NgsNetGroupServDACImpl
20210722: 100535     DEBUG  4876[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100535     DEBUG  4877[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.NgsNetGroupServDACImpl TO MAP
20210722: 100535     DEBUG  4877[main] - com.eppixcomm.eppix.base.blo.NgsNetGroupServAbstractBLO.get(NgsNetGroupServAbstractBLO.java:601) - get( filter )
20210722: 100535     DEBUG  4878[main] - com.eppixcomm.eppix.base.blo.NgsNetGroupServAbstractDACImpl.get(NgsNetGroupServAbstractDACImpl.java:647) - get( filter )
20210722: 100535     DEBUG  4880[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
NgsNetGroupServ|0|equalNgsCode+equalNgsNetwork|

20210722: 100535     DEBUG  5033[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: NgsNetGroupServ
Execute SQL Statement: SELECT NGS_CODE, NGS_NETWORK, NGS_NET_SERV_CODE, NGS_SEQUENCE, NGS_APPLY_TEXT, NGS_MODIFY_TEXT, NGS_REMOVE_TEXT, NGS_PARAM_NAME1, NGS_PARAM_VALUE1, NGS_PARAM_NAME2, NGS_PARAM_VALUE2, NGS_PARAM_NAME3, NGS_PARAM_VALUE3, NGS_PARAM_NAME4, NGS_PARAM_VALUE4, NGS_PARAM_NAME5, NGS_PARAM_VALUE5
FROM NGS_NET_GROUP_SERV
WHERE NGS_CODE = ? AND NGS_NETWORK = ?
Argument(s): |TELEPHONYPRE|M1|
20210722: 100535     DEBUG  5034[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@532760d8
20210722: 100535     DEBUG  5125[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getSim(SubscriberUpgradeMigradeBLO.java:9536) - 
=======================================================================================
PARAM OPTION: ALL
PARAM SIM NO: 0006417202044
PARAM NETWORK ID: 
PARAM HLR: 
PARAM DEALER ID: 
PARAM CUSTOMER: 
=======================================================================================
20210722: 100535     DEBUG  5125[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SacSimAssignCus )
20210722: 100535     DEBUG  5126[main] - com.eppixcomm.eppix.base.blo.SacSimAssignCusAbstractBLO.get(SacSimAssignCusAbstractBLO.java:287) - get( filter )
20210722: 100535     DEBUG  5126[main] - com.eppixcomm.eppix.base.blo.SacSimAssignCusAbstractDACImpl.get(SacSimAssignCusAbstractDACImpl.java:205) - get( filter )
20210722: 100535     DEBUG  5126[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
SacSimAssignCus|0|equalSacSimNo|

20210722: 100535     DEBUG  5175[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SacSimAssignCus
Execute SQL Statement: SELECT SAC_BILL_AC_NO, SAC_SIM_NO 
FROM sac_sim_assign_cus
WHERE SAC_SIM_NO = ? 
Argument(s): |0006417202044|
20210722: 100536      INFO  5295[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getSim(SubscriberUpgradeMigradeBLO.java:10165) - Passed customer no  not found in Sac_Sim_assign_cus
20210722: 100536     DEBUG  5295[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SmnSimNos )
20210722: 100536     DEBUG  5296[main] - com.eppixcomm.eppix.base.blo.SmnSimNosAbstractBLO.get(SmnSimNosAbstractBLO.java:498) - get( filter )
20210722: 100536     DEBUG  5296[main] - com.eppixcomm.eppix.base.blo.SmnSimNosAbstractDACImpl.get(SmnSimNosAbstractDACImpl.java:635) - get( filter )
20210722: 100536     DEBUG  5297[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
SmnSimNos|0|equalSmnSimNo|

20210722: 100536     DEBUG  5341[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SmnSimNos
Execute SQL Statement: SELECT SMN_SIM_NO, SMN_NETWORK_ID, SMN_IMSI_NO, SMN_KI, SMN_ON_NETWORK, SMN_HLR, SMN_PUK_NO, SMN_STATUS, SMN_ACTIVE_DATE, SMN_AVAIL_DATE, SMN_EXPIRY_DATE, SMN_WAREHOUSE, SMN_PRODUCT_CODE, SMN_DEALER_ID, SMN_TRANSPORT_KEY, SMN_PIN_NO, SMN_PUK_NO_2, SMN_PIN_NO_2, SMN_ANALYSIS_1, SMN_ANALYSIS_2, SMN_ANALYSIS_3
FROM SMN_SIM_NOS
WHERE SMN_SIM_NO = ?
Argument(s): |0006417202044|
20210722: 100536     DEBUG  5344[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@64b8f8f4
20210722: 100536     DEBUG  5438[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getSim(SubscriberUpgradeMigradeBLO.java:10256) - NETWORK PARAMS: OPTION: ALL NETWORK ID:  NETWORKID.LENGTH: 0
20210722: 100536     DEBUG  5439[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VstServiceTypes )
20210722: 100536     DEBUG  5439[main] - com.eppixcomm.eppix.base.blo.VstServiceTypesAbstractBLO.get(VstServiceTypesAbstractBLO.java:595) - get( filter )
20210722: 100536     DEBUG  5440[main] - com.eppixcomm.eppix.base.blo.VstServiceTypesAbstractDACImpl.get(VstServiceTypesAbstractDACImpl.java:540) - get( filter )
20210722: 100536     DEBUG  5440[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
VstServiceTypes|0|equalVstServiceType|

20210722: 100536     DEBUG  5487[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: VstServiceTypes
Execute SQL Statement: SELECT VST_SERVICE_TYPE, VST_SERVICE_DESC, VST_MULTI_CHARGE, VST_SERVICE_CLASS, VST_AUTO_CONNECT, VST_ORIGINATOR, VST_TARIFF_RELATED, VST_PARAMETERISED, VST_PARAMS_LEVEL, VST_ARCHIVE_MONTHS, VST_FUTURE_ACT, VST_NODE_LEVEL
FROM VST_SERVICE_TYPES
WHERE VST_SERVICE_TYPE = ?
Argument(s): |BT|
20210722: 100536     DEBUG  5488[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@424c0bc4
20210722: 100536      INFO  5589[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.tmpN2NLocSrvPopulate(SubscriberUpgradeMigradeBLO.java:45024) - FOUND Service type from VST for BT
20210722: 100536      INFO  5592[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.tmpN2NLocSrvPopulate(SubscriberUpgradeMigradeBLO.java:45067) - LOOP: 0: tmpRecord populated for SIM NO: 0006417202044
20210722: 100536      INFO  5592[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.deactivateSimN2N(SubscriberUpgradeMigradeBLO.java:35750) - Records 1 retrieved from tmpN2NLocSrvPopulate
20210722: 100536     DEBUG  5593[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.deactivateSimN2N(SubscriberUpgradeMigradeBLO.java:35765) - 
N2NTmpRecord [msisdnKnown=1
sim=0006417202044
location=25
eventDate=2021-06-21
servCode=BSTL
servType=BT
internTariff=QQA
msisdn=783290561
rowid=0
originator=N
nodeSent=Y
paramservNetwrkcd=]
20210722: 100536     DEBUG  5594[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.deactivateSimN2N(SubscriberUpgradeMigradeBLO.java:36401) - 
Command: null
gsmCommand: 
SIM NO: 0006417202044
subscriberId: 1003715120
20210722: 100708     DEBUG     0[main] - com.eppixcomm.eppix.base.test.TestDeactivateSimN2N.loadproperties(TestDeactivateSimN2N.java:77) - loading appProperties
20210722: 100708     DEBUG     6[main] - com.eppixcomm.eppix.base.test.TestDeactivateSimN2N.loadproperties(TestDeactivateSimN2N.java:84) - appProperties loaded : {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20210722: 100708     DEBUG     6[main] - com.eppixcomm.eppix.base.test.TestDeactivateSimN2N.dbConnectionInit(TestDeactivateSimN2N.java:97) - DB Connection start
20210722: 100708     DEBUG     6[main] - com.eppixcomm.eppix.base.test.TestDeactivateSimN2N.dbConnectionInit(TestDeactivateSimN2N.java:100) - {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20210722: 100708     DEBUG   771[main] - com.eppixcomm.eppix.common.data.DACFactory.<init>(DACFactory.java:95) - constructor( connection, thrower )
20210722: 100708     DEBUG   775[main] - com.eppixcomm.eppix.common.data.ConnectionContext.connect(ConnectionContext.java:100) - connect( connection )
20210722: 100708     DEBUG   775[main] - com.eppixcomm.eppix.common.data.ConnectionContext.get(ConnectionContext.java:82) - get()
20210722: 100708     DEBUG   794[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20210722: 100709     DEBUG   886[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberUpgradeMigradeDAC(BaseDACFactory.java:518) - getSubscriberUpgradeMigradeDAC
20210722: 100709     DEBUG   893[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl com.eppixcomm.eppix.base.dml.SubscriberUpgradeMigradeDML@6d21714c
20210722: 100709     DEBUG   893[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl
20210722: 100709     DEBUG   912[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100709     DEBUG   912[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl TO MAP
20210722: 100709     DEBUG   913[main] - com.eppixcomm.eppix.base.test.TestDeactivateSimN2N.dbConnectionInit(TestDeactivateSimN2N.java:123) - DB Connection successfull
20210722: 100709     DEBUG   915[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.Sysdirm )
20210722: 100709     DEBUG   965[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSysdirmDAC(BaseAbstractDACFactory.java:327) - getSysdirmDAC()
20210722: 100709     DEBUG   970[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SysdirmDACImpl com.eppixcomm.eppix.base.dml.SysdirmAbstractDMLFactory@7e32c033
20210722: 100709     DEBUG   970[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SysdirmDACImpl
20210722: 100709     DEBUG   972[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100709     DEBUG   972[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SysdirmDACImpl TO MAP
20210722: 100709     DEBUG   972[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractBLO.get(SysdirmAbstractBLO.java:501) - get( filter )
20210722: 100709     DEBUG   972[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractDACImpl.get(SysdirmAbstractDACImpl.java:435) - get( filter )
20210722: 100709     DEBUG   976[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
Sysdirm|0|equalSystemKey|

20210722: 100709     DEBUG  1134[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: Sysdirm
Execute SQL Statement: SELECT SYSTEM_KEY, KEY_VALUE, DESCRIPTION
FROM SYSDIRM
WHERE (SYSTEM_KEY) = ?
Argument(s): |ASSWITCHM1|
20210722: 100709     DEBUG  1135[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5d6f64b1
20210722: 100709     DEBUG  1233[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VpnProviderNetwk )
20210722: 100709     DEBUG  1235[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getVpnProviderNetwkDAC(BaseAbstractDACFactory.java:435) - getVpnProviderNetwkDAC()
20210722: 100709     DEBUG  1243[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.VpnProviderNetwkDACImpl com.eppixcomm.eppix.base.dml.VpnProviderNetwkDMLFactory@5e8c92f4
20210722: 100709     DEBUG  1244[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.VpnProviderNetwkDACImpl
20210722: 100709     DEBUG  1247[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100709     DEBUG  1249[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.VpnProviderNetwkDACImpl TO MAP
20210722: 100709     DEBUG  1249[main] - com.eppixcomm.eppix.base.blo.VpnProviderNetwkAbstractBLO.iterate(VpnProviderNetwkAbstractBLO.java:500) - iterate( filter )
20210722: 100709     DEBUG  1250[main] - com.eppixcomm.eppix.base.blo.VpnProviderNetwkAbstractDACImpl.iterate(VpnProviderNetwkAbstractDACImpl.java:421) - iterate( filter )
20210722: 100709     DEBUG  1251[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
VpnProviderNetwk|0|VpnNetworkPrefixMatch|

20210722: 100709     DEBUG  1396[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2276) - iterator(param SQL): DML Name: VpnProviderNetwk
Execute SQL Statement: SELECT VPN_PROVIDER_ID, VPN_NETWORK_PREFIX, VPN_MSISDN_MASK, VPN_SIM_MASK
FROM VPN_PROVIDER_NETWK
WHERE VPN_NETWORK_PREFIX LIKE ?
Argument(s): |%78%|
20210722: 100709     DEBUG  1399[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@694f9431
20210722: 100709     DEBUG  1457[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VamActiveMsisdn )
20210722: 100709     DEBUG  1459[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getVamActiveMsisdnDAC(BaseDACFactory.java:260) - getVamActiveMsisdnDAC()
20210722: 100709     DEBUG  1485[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.VamActiveMsisdnDACImpl com.eppixcomm.eppix.base.dml.VamActiveMsisdnDMLFactory@3581c5f3
20210722: 100709     DEBUG  1487[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.VamActiveMsisdnDACImpl
20210722: 100709     DEBUG  1493[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100709     DEBUG  1493[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.VamActiveMsisdnDACImpl TO MAP
20210722: 100709     DEBUG  1493[main] - com.eppixcomm.eppix.base.blo.VamActiveMsisdnAbstractBLO.get(VamActiveMsisdnAbstractBLO.java:654) - get( filter )
20210722: 100709     DEBUG  1494[main] - com.eppixcomm.eppix.base.blo.VamActiveMsisdnAbstractDACImpl.get(VamActiveMsisdnAbstractDACImpl.java:683) - get( filter )
20210722: 100709     DEBUG  1496[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
VamActiveMsisdn|0|equalVamMsisdnNo+equalVamStatCode|

20210722: 100709     DEBUG  1648[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: VamActiveMsisdn
Execute SQL Statement: SELECT VAM_SUBSCRIBER_ID, VAM_SIM_NO, VAM_MSISDN_NO, VAM_TWINBILL_NO, VAM_STAT_CODE, VAM_CONNECT_DATE, VAM_DCONNECT_DATE, VAM_INTERN_TARIFF, VAM_CONTR_TERMINAT, VAM_CONTR_PERIOD, VAM_TERMINAT_NOTIF, VAM_DIR_ENTRY, VAM_ITEMISED, VAM_DEPARTMENT, VAM_SALESMAN, VAM_DEALER_ID, VAM_ABAR_DATE, VAM_SUBS_SUFFIX, VAM_MESS_COMMENT, VAM_AIRTIME_NET, VAM_PR_FLAG, VAM_HIERARCHY, VAM_MSISDN_KNOWN, VAM_TARIFF_CHG, VAM_ORIG_PROV_ID, VAM_IMP_PROV_ID, VAM_ORIG_SERV_PROV, VAM_IMP_SERV_PROV, VAM_MSISDN_TYPE, VAM_DUMMY, VAM_MSISDN_EXPRTD, VAM_EXPORTED_TO, VAM_ANALYSIS_1, VAM_ANALYSIS_2, VAM_ANALYSIS_3, VAM_ANALYSIS_4, VAM_ANALYSIS_5
FROM VAM_ACTIVE_MSISDN
WHERE (VAM_MSISDN_NO) = ? AND (VAM_STAT_CODE) = ?
Argument(s): |783290561|1|
20210722: 100709     DEBUG  1665[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1b9e1916
20210722: 100709     DEBUG  1753[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VpnProviderNetwk )
20210722: 100709     DEBUG  1754[main] - com.eppixcomm.eppix.base.blo.VpnProviderNetwkAbstractBLO.iterate(VpnProviderNetwkAbstractBLO.java:500) - iterate( filter )
20210722: 100709     DEBUG  1755[main] - com.eppixcomm.eppix.base.blo.VpnProviderNetwkAbstractDACImpl.iterate(VpnProviderNetwkAbstractDACImpl.java:421) - iterate( filter )
20210722: 100709     DEBUG  1756[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
VpnProviderNetwk|0|VpnNetworkPrefixMatch|

20210722: 100709     DEBUG  1845[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2276) - iterator(param SQL): DML Name: VpnProviderNetwk
Execute SQL Statement: SELECT VPN_PROVIDER_ID, VPN_NETWORK_PREFIX, VPN_MSISDN_MASK, VPN_SIM_MASK
FROM VPN_PROVIDER_NETWK
WHERE VPN_NETWORK_PREFIX LIKE ?
Argument(s): |%78%|
20210722: 100709     DEBUG  1847[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@45fe3ee3
20210722: 100710     DEBUG  1901[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getSim(SubscriberUpgradeMigradeBLO.java:9536) - 
=======================================================================================
PARAM OPTION: ALL
PARAM SIM NO: 0006417202044
PARAM NETWORK ID: 
PARAM HLR: 
PARAM DEALER ID: 
PARAM CUSTOMER: 
=======================================================================================
20210722: 100710     DEBUG  1904[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SacSimAssignCus )
20210722: 100710     DEBUG  1905[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSacSimAssignCusDAC(BaseAbstractDACFactory.java:1345) - getSacSimAssignCusDAC()
20210722: 100710     DEBUG  1914[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SacSimAssignCusDACImpl com.eppixcomm.eppix.base.dml.SacSimAssignCusDMLFactory@5eb5c224
20210722: 100710     DEBUG  1915[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SacSimAssignCusDACImpl
20210722: 100710     DEBUG  1919[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100710     DEBUG  1920[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SacSimAssignCusDACImpl TO MAP
20210722: 100710     DEBUG  1921[main] - com.eppixcomm.eppix.base.blo.SacSimAssignCusAbstractBLO.get(SacSimAssignCusAbstractBLO.java:287) - get( filter )
20210722: 100710     DEBUG  1921[main] - com.eppixcomm.eppix.base.blo.SacSimAssignCusAbstractDACImpl.get(SacSimAssignCusAbstractDACImpl.java:205) - get( filter )
20210722: 100710     DEBUG  1923[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
SacSimAssignCus|0|equalSacSimNo|

20210722: 100710     DEBUG  2077[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SacSimAssignCus
Execute SQL Statement: SELECT SAC_BILL_AC_NO, SAC_SIM_NO 
FROM sac_sim_assign_cus
WHERE SAC_SIM_NO = ? 
Argument(s): |0006417202044|
20210722: 100710      INFO  2165[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getSim(SubscriberUpgradeMigradeBLO.java:10165) - Passed customer no  not found in Sac_Sim_assign_cus
20210722: 100710     DEBUG  2168[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SmnSimNos )
20210722: 100710     DEBUG  2170[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSmnSimNosDAC(BaseAbstractDACFactory.java:387) - getSmnSimNosDAC()
20210722: 100710     DEBUG  2184[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SmnSimNosDACImpl com.eppixcomm.eppix.base.dml.SmnSimNosDMLFactory@ee7d9f1
20210722: 100710     DEBUG  2185[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SmnSimNosDACImpl
20210722: 100710     DEBUG  2187[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100710     DEBUG  2187[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SmnSimNosDACImpl TO MAP
20210722: 100710     DEBUG  2188[main] - com.eppixcomm.eppix.base.blo.SmnSimNosAbstractBLO.get(SmnSimNosAbstractBLO.java:498) - get( filter )
20210722: 100710     DEBUG  2188[main] - com.eppixcomm.eppix.base.blo.SmnSimNosAbstractDACImpl.get(SmnSimNosAbstractDACImpl.java:635) - get( filter )
20210722: 100710     DEBUG  2189[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
SmnSimNos|0|equalSmnSimNo|

20210722: 100710     DEBUG  2332[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SmnSimNos
Execute SQL Statement: SELECT SMN_SIM_NO, SMN_NETWORK_ID, SMN_IMSI_NO, SMN_KI, SMN_ON_NETWORK, SMN_HLR, SMN_PUK_NO, SMN_STATUS, SMN_ACTIVE_DATE, SMN_AVAIL_DATE, SMN_EXPIRY_DATE, SMN_WAREHOUSE, SMN_PRODUCT_CODE, SMN_DEALER_ID, SMN_TRANSPORT_KEY, SMN_PIN_NO, SMN_PUK_NO_2, SMN_PIN_NO_2, SMN_ANALYSIS_1, SMN_ANALYSIS_2, SMN_ANALYSIS_3
FROM SMN_SIM_NOS
WHERE SMN_SIM_NO = ?
Argument(s): |0006417202044|
20210722: 100710     DEBUG  2335[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@dcf3e99
20210722: 100710     DEBUG  2425[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getSim(SubscriberUpgradeMigradeBLO.java:10256) - NETWORK PARAMS: OPTION: ALL NETWORK ID:  NETWORKID.LENGTH: 0
20210722: 100710     DEBUG  2426[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VamActiveMsisdn )
20210722: 100710     DEBUG  2426[main] - com.eppixcomm.eppix.base.blo.VamActiveMsisdnAbstractBLO.get(VamActiveMsisdnAbstractBLO.java:654) - get( filter )
20210722: 100710     DEBUG  2427[main] - com.eppixcomm.eppix.base.blo.VamActiveMsisdnAbstractDACImpl.get(VamActiveMsisdnAbstractDACImpl.java:683) - get( filter )
20210722: 100710     DEBUG  2427[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
VamActiveMsisdn|0|equalVamSubscriberId+equalVamSimNo+equalVamHierarchy+INVamStatCode_3|

20210722: 100710     DEBUG  2571[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: VamActiveMsisdn
Execute SQL Statement: SELECT VAM_SUBSCRIBER_ID, VAM_SIM_NO, VAM_MSISDN_NO, VAM_TWINBILL_NO, VAM_STAT_CODE, VAM_CONNECT_DATE, VAM_DCONNECT_DATE, VAM_INTERN_TARIFF, VAM_CONTR_TERMINAT, VAM_CONTR_PERIOD, VAM_TERMINAT_NOTIF, VAM_DIR_ENTRY, VAM_ITEMISED, VAM_DEPARTMENT, VAM_SALESMAN, VAM_DEALER_ID, VAM_ABAR_DATE, VAM_SUBS_SUFFIX, VAM_MESS_COMMENT, VAM_AIRTIME_NET, VAM_PR_FLAG, VAM_HIERARCHY, VAM_MSISDN_KNOWN, VAM_TARIFF_CHG, VAM_ORIG_PROV_ID, VAM_IMP_PROV_ID, VAM_ORIG_SERV_PROV, VAM_IMP_SERV_PROV, VAM_MSISDN_TYPE, VAM_DUMMY, VAM_MSISDN_EXPRTD, VAM_EXPORTED_TO, VAM_ANALYSIS_1, VAM_ANALYSIS_2, VAM_ANALYSIS_3, VAM_ANALYSIS_4, VAM_ANALYSIS_5
FROM VAM_ACTIVE_MSISDN
WHERE VAM_SUBSCRIBER_ID = ? AND (VAM_SIM_NO) = ? AND (VAM_HIERARCHY) = ? AND VAM_STAT_CODE IN ( ? , ? , ? )
Argument(s): |1003715120|0006417202044|0|1|4|6|
20210722: 100710     DEBUG  2575[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@515f550a
20210722: 100710     DEBUG  2670[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SbdSubDets )
20210722: 100710     DEBUG  2671[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSbdSubDetsDAC(BaseAbstractDACFactory.java:234) - getSbdSubDetsDAC()
20210722: 100710     DEBUG  2681[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl com.eppixcomm.eppix.base.dml.SbdSubDetsAbstractDMLFactory@379619aa
20210722: 100710     DEBUG  2682[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl
20210722: 100710     DEBUG  2686[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100710     DEBUG  2687[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl TO MAP
20210722: 100710     DEBUG  2687[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractBLO.get(SbdSubDetsAbstractBLO.java:531) - get( filter )
20210722: 100710     DEBUG  2688[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractDACImpl.get(SbdSubDetsAbstractDACImpl.java:556) - get( filter )
20210722: 100710     DEBUG  2691[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
SbdSubDets|0|equalSbdSubscriberId|

20210722: 100710     DEBUG  2829[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SbdSubDets
Execute SQL Statement: SELECT SBD_SUBSCRIBER_ID, SBD_DIALLING_NO, SBD_BILL_AC_NO, SBD_CONNECT_DATE, SBD_DCONNECT_DATE, SBD_TERM_DATE, SBD_TITLE, SBD_SURNAME, SBD_FIRSTNAME, SBD_GENDER, SBD_DOB, SBD_PASSWORD, SBD_LOCATION_CODE, SBD_BILL_CYCLE, SBD_PACKAGE_CODE, SBD_BILLED_UPTO, SBD_TARIFF_PLAN
FROM SBD_SUB_DETS
WHERE SBD_SUBSCRIBER_ID = ?
Argument(s): |1003715120|
20210722: 100710     DEBUG  2832[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@182decdb
20210722: 100711     DEBUG  2928[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SbaSubAux )
20210722: 100711     DEBUG  2929[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSbaSubAuxDAC(BaseAbstractDACFactory.java:995) - getSbaSubAuxDAC()
20210722: 100711     DEBUG  2944[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SbaSubAuxDACImpl com.eppixcomm.eppix.base.dml.SbaSubAuxDMLFactory@2401f4c3
20210722: 100711     DEBUG  2945[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SbaSubAuxDACImpl
20210722: 100711     DEBUG  2949[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100711     DEBUG  2950[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SbaSubAuxDACImpl TO MAP
20210722: 100711     DEBUG  2951[main] - com.eppixcomm.eppix.base.blo.SbaSubAuxAbstractBLO.get(SbaSubAuxAbstractBLO.java:283) - get( filter )
20210722: 100711     DEBUG  2952[main] - com.eppixcomm.eppix.base.blo.SbaSubAuxAbstractDACImpl.get(SbaSubAuxAbstractDACImpl.java:101) - get( filter )
20210722: 100711     DEBUG  2956[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
SbaSubAux|0|equalSbaSubscriberId|

20210722: 100711     DEBUG  3099[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SbaSubAux
Execute SQL Statement: SELECT SBA_SUBSCRIBER_ID, SBA_ID_NUMBER, SBA_MATCHCODE, SBA_MARKETING, SBA_THIRD_PARTY, SBA_CUST_DEPT, SBA_DEALER_ID, SBA_DEPARTMENT, SBA_SALESMAN, SBA_REGION, SBA_INVOICE_ADDRID, SBA_INV_ACCOUNT, SBA_PREPAID_STAT, SBA_ANALYSIS_1, SBA_ANALYSIS_2, SBA_ANALYSIS_3, SBA_ANALYSIS_4, SBA_ANALYSIS_5, SBA_ANALYSIS_6, SBA_ANALYSIS_7, SBA_ANALYSIS_8, SBA_ANALYSIS_9, SBA_ANALYSIS_10, SBA_ANALYSIS_11, SBA_ANALYSIS_12, SBA_ANALYSIS_13, SBA_ANALYSIS_14, SBA_ANALYSIS_15, SBA_ANALYSIS_16, SBA_ANALYSIS_17, SBA_ANALYSIS_18, SBA_ANALYSIS_19, SBA_ANALYSIS_20, SBA_ANALYSIS_21, SBA_ANALYSIS_22, SBA_ANALYSIS_23, SBA_ANALYSIS_24, SBA_ANALYSIS_25, SBA_ANALYSIS_26, SBA_ANALYSIS_27, SBA_ANALYSIS_28, SBA_ANALYSIS_29, SBA_ANALYSIS_30,SBA_COMMENTS
FROM SBA_SUB_AUX
WHERE SBA_SUBSCRIBER_ID = ?
Argument(s): |1003715120|
20210722: 100711     DEBUG  3103[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@123772c4
20210722: 100711     DEBUG  3199[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SdSimDeactivate )
20210722: 100711     DEBUG  3200[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSdSimDeactivateDAC(BaseAbstractDACFactory.java:1141) - getSdSimDeactivateDAC()
20210722: 100711     DEBUG  3208[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SdSimDeactivateDACImpl com.eppixcomm.eppix.base.dml.SdSimDeactivateDMLFactory@73a28541
20210722: 100711     DEBUG  3209[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SdSimDeactivateDACImpl
20210722: 100711     DEBUG  3212[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100711     DEBUG  3214[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SdSimDeactivateDACImpl TO MAP
20210722: 100711     DEBUG  3216[main] - com.eppixcomm.eppix.base.blo.SdSimDeactivateAbstractBLO.get(SdSimDeactivateAbstractBLO.java:400) - get( filter )
20210722: 100711     DEBUG  3216[main] - com.eppixcomm.eppix.base.blo.SdSimDeactivateAbstractDACImpl.get(SdSimDeactivateAbstractDACImpl.java:421) - get( filter )
20210722: 100711     DEBUG  3217[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
SdSimDeactivate|0|equalSdSimNo+notnullSdDconnectDate+greaterthanSdDconnectDate|equalSdTransStatus|

20210722: 100711     DEBUG  3360[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SdSimDeactivate
Execute SQL Statement: SELECT SD_SUBSCRIBER_ID,SD_HANDSET_NO,SD_SIM_NO,SD_TRANS_STATUS,SD_STAT_CODE,SD_DCONNECT_DATE,SD_PRORATA_TO_DATE,SD_REASON,SD_LETTER_TYPE,SD_DISCON_CHARGE1,SD_DISCON_CHARGE2,SD_DISCON_CHARGE3,SD_DISCON_CHARGE4,SD_DISCON_CHARGE5,SD_EL_COMMAND,SD_EPPIX_STAMP,SD_N2N_STAMP,SD_ERROR_COMMENT
FROM SD_SIM_DEACTIVATE
WHERE SD_SIM_NO = ?  AND SD_DCONNECT_DATE IS NOT NULL AND SD_DCONNECT_DATE > ?  AND (SD_TRANS_STATUS = ?  )
Argument(s): |0006417202044|2021-07-22|F|
20210722: 100711     ERROR  3454[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getSimFutureDeactivate(SubscriberUpgradeMigradeBLO.java:29969) - No SIM details found in table sd_sim_deactivate for SIM no 0006417202044
20210722: 100711     DEBUG  3455[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.Sysdirm )
20210722: 100711     DEBUG  3456[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractBLO.get(SysdirmAbstractBLO.java:501) - get( filter )
20210722: 100711     DEBUG  3456[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractDACImpl.get(SysdirmAbstractDACImpl.java:435) - get( filter )
20210722: 100711     DEBUG  3457[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
Sysdirm|0|equalSystemKey|

20210722: 100711     DEBUG  3509[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: Sysdirm
Execute SQL Statement: SELECT SYSTEM_KEY, KEY_VALUE, DESCRIPTION
FROM SYSDIRM
WHERE (SYSTEM_KEY) = ?
Argument(s): |ASONNETWK|
20210722: 100711     DEBUG  3510[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1e81f4dc
20210722: 100711     DEBUG  3611[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SbdSubDets )
20210722: 100711     DEBUG  3611[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractBLO.get(SbdSubDetsAbstractBLO.java:531) - get( filter )
20210722: 100711     DEBUG  3611[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractDACImpl.get(SbdSubDetsAbstractDACImpl.java:556) - get( filter )
20210722: 100711     DEBUG  3612[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
SbdSubDets|0|equalSbdSubscriberId|

20210722: 100711     DEBUG  3655[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SbdSubDets
Execute SQL Statement: SELECT SBD_SUBSCRIBER_ID, SBD_DIALLING_NO, SBD_BILL_AC_NO, SBD_CONNECT_DATE, SBD_DCONNECT_DATE, SBD_TERM_DATE, SBD_TITLE, SBD_SURNAME, SBD_FIRSTNAME, SBD_GENDER, SBD_DOB, SBD_PASSWORD, SBD_LOCATION_CODE, SBD_BILL_CYCLE, SBD_PACKAGE_CODE, SBD_BILLED_UPTO, SBD_TARIFF_PLAN
FROM SBD_SUB_DETS
WHERE SBD_SUBSCRIBER_ID = ?
Argument(s): |1003715120|
20210722: 100711     DEBUG  3655[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7960847b
20210722: 100711      INFO  3744[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.tmpN2NLocSrvPopulate(SubscriberUpgradeMigradeBLO.java:44815) - SBD Record found for subscriber: 1003715120
20210722: 100711     DEBUG  3750[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
getVasVamVsmSubSimlist|0|NONE|

20210722: 100712     DEBUG  3927[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2376) - iterator(static SQL): DML Name: getVasVamVsmSubSimlist
Execute SQL Statement: SELECT VAS_SUBSCRIBER_ID,VAS_SERVICE_CODE,VAS_INTERN_TARIFF,VAS_SERVICE_TYPE,VAS_ACT_DATE DATE,VAS_DEACT_DATE,VAS_SUB_CHARGE1,VAS_SUB_CHARGE2,VAS_SUB_CHARGE3,VAS_TWINBILL_NO,VAS_MULTI_CHARGE, VAM_SUBSCRIBER_ID, VAM_SIM_NO, VAM_MSISDN_NO, VAM_TWINBILL_NO, VAM_STAT_CODE, VAM_CONNECT_DATE, VAM_DCONNECT_DATE, VAM_INTERN_TARIFF, VAM_CONTR_TERMINAT, VAM_CONTR_PERIOD, VAM_TERMINAT_NOTIF, VAM_DIR_ENTRY, VAM_ITEMISED, VAM_DEPARTMENT, VAM_SALESMAN, VAM_DEALER_ID, VAM_ABAR_DATE, VAM_SUBS_SUFFIX, VAM_MESS_COMMENT, VAM_AIRTIME_NET, VAM_PR_FLAG, VAM_HIERARCHY, VAM_MSISDN_KNOWN, VAM_TARIFF_CHG, VAM_ORIG_PROV_ID, VAM_IMP_PROV_ID, VAM_ORIG_SERV_PROV, VAM_IMP_SERV_PROV, VAM_MSISDN_TYPE, VAM_DUMMY, VAM_MSISDN_EXPRTD, VAM_EXPORTED_TO, VAM_ANALYSIS_1, VAM_ANALYSIS_2, VAM_ANALYSIS_3, VAM_ANALYSIS_4, VAM_ANALYSIS_5, VSM_SUBSCRIBER_ID, VSM_SERVICE_CODE, VSM_MSISDN_NO, VSM_ACTIVATE_DATE, VSM_DEACT_DATE, VSM_BILLED_UPTO, VSM_NODE_SENT FROM vam_active_msisdn, vas_active_service, vsm_service_msisdn WHERE vam_subscriber_id =  ? AND vam_sim_no MATCHES ? AND vam_subscriber_id = vas_subscriber_id AND vas_service_code = vsm_service_code AND vsm_msisdn_no = vam_msisdn_no AND vsm_subscriber_id = vam_subscriber_id ORDER BY vas_service_code
Argument(s): |1003715120|0006417202044|
20210722: 100712     DEBUG  3932[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@77556fd
20210722: 100712     DEBUG  3988[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TsTariffService )
20210722: 100712     DEBUG  4002[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getTsTariffServiceDAC(BaseDACFactory.java:291) - getTsTariffServiceDAC()
20210722: 100712     DEBUG  4013[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.TsTariffServiceDACImpl com.eppixcomm.eppix.base.dml.TsTariffServiceAbstractDMLFactory@16f65612
20210722: 100712     DEBUG  4014[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.TsTariffServiceDACImpl
20210722: 100712     DEBUG  4016[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100712     DEBUG  4016[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.TsTariffServiceDACImpl TO MAP
20210722: 100712     DEBUG  4016[main] - com.eppixcomm.eppix.base.blo.TsTariffServiceAbstractBLO.get(TsTariffServiceAbstractBLO.java:593) - get( filter )
20210722: 100712     DEBUG  4017[main] - com.eppixcomm.eppix.base.blo.TsTariffServiceAbstractDACImpl.get(TsTariffServiceAbstractDACImpl.java:589) - get( filter )
20210722: 100712     DEBUG  4017[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
TsTariffService|0|equalTsPackageCode+equalTsServiceCode+equalornullTsInternalTariff|

20210722: 100712     DEBUG  4182[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TsTariffService
Execute SQL Statement: SELECT TS_PACKAGE_CODE, TS_INTERNAL_TARIFF, TS_SERVICE_CODE, TS_NET_SERV_CODE, TS_ACT_CHARGE, TS_TDEACT_CHARGE, TS_REACT_CHARGE, TS_PDEACT_CHARGE, TS_SUB_CHARGE1, TS_SUB_CHARGE2, TS_SUB_CHARGE3, TS_CHARGE_PERIOD, TS_CHARGE_FREQ, TS_DISCOUNT_REF, TS_ACT_INCLUSIVE
FROM TS_TARIFF_SERVICE
WHERE (TS_PACKAGE_CODE) = ? AND (TS_SERVICE_CODE) = ? AND ((TS_INTERNAL_TARIFF) = ? OR TS_INTERNAL_TARIFF IS NULL)
Argument(s): |QQQQQ|BSTL|QQA|
20210722: 100712     DEBUG  4183[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2aae9190
20210722: 100712     DEBUG  4277[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getSim(SubscriberUpgradeMigradeBLO.java:9536) - 
=======================================================================================
PARAM OPTION: ALL
PARAM SIM NO: 0006417202044
PARAM NETWORK ID: 
PARAM HLR: 
PARAM DEALER ID: 
PARAM CUSTOMER: 
=======================================================================================
20210722: 100712     DEBUG  4278[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SacSimAssignCus )
20210722: 100712     DEBUG  4278[main] - com.eppixcomm.eppix.base.blo.SacSimAssignCusAbstractBLO.get(SacSimAssignCusAbstractBLO.java:287) - get( filter )
20210722: 100712     DEBUG  4279[main] - com.eppixcomm.eppix.base.blo.SacSimAssignCusAbstractDACImpl.get(SacSimAssignCusAbstractDACImpl.java:205) - get( filter )
20210722: 100712     DEBUG  4279[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
SacSimAssignCus|0|equalSacSimNo|

20210722: 100712     DEBUG  4325[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SacSimAssignCus
Execute SQL Statement: SELECT SAC_BILL_AC_NO, SAC_SIM_NO 
FROM sac_sim_assign_cus
WHERE SAC_SIM_NO = ? 
Argument(s): |0006417202044|
20210722: 100712      INFO  4451[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getSim(SubscriberUpgradeMigradeBLO.java:10165) - Passed customer no  not found in Sac_Sim_assign_cus
20210722: 100712     DEBUG  4453[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SmnSimNos )
20210722: 100712     DEBUG  4454[main] - com.eppixcomm.eppix.base.blo.SmnSimNosAbstractBLO.get(SmnSimNosAbstractBLO.java:498) - get( filter )
20210722: 100712     DEBUG  4454[main] - com.eppixcomm.eppix.base.blo.SmnSimNosAbstractDACImpl.get(SmnSimNosAbstractDACImpl.java:635) - get( filter )
20210722: 100712     DEBUG  4455[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
SmnSimNos|0|equalSmnSimNo|

20210722: 100712     DEBUG  4520[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SmnSimNos
Execute SQL Statement: SELECT SMN_SIM_NO, SMN_NETWORK_ID, SMN_IMSI_NO, SMN_KI, SMN_ON_NETWORK, SMN_HLR, SMN_PUK_NO, SMN_STATUS, SMN_ACTIVE_DATE, SMN_AVAIL_DATE, SMN_EXPIRY_DATE, SMN_WAREHOUSE, SMN_PRODUCT_CODE, SMN_DEALER_ID, SMN_TRANSPORT_KEY, SMN_PIN_NO, SMN_PUK_NO_2, SMN_PIN_NO_2, SMN_ANALYSIS_1, SMN_ANALYSIS_2, SMN_ANALYSIS_3
FROM SMN_SIM_NOS
WHERE SMN_SIM_NO = ?
Argument(s): |0006417202044|
20210722: 100712     DEBUG  4521[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@299a06ac
20210722: 100712     DEBUG  4609[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getSim(SubscriberUpgradeMigradeBLO.java:10256) - NETWORK PARAMS: OPTION: ALL NETWORK ID:  NETWORKID.LENGTH: 0
20210722: 100712     DEBUG  4610[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VstServiceTypes )
20210722: 100712     DEBUG  4611[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getVstServiceTypesDAC(BaseAbstractDACFactory.java:499) - getVstServiceTypesDAC()
20210722: 100712     DEBUG  4613[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.VstServiceTypesDACImpl com.eppixcomm.eppix.base.dml.VstServiceTypesDMLFactory@136432db
20210722: 100712     DEBUG  4613[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.VstServiceTypesDACImpl
20210722: 100712     DEBUG  4614[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100712     DEBUG  4614[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.VstServiceTypesDACImpl TO MAP
20210722: 100712     DEBUG  4615[main] - com.eppixcomm.eppix.base.blo.VstServiceTypesAbstractBLO.get(VstServiceTypesAbstractBLO.java:595) - get( filter )
20210722: 100712     DEBUG  4615[main] - com.eppixcomm.eppix.base.blo.VstServiceTypesAbstractDACImpl.get(VstServiceTypesAbstractDACImpl.java:540) - get( filter )
20210722: 100712     DEBUG  4615[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
VstServiceTypes|0|equalVstServiceType|

20210722: 100712     DEBUG  4756[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: VstServiceTypes
Execute SQL Statement: SELECT VST_SERVICE_TYPE, VST_SERVICE_DESC, VST_MULTI_CHARGE, VST_SERVICE_CLASS, VST_AUTO_CONNECT, VST_ORIGINATOR, VST_TARIFF_RELATED, VST_PARAMETERISED, VST_PARAMS_LEVEL, VST_ARCHIVE_MONTHS, VST_FUTURE_ACT, VST_NODE_LEVEL
FROM VST_SERVICE_TYPES
WHERE VST_SERVICE_TYPE = ?
Argument(s): |BT|
20210722: 100712     DEBUG  4758[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4ac68d3e
20210722: 100712     DEBUG  4861[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.NgsNetGroupServ )
20210722: 100712     DEBUG  4861[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getNgsNetGroupServDAC(BaseAbstractDACFactory.java:748) - getNgsNetGroupServDAC()
20210722: 100712     DEBUG  4865[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.NgsNetGroupServDACImpl com.eppixcomm.eppix.base.dml.NgsNetGroupServAbstractDMLFactory@3d04a311
20210722: 100712     DEBUG  4865[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.NgsNetGroupServDACImpl
20210722: 100712     DEBUG  4866[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20210722: 100712     DEBUG  4867[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.NgsNetGroupServDACImpl TO MAP
20210722: 100712     DEBUG  4867[main] - com.eppixcomm.eppix.base.blo.NgsNetGroupServAbstractBLO.get(NgsNetGroupServAbstractBLO.java:601) - get( filter )
20210722: 100712     DEBUG  4867[main] - com.eppixcomm.eppix.base.blo.NgsNetGroupServAbstractDACImpl.get(NgsNetGroupServAbstractDACImpl.java:647) - get( filter )
20210722: 100712     DEBUG  4867[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
NgsNetGroupServ|0|equalNgsCode+equalNgsNetwork|

20210722: 100713     DEBUG  5048[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: NgsNetGroupServ
Execute SQL Statement: SELECT NGS_CODE, NGS_NETWORK, NGS_NET_SERV_CODE, NGS_SEQUENCE, NGS_APPLY_TEXT, NGS_MODIFY_TEXT, NGS_REMOVE_TEXT, NGS_PARAM_NAME1, NGS_PARAM_VALUE1, NGS_PARAM_NAME2, NGS_PARAM_VALUE2, NGS_PARAM_NAME3, NGS_PARAM_VALUE3, NGS_PARAM_NAME4, NGS_PARAM_VALUE4, NGS_PARAM_NAME5, NGS_PARAM_VALUE5
FROM NGS_NET_GROUP_SERV
WHERE NGS_CODE = ? AND NGS_NETWORK = ?
Argument(s): |TELEPHONYPRE|M1|
20210722: 100713     DEBUG  5049[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@532760d8
20210722: 100713     DEBUG  5147[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getSim(SubscriberUpgradeMigradeBLO.java:9536) - 
=======================================================================================
PARAM OPTION: ALL
PARAM SIM NO: 0006417202044
PARAM NETWORK ID: 
PARAM HLR: 
PARAM DEALER ID: 
PARAM CUSTOMER: 
=======================================================================================
20210722: 100713     DEBUG  5148[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SacSimAssignCus )
20210722: 100713     DEBUG  5149[main] - com.eppixcomm.eppix.base.blo.SacSimAssignCusAbstractBLO.get(SacSimAssignCusAbstractBLO.java:287) - get( filter )
20210722: 100713     DEBUG  5149[main] - com.eppixcomm.eppix.base.blo.SacSimAssignCusAbstractDACImpl.get(SacSimAssignCusAbstractDACImpl.java:205) - get( filter )
20210722: 100713     DEBUG  5150[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
SacSimAssignCus|0|equalSacSimNo|

20210722: 100713     DEBUG  5194[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SacSimAssignCus
Execute SQL Statement: SELECT SAC_BILL_AC_NO, SAC_SIM_NO 
FROM sac_sim_assign_cus
WHERE SAC_SIM_NO = ? 
Argument(s): |0006417202044|
20210722: 100713      INFO  5299[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getSim(SubscriberUpgradeMigradeBLO.java:10165) - Passed customer no  not found in Sac_Sim_assign_cus
20210722: 100713     DEBUG  5300[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SmnSimNos )
20210722: 100713     DEBUG  5301[main] - com.eppixcomm.eppix.base.blo.SmnSimNosAbstractBLO.get(SmnSimNosAbstractBLO.java:498) - get( filter )
20210722: 100713     DEBUG  5302[main] - com.eppixcomm.eppix.base.blo.SmnSimNosAbstractDACImpl.get(SmnSimNosAbstractDACImpl.java:635) - get( filter )
20210722: 100713     DEBUG  5302[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
SmnSimNos|0|equalSmnSimNo|

20210722: 100713     DEBUG  5369[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SmnSimNos
Execute SQL Statement: SELECT SMN_SIM_NO, SMN_NETWORK_ID, SMN_IMSI_NO, SMN_KI, SMN_ON_NETWORK, SMN_HLR, SMN_PUK_NO, SMN_STATUS, SMN_ACTIVE_DATE, SMN_AVAIL_DATE, SMN_EXPIRY_DATE, SMN_WAREHOUSE, SMN_PRODUCT_CODE, SMN_DEALER_ID, SMN_TRANSPORT_KEY, SMN_PIN_NO, SMN_PUK_NO_2, SMN_PIN_NO_2, SMN_ANALYSIS_1, SMN_ANALYSIS_2, SMN_ANALYSIS_3
FROM SMN_SIM_NOS
WHERE SMN_SIM_NO = ?
Argument(s): |0006417202044|
20210722: 100713     DEBUG  5369[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@64b8f8f4
20210722: 100713     DEBUG  5519[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getSim(SubscriberUpgradeMigradeBLO.java:10256) - NETWORK PARAMS: OPTION: ALL NETWORK ID:  NETWORKID.LENGTH: 0
20210722: 100713     DEBUG  5519[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VstServiceTypes )
20210722: 100713     DEBUG  5519[main] - com.eppixcomm.eppix.base.blo.VstServiceTypesAbstractBLO.get(VstServiceTypesAbstractBLO.java:595) - get( filter )
20210722: 100713     DEBUG  5520[main] - com.eppixcomm.eppix.base.blo.VstServiceTypesAbstractDACImpl.get(VstServiceTypesAbstractDACImpl.java:540) - get( filter )
20210722: 100713     DEBUG  5523[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4451) - 
======================================================================
VstServiceTypes|0|equalVstServiceType|

20210722: 100713     DEBUG  5573[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: VstServiceTypes
Execute SQL Statement: SELECT VST_SERVICE_TYPE, VST_SERVICE_DESC, VST_MULTI_CHARGE, VST_SERVICE_CLASS, VST_AUTO_CONNECT, VST_ORIGINATOR, VST_TARIFF_RELATED, VST_PARAMETERISED, VST_PARAMS_LEVEL, VST_ARCHIVE_MONTHS, VST_FUTURE_ACT, VST_NODE_LEVEL
FROM VST_SERVICE_TYPES
WHERE VST_SERVICE_TYPE = ?
Argument(s): |BT|
20210722: 100713     DEBUG  5574[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4029) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@424c0bc4
20210722: 100713      INFO  5666[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.tmpN2NLocSrvPopulate(SubscriberUpgradeMigradeBLO.java:45025) - FOUND Service type from VST for BT
20210722: 100713      INFO  5667[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.tmpN2NLocSrvPopulate(SubscriberUpgradeMigradeBLO.java:45068) - LOOP: 0: tmpRecord populated for SIM NO: 0006417202044
20210722: 100713      INFO  5667[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.deactivateSimN2N(SubscriberUpgradeMigradeBLO.java:35750) - Records 1 retrieved from tmpN2NLocSrvPopulate
20210722: 100713     DEBUG  5667[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.deactivateSimN2N(SubscriberUpgradeMigradeBLO.java:35765) - 
N2NTmpRecord [msisdnKnown=1
sim=0006417202044
location=25
eventDate=2021-06-21
servCode=BSTL
servType=BT
internTariff=QQA
msisdn=783290561
rowid=0
originator=N
nodeSent=Y
paramservNetwrkcd=]
20210722: 100713     DEBUG  5667[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.deactivateSimN2N(SubscriberUpgradeMigradeBLO.java:35786) - 
SEQNO: 0
20210722: 100713     DEBUG  5667[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.deactivateSimN2N(SubscriberUpgradeMigradeBLO.java:36402) - 
Command: null
gsmCommand: 
SIM NO: 0006417202044
subscriberId: 1003715120
20230324: 145824     DEBUG     0[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.loadproperties(TestSubscriberServices.java:244) - loading appProperties
20230324: 145824     DEBUG     8[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.loadproperties(TestSubscriberServices.java:251) - appProperties loaded : {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230324: 145824     DEBUG     8[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:264) - DB Connection start
20230324: 145824     DEBUG     8[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:267) - {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230324: 145825     DEBUG  1438[main] - com.eppixcomm.eppix.common.data.DACFactory.<init>(DACFactory.java:95) - constructor( connection, thrower )
20230324: 145825     DEBUG  1444[main] - com.eppixcomm.eppix.common.data.ConnectionContext.connect(ConnectionContext.java:100) - connect( connection )
20230324: 145825     DEBUG  1444[main] - com.eppixcomm.eppix.common.data.ConnectionContext.get(ConnectionContext.java:82) - get()
20230324: 145825     DEBUG  1445[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberActiveServices )
20230324: 145825     DEBUG  1516[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberActiveServicesDAC(BaseDACFactory.java:506) - getSubscriberActiveServicesDAC
20230324: 145825     DEBUG  1532[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl com.eppixcomm.eppix.base.dml.SubscriberActiveServicesDML@6d21714c
20230324: 145825     DEBUG  1533[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl
20230324: 145825     DEBUG  1575[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 145825     DEBUG  1576[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl TO MAP
20230324: 145825     DEBUG  1580[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230324: 145825     DEBUG  1582[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetServiceDiscountDAC(BaseDACFactory.java:426) - getGetServiceDiscountDAC()
20230324: 145825     DEBUG  1587[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl com.eppixcomm.eppix.base.dml.GetServiceDiscountDML@619a5dff
20230324: 145825     DEBUG  1588[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl
20230324: 145825     DEBUG  1593[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 145825     DEBUG  1594[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl TO MAP
20230324: 145825     DEBUG  1598[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SimAPNServices )
20230324: 145825     DEBUG  1603[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSimAPNServicesDAC(BaseDACFactory.java:467) - getSimAPNServicesDAC
20230324: 145825     DEBUG  1610[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl com.eppixcomm.eppix.base.dml.SimAPNServicesDML@6438a396
20230324: 145825     DEBUG  1610[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl
20230324: 145825     DEBUG  1611[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 145825     DEBUG  1611[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl TO MAP
20230324: 145825     DEBUG  1614[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowed )
20230324: 145825     DEBUG  1619[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetSULMaxUsageAllowedDAC(BaseDACFactory.java:532) - getGetSULMaxUsageAllowedDAC
20230324: 145825     DEBUG  1623[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl com.eppixcomm.eppix.base.dml.GetSULMaxUsageAllowedDML@7506e922
20230324: 145825     DEBUG  1625[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl
20230324: 145825     DEBUG  1627[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 145825     DEBUG  1627[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl TO MAP
20230324: 145825     DEBUG  1627[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230324: 145825     DEBUG  1639[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230324: 145825     DEBUG  1742[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberUpgradeMigradeDAC(BaseDACFactory.java:519) - getSubscriberUpgradeMigradeDAC
20230324: 145825     DEBUG  1752[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl com.eppixcomm.eppix.base.dml.SubscriberUpgradeMigradeDML@5d6f64b1
20230324: 145825     DEBUG  1752[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl
20230324: 145825     DEBUG  1755[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 145825     DEBUG  1755[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl TO MAP
20230324: 145825     DEBUG  1755[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230324: 145825     DEBUG  1756[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowed )
20230324: 145825     DEBUG  1756[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230324: 145825     DEBUG  1756[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230324: 145825     DEBUG  1756[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230324: 145825     DEBUG  1756[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:300) - DB Connection successfull
20230324: 145825     DEBUG  1766[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SbdSubDets )
20230324: 145826     DEBUG  2065[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSbdSubDetsDAC(BaseAbstractDACFactory.java:234) - getSbdSubDetsDAC()
20230324: 145826     DEBUG  2088[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl com.eppixcomm.eppix.base.dml.SbdSubDetsAbstractDMLFactory@f2a0b8e
20230324: 145826     DEBUG  2089[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl
20230324: 145826     DEBUG  2094[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 145826     DEBUG  2094[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl TO MAP
20230324: 145826     DEBUG  2095[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractBLO.get(SbdSubDetsAbstractBLO.java:531) - get( filter )
20230324: 145826     DEBUG  2095[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractDACImpl.get(SbdSubDetsAbstractDACImpl.java:556) - get( filter )
20230324: 145826     DEBUG  2106[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
SbdSubDets|0|equalSbdSubscriberId|

20230324: 145826     DEBUG  2312[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SbdSubDets
Execute SQL Statement: SELECT SBD_SUBSCRIBER_ID, SBD_DIALLING_NO, SBD_BILL_AC_NO, SBD_CONNECT_DATE, SBD_DCONNECT_DATE, SBD_TERM_DATE, SBD_TITLE, SBD_SURNAME, SBD_FIRSTNAME, SBD_GENDER, SBD_DOB, SBD_PASSWORD, SBD_LOCATION_CODE, SBD_BILL_CYCLE, SBD_PACKAGE_CODE, SBD_BILLED_UPTO, SBD_TARIFF_PLAN
FROM SBD_SUB_DETS
WHERE SBD_SUBSCRIBER_ID = ?
Argument(s): |212700|
20230324: 145826     DEBUG  2316[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3b764bce
20230324: 145826     DEBUG  2411[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSerialCustomer
20230324: 145826     DEBUG  2415[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSerialCustomer|0||

20230324: 145826     DEBUG  2650[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSerialCustomer
Execute SQL Statement: SELECT SC_SERIAL, SC_BILL_AC_NO FROM SC_SERIAL_CUSTOMER WHERE SC_BILL_AC_NO = ?
Argument(s): |A0122643|
20230324: 145826     DEBUG  2651[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4c98385c
20230324: 145826     DEBUG  2757[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getEppixHierarchyByType|0|NONE|

20230324: 145827     DEBUG  2979[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getEppixHierarchyByType
Execute SQL Statement: SELECT EH_SERIAL, EH_ENTITY_ID, EH_TYPE, EH_VALUE, EH_LINK, EH_HIER_TYPE FROM EH_EPPIX_HIERARCHY WHERE EH_ENTITY_ID = ? AND EH_HIER_TYPE = ? AND EH_TYPE = ? 
Argument(s): |120330|COMPANY|ACCOUNT|
20230324: 145827     DEBUG  3070[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getMasterEhHh
20230324: 145827     DEBUG  3077[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getMasterEhHh|0||

20230324: 145827     DEBUG  3244[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getMasterEhHh
Execute SQL Statement: SELECT eh.*, hh.* FROM eh_eppix_hierarchy eh, hh_hierarchy_head hh WHERE eh.eh_entity_id = hh.hh_serial AND hh.hh_serial = ? AND eh.eh_hier_type = ? AND eh.eh_type = ? 
Argument(s): |120330|COMPANY|COMPANY|
20230324: 145827     ERROR  3304[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getScEhHH(SubscriberUpgradeMigradeBLO.java:10558) - Serial: 120330 does not exist in table hh_hierarchy_head/eh_eppix_hierarchy
20230324: 145827     ERROR  3304[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxSulAllowed(GetSULMaxUsageAllowedBLO.java:224) - Serial: 120330 does not exist in table hh_hierarchy_head/eh_eppix_hierarchy
20230324: 145827     DEBUG  3308[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.getCustomerServiceDiscount(GetServiceDiscountBLO.java:68) - 
Subscriber ID: : 212700
newPackage: C3917
newTariff: M4M24S
20230324: 145827     DEBUG  3308[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.getCustomerServiceDiscount(GetServiceDiscountBLO.java:72) - 
Service list: SPUL
20230324: 145827     DEBUG  3313[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.Sysdirm )
20230324: 145827     DEBUG  3314[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSysdirmDAC(BaseAbstractDACFactory.java:327) - getSysdirmDAC()
20230324: 145827     DEBUG  3322[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SysdirmDACImpl com.eppixcomm.eppix.base.dml.SysdirmAbstractDMLFactory@ee7d9f1
20230324: 145827     DEBUG  3322[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SysdirmDACImpl
20230324: 145827     DEBUG  3324[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 145827     DEBUG  3324[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SysdirmDACImpl TO MAP
20230324: 145827     DEBUG  3324[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractBLO.get(SysdirmAbstractBLO.java:501) - get( filter )
20230324: 145827     DEBUG  3325[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractDACImpl.get(SysdirmAbstractDACImpl.java:435) - get( filter )
20230324: 145827     DEBUG  3325[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
Sysdirm|0|equalSystemKey|

20230324: 145827     DEBUG  3446[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: Sysdirm
Execute SQL Statement: SELECT SYSTEM_KEY, KEY_VALUE, DESCRIPTION
FROM SYSDIRM
WHERE (SYSTEM_KEY) = ?
Argument(s): |OPVATCODE|
20230324: 145827     DEBUG  3448[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@dcf3e99
20230324: 145827     DEBUG  3525[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVatPercentageByCode
20230324: 145827     DEBUG  3532[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVatPercentageByCode|0||

20230324: 145827     DEBUG  3665[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVatPercentageByCode
Execute SQL Statement: SELECT percentage FROM cevatm WHERE vat_code = ? 
Argument(s): |VST|
20230324: 145827     DEBUG  3670[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1eb44e46
20230324: 145827     DEBUG  3725[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.createTempTable(GetServiceDiscountBLO.java:327) - CREATE TEMP TABLE IF NOT EXISTS temp_qualification ( qual_val INTEGER, qual_key VARCHAR(255), qual_from INTEGER, qual_to INTEGER ) 
20230324: 145828     DEBUG  3805[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.generateQualKey(GetServiceDiscountBLO.java:365) - 
QUAL VAL: 8
20230324: 145828     DEBUG  3805[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.generateQualKey(GetServiceDiscountBLO.java:375) - 
INSERT INTO temp_qualification(qual_val, qual_key, qual_from, qual_to) values('8', 'C3917', TODAY, TODAY)
20230324: 145828     DEBUG  4002[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.generateQualKey(GetServiceDiscountBLO.java:365) - 
QUAL VAL: 64
20230324: 145828     DEBUG  4003[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.generateQualKey(GetServiceDiscountBLO.java:375) - 
INSERT INTO temp_qualification(qual_val, qual_key, qual_from, qual_to) values('64', 'SPUL', TODAY, TODAY)
20230324: 145828     DEBUG  4152[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.generateQualKey(GetServiceDiscountBLO.java:415) - 
returnQualVal: 72
returnQualKey: C3917SPUL
20230324: 145828     DEBUG  4280[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.generateQualKey(GetServiceDiscountBLO.java:365) - 
QUAL VAL: 128
20230324: 145828     DEBUG  4280[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.generateQualKey(GetServiceDiscountBLO.java:375) - 
INSERT INTO temp_qualification(qual_val, qual_key, qual_from, qual_to) values('128', 'M4M24S', TODAY, TODAY)
20230324: 145828     DEBUG  4412[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.generateQualKey(GetServiceDiscountBLO.java:415) - 
returnQualVal: 136
returnQualKey: C3917M4M24S
20230324: 145828     DEBUG  4496[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.generateQualKey(GetServiceDiscountBLO.java:415) - 
returnQualVal: 192
returnQualKey: SPULM4M24S
20230324: 145828     DEBUG  4564[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.generateQualKey(GetServiceDiscountBLO.java:415) - 
returnQualVal: 200
returnQualKey: C3917SPULM4M24S
20230324: 145828     DEBUG  4724[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.getCustomerServiceDiscount(GetServiceDiscountBLO.java:141) - 
SERVICE CODE FROM ARRAY: SPUL
20230324: 145828     DEBUG  4729[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getTsTariffService
20230324: 145828     DEBUG  4737[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getTsTariffService|0||

20230324: 145829     DEBUG  4845[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getTsTariffService
Execute SQL Statement: SELECT * FROM ts_tariff_service WHERE ts_package_code = ? AND ts_service_code = ? AND (ts_internal_tariff = ? OR ts_internal_tariff IS NULL OR ts_internal_tariff = '' OR ts_internal_tariff = ' ')
Argument(s): |C3917|SPUL|M4M24S|
20230324: 145829     DEBUG  4854[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7637f22
20230324: 145829     DEBUG  4897[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VsrService )
20230324: 145829     DEBUG  4898[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getVsrServiceDAC(BaseAbstractDACFactory.java:486) - getVsrServiceDAC()
20230324: 145829     DEBUG  4908[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.VsrServiceDACImpl com.eppixcomm.eppix.base.dml.VsrServiceDMLFactory@41a4555e
20230324: 145829     DEBUG  4909[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.VsrServiceDACImpl
20230324: 145829     DEBUG  4912[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 145829     DEBUG  4913[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.VsrServiceDACImpl TO MAP
20230324: 145829     DEBUG  4913[main] - com.eppixcomm.eppix.base.blo.VsrServiceAbstractBLO.get(VsrServiceAbstractBLO.java:576) - get( filter )
20230324: 145829     DEBUG  4914[main] - com.eppixcomm.eppix.base.blo.VsrServiceAbstractDACImpl.get(VsrServiceAbstractDACImpl.java:517) - get( filter )
20230324: 145829     DEBUG  4914[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VsrService|0|equalVsrServiceCode|

20230324: 145829     DEBUG  5004[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: VsrService
Execute SQL Statement: SELECT VSR_SERVICE_CODE, VSR_SERVICE_TYPE, VSR_SERVICE_DESC, VSR_ORIGINATOR, VSR_SERVICE_CLASS, VSR_TEMP_DEACT, VSR_PRORATA, VSR_PROVIDER_ID, VSR_SHORT_DESC, VSR_SUSPEND
FROM VSR_SERVICE
WHERE VSR_SERVICE_CODE = ?
Argument(s): |SPUL|
20230324: 145829     DEBUG  5005[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6f75e721
20230324: 145829     DEBUG  5054[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.getServiceDiscount(GetServiceDiscountBLO.java:707) - 
Integer subscriberId: 212700
Integer legalEntityId: null
String newPackage: C3917
String newTariff: M4M24S
String serviceCode: SPUL
String entryPoint: N
20230324: 145829     DEBUG  5061[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SksKeySetting )
20230324: 145829     DEBUG  5062[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSksKeySettingDAC(BaseAbstractDACFactory.java:314) - getSksKeySettingDAC()
20230324: 145829     DEBUG  5074[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl com.eppixcomm.eppix.base.dml.SksKeySettingAbstractDMLFactory@3fb4f649
20230324: 145829     DEBUG  5075[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl
20230324: 145829     DEBUG  5078[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 145829     DEBUG  5078[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl TO MAP
20230324: 145829     DEBUG  5079[main] - com.eppixcomm.eppix.base.blo.SksKeySettingAbstractBLO.get(SksKeySettingAbstractBLO.java:500) - get( filter )
20230324: 145829     DEBUG  5079[main] - com.eppixcomm.eppix.base.blo.SksKeySettingAbstractDACImpl.get(SksKeySettingAbstractDACImpl.java:420) - get( filter )
20230324: 145829     DEBUG  5079[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
SksKeySetting|0|equalSksKeyCode|

20230324: 145829     DEBUG  5193[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SksKeySetting
Execute SQL Statement: SELECT SKS_KEY_CODE, SKS_VALUE, SKS_COMMENT, SKS_TIMESTAMP
FROM SKS_KEY_SETTING
WHERE (SKS_KEY_CODE) = ?
Argument(s): |LEDISCUSE|
20230324: 145829     DEBUG  5195[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1e81f4dc
20230324: 145829     DEBUG  5240[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: percDiscount1
20230324: 145829     DEBUG  5240[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
percDiscount1|0||

20230324: 145829     DEBUG  5388[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: percDiscount1
Execute SQL Statement: SELECT NVL(SUM((dib_disc_value * chg_value) / 100), 0) FROM diq_discount_qual, dip_discount_plan, dir_discount_rule, dib_discount_band, dqk_disc_qual_key, dgd_disc_grp_det, opservm, chg_charges c1, ts_tariff_service, cd_class_def, temp_qualification WHERE dip_discount_id = diq_discount_id AND dir_rule_id = dip_rule_ref AND dib_rule_id = dir_rule_id AND dqk_qual_id = diq_qual_id AND dgd_group_id = dir_app_disc_id AND diq_end_date >= ? AND ts_package_code = ? AND product = dir_charge_ref AND dir_rule_type = 'C' AND dir_band_type = 'N' AND dib_disc_type = 'P' AND (ts_internal_tariff = ? OR ts_internal_tariff IS NULL OR ts_internal_tariff = '') AND ts_service_code = ? AND LENGTH(ts_sub_charge1) > 0 AND c1.chg_code = ts_sub_charge1 AND c1.chg_effective_date = (SELECT MAX(c2.chg_effective_date) FROM chg_charges c2 WHERE c2.chg_code = c1.chg_code AND c2.chg_code = ts_sub_charge1) AND c1.chg_class_id = dgd_class_id AND dqk_key = qual_key AND qual_val = dqk_key_val AND dqk_from <= qual_from AND qual_to <= dqk_to AND cd_class_id = c1.chg_class_id  AND c1.chg_value > 0
Argument(s): |2023-03-24|C3917|M4M24S|SPUL|
20230324: 145829     DEBUG  5388[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5ccd43c2
20230324: 145829     DEBUG  5443[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: percDiscount2
20230324: 145829     DEBUG  5443[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
percDiscount2|0||

20230324: 145829     DEBUG  5507[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: percDiscount2
Execute SQL Statement: SELECT NVL(SUM((dib_disc_value * chg_value) / 100), 0) FROM diq_discount_qual, dip_discount_plan, dir_discount_rule, dib_discount_band, dqk_disc_qual_key, dgd_disc_grp_det, opservm, chg_charges c1, ts_tariff_service, cd_class_def, temp_qualification WHERE dip_discount_id = diq_discount_id AND dir_rule_id = dip_rule_ref AND dib_rule_id = dir_rule_id AND dqk_qual_id = diq_qual_id AND dgd_group_id = dir_app_disc_id AND diq_end_date >= ? AND ts_package_code = ? AND product = dir_charge_ref AND dir_rule_type = 'C' AND dir_band_type = 'N' AND dib_disc_type = 'P' AND (ts_internal_tariff = ? OR ts_internal_tariff IS NULL OR ts_internal_tariff = '') AND ts_service_code = ? AND LENGTH(ts_sub_charge2) > 0 AND c1.chg_code = ts_sub_charge2 AND c1.chg_effective_date = (SELECT MAX(c2.chg_effective_date) FROM chg_charges c2 WHERE c2.chg_code = c1.chg_code AND c2.chg_code = ts_sub_charge2) AND c1.chg_class_id = dgd_class_id AND dqk_key = qual_key AND qual_val = dqk_key_val AND dqk_from <= qual_from AND qual_to <= dqk_to AND cd_class_id = c1.chg_class_id  AND c1.chg_value > 0
Argument(s): |2023-03-24|C3917|M4M24S|SPUL|
20230324: 145829     DEBUG  5508[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@512ddf17
20230324: 145829     DEBUG  5544[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: percDiscount3
20230324: 145829     DEBUG  5545[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
percDiscount3|0||

20230324: 145829     DEBUG  5617[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: percDiscount3
Execute SQL Statement: SELECT NVL(SUM((dib_disc_value * chg_value) / 100), 0) FROM diq_discount_qual, dip_discount_plan, dir_discount_rule, dib_discount_band, dqk_disc_qual_key, dgd_disc_grp_det, opservm, chg_charges c1, ts_tariff_service, cd_class_def, temp_qualification WHERE dip_discount_id = diq_discount_id AND dir_rule_id = dip_rule_ref AND dib_rule_id = dir_rule_id AND dqk_qual_id = diq_qual_id AND dgd_group_id = dir_app_disc_id AND diq_end_date >= ? AND ts_package_code = ? AND product = dir_charge_ref AND dir_rule_type = 'C' AND dir_band_type = 'N' AND dib_disc_type = 'P' AND (ts_internal_tariff = ? OR ts_internal_tariff IS NULL OR ts_internal_tariff = '') AND ts_service_code = ? AND LENGTH(ts_sub_charge3) > 0 AND c1.chg_code = ts_sub_charge3 AND c1.chg_effective_date = (SELECT MAX(c2.chg_effective_date) FROM chg_charges c2 WHERE c2.chg_code = c1.chg_code AND c2.chg_code = ts_sub_charge3) AND c1.chg_class_id = dgd_class_id AND dqk_key = qual_key AND qual_val = dqk_key_val AND dqk_from <= qual_from AND qual_to <= dqk_to AND cd_class_id = c1.chg_class_id  AND c1.chg_value > 0
Argument(s): |2023-03-24|C3917|M4M24S|SPUL|
20230324: 145829     DEBUG  5618[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3b192d32
20230324: 145829     DEBUG  5650[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.getServiceDiscount(GetServiceDiscountBLO.java:821) - 
percDisc1: 0.0
percDisc2: 0.0
percDisc3: 0.0
20230324: 145829     DEBUG  5650[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.getServiceDiscount(GetServiceDiscountBLO.java:827) - 
END DATE: 2023-03-24 00:00:00
20230324: 145829     DEBUG  5650[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: fixedDiscount1
20230324: 145829     DEBUG  5650[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
fixedDiscount1|0||

20230324: 145829     DEBUG  5714[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: fixedDiscount1
Execute SQL Statement: SELECT NVL(SUM(dib_disc_value), 0) FROM diq_discount_qual, dip_discount_plan, dir_discount_rule, dib_discount_band, dqk_disc_qual_key, dgd_disc_grp_det, opservm, chg_charges c1, ts_tariff_service, cd_class_def, temp_qualification WHERE dip_discount_id = diq_discount_id AND dir_rule_id = dip_rule_ref AND dib_rule_id = dir_rule_id AND dqk_qual_id = diq_qual_id AND dgd_group_id = dir_app_disc_id AND diq_end_date >= ? AND ts_package_code = ? AND product = dir_charge_ref AND dir_rule_type = 'C' AND dir_band_type = 'N' AND dib_disc_type = 'F' AND (ts_internal_tariff = ? OR ts_internal_tariff IS NULL OR ts_internal_tariff = '') AND ts_service_code = ? AND LENGTH(ts_sub_charge1) > 0 AND c1.chg_code = ts_sub_charge1 AND c1.chg_effective_date = (SELECT MAX(c2.chg_effective_date) FROM chg_charges c2 WHERE c2.chg_code = c1.chg_code AND c2.chg_code = ts_sub_charge1) AND c1.chg_class_id = dgd_class_id AND cd_class_id = c1.chg_class_id  AND dqk_key = qual_key AND qual_val = dqk_key_val AND dqk_from <= qual_from AND qual_to <= dqk_to AND cd_class_id = c1.chg_class_id  AND c1.chg_value > 0
Argument(s): |2023-03-24 00:00:00|C3917|M4M24S|SPUL|
20230324: 145829     DEBUG  5714[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@11028347
20230324: 145829     DEBUG  5763[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: fixedDiscount2
20230324: 145829     DEBUG  5764[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
fixedDiscount2|0||

20230324: 145830     DEBUG  5845[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: fixedDiscount2
Execute SQL Statement: SELECT NVL(SUM(dib_disc_value), 0) FROM diq_discount_qual, dip_discount_plan, dir_discount_rule, dib_discount_band, dqk_disc_qual_key, dgd_disc_grp_det, opservm, chg_charges c1, ts_tariff_service, cd_class_def, temp_qualification WHERE dip_discount_id = diq_discount_id AND dir_rule_id = dip_rule_ref AND dib_rule_id = dir_rule_id AND dqk_qual_id = diq_qual_id AND dgd_group_id = dir_app_disc_id AND diq_end_date >= ? AND ts_package_code = ? AND product = dir_charge_ref AND dir_rule_type = 'C' AND dir_band_type = 'N' AND dib_disc_type = 'F' AND (ts_internal_tariff = ? OR ts_internal_tariff IS NULL OR ts_internal_tariff = '') AND ts_service_code = ? AND LENGTH(ts_sub_charge2) > 0 AND c1.chg_code = ts_sub_charge2 AND c1.chg_effective_date = (SELECT MAX(c2.chg_effective_date)  FROM chg_charges c2 WHERE c2.chg_code = c1.chg_code AND c2.chg_code = ts_sub_charge2) AND cd_class_id = c1.chg_class_id  AND c1.chg_class_id = dgd_class_id AND dqk_key = qual_key AND qual_val = dqk_key_val AND dqk_from <= qual_from AND qual_to <= dqk_to AND cd_class_id = c1.chg_class_id  AND c1.chg_value > 0
Argument(s): |2023-03-24 00:00:00|C3917|M4M24S|SPUL|
20230324: 145830     DEBUG  5845[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@77468bd9
20230324: 145830     DEBUG  5890[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: fixedDiscount3
20230324: 145830     DEBUG  5891[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
fixedDiscount3|0||

20230324: 145830     DEBUG  5952[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: fixedDiscount3
Execute SQL Statement: SELECT NVL(SUM(dib_disc_value), 0) FROM diq_discount_qual, dip_discount_plan, dir_discount_rule, dib_discount_band, dqk_disc_qual_key, dgd_disc_grp_det, opservm, chg_charges c1, ts_tariff_service, cd_class_def, temp_qualification WHERE dip_discount_id = diq_discount_id AND dir_rule_id = dip_rule_ref AND dib_rule_id = dir_rule_id AND dqk_qual_id = diq_qual_id AND dgd_group_id = dir_app_disc_id AND diq_end_date >= ? AND ts_package_code = ? AND product = dir_charge_ref AND dir_rule_type = 'C' AND dir_band_type = 'N' AND dib_disc_type = 'F' AND (ts_internal_tariff = ? OR ts_internal_tariff IS NULL OR ts_internal_tariff = '') AND ts_service_code = ? AND LENGTH(ts_sub_charge3) > 0 AND c1.chg_code = ts_sub_charge3 AND c1.chg_effective_date = (SELECT MAX(c2.chg_effective_date) FROM chg_charges c2 WHERE c2.chg_code = c1.chg_code AND c2.chg_code = ts_sub_charge3) AND c1.chg_class_id = dgd_class_id AND dqk_key = qual_key AND qual_val = dqk_key_val AND dqk_from <= qual_from AND qual_to <= dqk_to AND cd_class_id = c1.chg_class_id  AND c1.chg_value > 0
Argument(s): |2023-03-24 00:00:00|C3917|M4M24S|SPUL|
20230324: 145830     DEBUG  5952[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@71bc1ae4
20230324: 145830     DEBUG  5997[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.getServiceDiscount(GetServiceDiscountBLO.java:853) - 
fixedDisc1: 0.0
fixedDisc2: 0.0
fixedDisc3: 0.0
20230324: 145830     DEBUG  5998[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.getCustomerServiceDiscount(GetServiceDiscountBLO.java:269) - 
totalSubscribtion: 0.00
20230324: 145830     DEBUG  5998[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.getCustomerServiceDiscount(GetServiceDiscountBLO.java:271) - 
totalDiscount: 0.00
20230324: 145830     DEBUG  5998[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.getCustomerServiceDiscount(GetServiceDiscountBLO.java:273) - 
ServiceCharges [
serviceCode=SPUL
serviceDesc=Maximum Bill Limit
subCharge1=0.00
subCharge2=0.00
subCharge3=0.00
serviceDiscount=0.00]
20230324: 145830     DEBUG  5998[main] - com.eppixcomm.eppix.base.blo.GetServiceDiscountBLO.dropTempTable(GetServiceDiscountBLO.java:347) - DROP TABLE IF EXISTS temp_qualification
20230324: 145830     DEBUG  6047[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSulByAccount
20230324: 145830     DEBUG  6048[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSulByAccount|0||

20230324: 145830     DEBUG  6384[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SUL' AND sbd_bill_ac_no = ? 
Argument(s): |A0122643|
20230324: 145830     DEBUG  6385[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7b3300e5
20230324: 145830     DEBUG  6434[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getCrbUnbillCharges
20230324: 145830     DEBUG  6435[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getCrbUnbillCharges|0||

20230324: 145830     DEBUG  6537[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getCrbUnbillCharges
Execute SQL Statement: SELECT NVL((crb_unbill_charges + crb_unbill_calls), 0) FROM crb_cust_risk_bal WHERE crb_bill_ac_no = ? 
Argument(s): |A0122643|
20230324: 145830     DEBUG  6538[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3caeaf62
20230324: 145830     DEBUG  6626[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getAccountCreditLimit
20230324: 145830     DEBUG  6627[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getAccountCreditLimit|0||

20230324: 145830     DEBUG  6756[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getAccountCreditLimit
Execute SQL Statement: SELECT credit_limit FROM slcustm WHERE customer = ? 
Argument(s): |A0122643|
20230324: 145830     DEBUG  6757[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@67f89fa3
20230324: 145831     DEBUG  6798[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSubscriberVasServices|0|NONE|

20230324: 145831     DEBUG  6923[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getSubscriberVasServices
Execute SQL Statement: SELECT vas_service_code FROM vas_active_service WHERE vas_subscriber_id = ? AND vas_service_code NOT IN (SELECT tt_type FROM tt_type_text WHERE tt_group = 'IDACCSRVEX');
Argument(s): |212700|
20230324: 145831     DEBUG  6979[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BlhBillLimitHd )
20230324: 145831     DEBUG  6985[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getBlhBillLimitHdDAC(BaseAbstractDACFactory.java:930) - getBlhBillLimitHdDAC()
20230324: 145831     DEBUG  7010[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl com.eppixcomm.eppix.base.dml.BlhBillLimitHdDMLFactory@7a46a697
20230324: 145831     DEBUG  7012[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl
20230324: 145831     DEBUG  7019[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 145831     DEBUG  7020[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl TO MAP
20230324: 145831     DEBUG  7020[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractBLO.get(BlhBillLimitHdAbstractBLO.java:264) - get( filter )
20230324: 145831     DEBUG  7021[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractDACImpl.get(BlhBillLimitHdAbstractDACImpl.java:98) - get( filter )
20230324: 145831     DEBUG  7023[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BlhBillLimitHd|0|equalBlhSubscriberId+equalBlhServiceCode|

20230324: 145831     DEBUG  7105[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BlhBillLimitHd
Execute SQL Statement: SELECT BLH_SUBSCRIBER_ID, BLH_SERVICE_CODE, BLH_BILL_LIMIT_VAL, BLH_LEVEL,BLH_TYPE, BLH_VAT_IND, BLH_UNBILL_USAGE, BLH_UNBILL_CHARGES, BLH_DIFF,BLH_USER_STATUS, BLH_NEXT_THRESHOLD, BLH_PREV_THRESHOLD, BLH_NEXT_ACN_ID,BLH_PREV_ACN_ID, BLH_NETWORK_ACN, BLH_TRIG_FLAG, BLH_LAST_UPDATE
FROM BLH_BILL_LIMIT_HD
WHERE BLH_SUBSCRIBER_ID = ? AND BLH_SERVICE_CODE = ?
Argument(s): |212700|SPUL|
20230324: 145831     ERROR  7143[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5888) - Failed to get Bill Limits for subscriber: 212700 and service code: SPUL
20230324: 145831     ERROR  7143[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5904) - Exception getting Bill Limits for subscriber: 212700 and service code: SPUL EXCEPTION: com.eppixcomm.eppix.base.error.EPPIXSeriousException: Failed to get Bill Limits for subscriber: 212700 and service code: SPUL
20230324: 150341     DEBUG     0[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.loadproperties(TestSubscriberServices.java:273) - loading appProperties
20230324: 150341     DEBUG     7[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.loadproperties(TestSubscriberServices.java:280) - appProperties loaded : {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230324: 150341     DEBUG     7[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:293) - DB Connection start
20230324: 150341     DEBUG     7[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:296) - {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230324: 150342     DEBUG   695[main] - com.eppixcomm.eppix.common.data.DACFactory.<init>(DACFactory.java:95) - constructor( connection, thrower )
20230324: 150342     DEBUG   699[main] - com.eppixcomm.eppix.common.data.ConnectionContext.connect(ConnectionContext.java:100) - connect( connection )
20230324: 150342     DEBUG   699[main] - com.eppixcomm.eppix.common.data.ConnectionContext.get(ConnectionContext.java:82) - get()
20230324: 150342     DEBUG   700[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberActiveServices )
20230324: 150342     DEBUG   735[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberActiveServicesDAC(BaseDACFactory.java:506) - getSubscriberActiveServicesDAC
20230324: 150342     DEBUG   742[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl com.eppixcomm.eppix.base.dml.SubscriberActiveServicesDML@6d21714c
20230324: 150342     DEBUG   743[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl
20230324: 150342     DEBUG   766[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 150342     DEBUG   767[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl TO MAP
20230324: 150342     DEBUG   769[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230324: 150342     DEBUG   771[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetServiceDiscountDAC(BaseDACFactory.java:426) - getGetServiceDiscountDAC()
20230324: 150342     DEBUG   774[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl com.eppixcomm.eppix.base.dml.GetServiceDiscountDML@619a5dff
20230324: 150342     DEBUG   774[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl
20230324: 150342     DEBUG   775[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 150342     DEBUG   775[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl TO MAP
20230324: 150342     DEBUG   777[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SimAPNServices )
20230324: 150342     DEBUG   779[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSimAPNServicesDAC(BaseDACFactory.java:467) - getSimAPNServicesDAC
20230324: 150342     DEBUG   781[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl com.eppixcomm.eppix.base.dml.SimAPNServicesDML@6438a396
20230324: 150342     DEBUG   782[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl
20230324: 150342     DEBUG   782[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 150342     DEBUG   782[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl TO MAP
20230324: 150342     DEBUG   783[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowed )
20230324: 150342     DEBUG   785[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetSULMaxUsageAllowedDAC(BaseDACFactory.java:532) - getGetSULMaxUsageAllowedDAC
20230324: 150342     DEBUG   791[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl com.eppixcomm.eppix.base.dml.GetSULMaxUsageAllowedDML@7506e922
20230324: 150342     DEBUG   792[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl
20230324: 150342     DEBUG   792[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 150342     DEBUG   793[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl TO MAP
20230324: 150342     DEBUG   793[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230324: 150342     DEBUG   801[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230324: 150342     DEBUG   877[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberUpgradeMigradeDAC(BaseDACFactory.java:519) - getSubscriberUpgradeMigradeDAC
20230324: 150342     DEBUG   882[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl com.eppixcomm.eppix.base.dml.SubscriberUpgradeMigradeDML@5d6f64b1
20230324: 150342     DEBUG   883[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl
20230324: 150342     DEBUG   885[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 150342     DEBUG   885[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl TO MAP
20230324: 150342     DEBUG   885[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230324: 150342     DEBUG   885[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowed )
20230324: 150342     DEBUG   885[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230324: 150342     DEBUG   886[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230324: 150342     DEBUG   886[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230324: 150342     DEBUG   886[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:329) - DB Connection successfull
20230324: 150342     DEBUG   889[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SbdSubDets )
20230324: 150342     DEBUG   998[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSbdSubDetsDAC(BaseAbstractDACFactory.java:234) - getSbdSubDetsDAC()
20230324: 150342     DEBUG  1006[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl com.eppixcomm.eppix.base.dml.SbdSubDetsAbstractDMLFactory@f2a0b8e
20230324: 150342     DEBUG  1007[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl
20230324: 150342     DEBUG  1008[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 150342     DEBUG  1008[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl TO MAP
20230324: 150342     DEBUG  1008[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractBLO.get(SbdSubDetsAbstractBLO.java:531) - get( filter )
20230324: 150342     DEBUG  1008[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractDACImpl.get(SbdSubDetsAbstractDACImpl.java:556) - get( filter )
20230324: 150342     DEBUG  1011[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
SbdSubDets|0|equalSbdSubscriberId|

20230324: 150342     DEBUG  1196[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SbdSubDets
Execute SQL Statement: SELECT SBD_SUBSCRIBER_ID, SBD_DIALLING_NO, SBD_BILL_AC_NO, SBD_CONNECT_DATE, SBD_DCONNECT_DATE, SBD_TERM_DATE, SBD_TITLE, SBD_SURNAME, SBD_FIRSTNAME, SBD_GENDER, SBD_DOB, SBD_PASSWORD, SBD_LOCATION_CODE, SBD_BILL_CYCLE, SBD_PACKAGE_CODE, SBD_BILLED_UPTO, SBD_TARIFF_PLAN
FROM SBD_SUB_DETS
WHERE SBD_SUBSCRIBER_ID = ?
Argument(s): |832280038|
20230324: 152059     DEBUG     0[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.loadproperties(TestSubscriberServices.java:273) - loading appProperties
20230324: 152059     DEBUG     6[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.loadproperties(TestSubscriberServices.java:280) - appProperties loaded : {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230324: 152059     DEBUG     7[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:293) - DB Connection start
20230324: 152059     DEBUG     7[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:296) - {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230324: 152100     DEBUG  1240[main] - com.eppixcomm.eppix.common.data.DACFactory.<init>(DACFactory.java:95) - constructor( connection, thrower )
20230324: 152100     DEBUG  1244[main] - com.eppixcomm.eppix.common.data.ConnectionContext.connect(ConnectionContext.java:100) - connect( connection )
20230324: 152100     DEBUG  1245[main] - com.eppixcomm.eppix.common.data.ConnectionContext.get(ConnectionContext.java:82) - get()
20230324: 152100     DEBUG  1246[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberActiveServices )
20230324: 152100     DEBUG  1286[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberActiveServicesDAC(BaseDACFactory.java:506) - getSubscriberActiveServicesDAC
20230324: 152100     DEBUG  1292[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl com.eppixcomm.eppix.base.dml.SubscriberActiveServicesDML@6d21714c
20230324: 152100     DEBUG  1292[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl
20230324: 152100     DEBUG  1312[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 152100     DEBUG  1312[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl TO MAP
20230324: 152100     DEBUG  1314[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230324: 152100     DEBUG  1315[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetServiceDiscountDAC(BaseDACFactory.java:426) - getGetServiceDiscountDAC()
20230324: 152100     DEBUG  1317[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl com.eppixcomm.eppix.base.dml.GetServiceDiscountDML@619a5dff
20230324: 152100     DEBUG  1317[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl
20230324: 152100     DEBUG  1318[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 152100     DEBUG  1318[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl TO MAP
20230324: 152100     DEBUG  1320[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SimAPNServices )
20230324: 152100     DEBUG  1322[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSimAPNServicesDAC(BaseDACFactory.java:467) - getSimAPNServicesDAC
20230324: 152100     DEBUG  1326[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl com.eppixcomm.eppix.base.dml.SimAPNServicesDML@6438a396
20230324: 152100     DEBUG  1326[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl
20230324: 152100     DEBUG  1326[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 152100     DEBUG  1326[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl TO MAP
20230324: 152100     DEBUG  1327[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowed )
20230324: 152100     DEBUG  1330[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetSULMaxUsageAllowedDAC(BaseDACFactory.java:532) - getGetSULMaxUsageAllowedDAC
20230324: 152100     DEBUG  1332[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl com.eppixcomm.eppix.base.dml.GetSULMaxUsageAllowedDML@7506e922
20230324: 152100     DEBUG  1332[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl
20230324: 152100     DEBUG  1332[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 152100     DEBUG  1333[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl TO MAP
20230324: 152100     DEBUG  1333[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230324: 152100     DEBUG  1340[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230324: 152100     DEBUG  1414[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberUpgradeMigradeDAC(BaseDACFactory.java:519) - getSubscriberUpgradeMigradeDAC
20230324: 152100     DEBUG  1420[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl com.eppixcomm.eppix.base.dml.SubscriberUpgradeMigradeDML@5d6f64b1
20230324: 152100     DEBUG  1420[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl
20230324: 152100     DEBUG  1422[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 152100     DEBUG  1422[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl TO MAP
20230324: 152100     DEBUG  1422[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230324: 152100     DEBUG  1422[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowed )
20230324: 152100     DEBUG  1422[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230324: 152100     DEBUG  1423[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230324: 152100     DEBUG  1423[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230324: 152100     DEBUG  1423[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:329) - DB Connection successfull
20230324: 152100     DEBUG  1425[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SbdSubDets )
20230324: 152100     DEBUG  1527[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSbdSubDetsDAC(BaseAbstractDACFactory.java:234) - getSbdSubDetsDAC()
20230324: 152100     DEBUG  1538[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl com.eppixcomm.eppix.base.dml.SbdSubDetsAbstractDMLFactory@f2a0b8e
20230324: 152100     DEBUG  1538[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl
20230324: 152100     DEBUG  1539[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 152100     DEBUG  1539[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl TO MAP
20230324: 152100     DEBUG  1539[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractBLO.get(SbdSubDetsAbstractBLO.java:531) - get( filter )
20230324: 152100     DEBUG  1540[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractDACImpl.get(SbdSubDetsAbstractDACImpl.java:556) - get( filter )
20230324: 152100     DEBUG  1545[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
SbdSubDets|0|equalSbdSubscriberId|

20230324: 152101     DEBUG  1720[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SbdSubDets
Execute SQL Statement: SELECT SBD_SUBSCRIBER_ID, SBD_DIALLING_NO, SBD_BILL_AC_NO, SBD_CONNECT_DATE, SBD_DCONNECT_DATE, SBD_TERM_DATE, SBD_TITLE, SBD_SURNAME, SBD_FIRSTNAME, SBD_GENDER, SBD_DOB, SBD_PASSWORD, SBD_LOCATION_CODE, SBD_BILL_CYCLE, SBD_PACKAGE_CODE, SBD_BILLED_UPTO, SBD_TARIFF_PLAN
FROM SBD_SUB_DETS
WHERE SBD_SUBSCRIBER_ID = ?
Argument(s): |31590|
20230324: 152101     DEBUG  1730[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3b764bce
20230324: 152101     DEBUG  1834[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSulByAccount
20230324: 152101     DEBUG  1837[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSulByAccount|0||

20230324: 152101     DEBUG  2072[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SUL' AND sbd_bill_ac_no = ? 
Argument(s): |A3169077|
20230324: 152101     DEBUG  2081[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6bf2d08e
20230324: 152101     DEBUG  2220[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getCrbUnbillCharges
20230324: 152101     DEBUG  2221[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getCrbUnbillCharges|0||

20230324: 152101     DEBUG  2373[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getCrbUnbillCharges
Execute SQL Statement: SELECT NVL((crb_unbill_charges + crb_unbill_calls), 0) FROM crb_cust_risk_bal WHERE crb_bill_ac_no = ? 
Argument(s): |A3169077|
20230324: 152101     DEBUG  2375[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7e774085
20230324: 152101     DEBUG  2432[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getAccountCreditLimit
20230324: 152101     DEBUG  2433[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getAccountCreditLimit|0||

20230324: 152101     DEBUG  2552[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getAccountCreditLimit
Execute SQL Statement: SELECT credit_limit FROM slcustm WHERE customer = ? 
Argument(s): |A3169077|
20230324: 152101     DEBUG  2554[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1b701da1
20230324: 152101     DEBUG  2633[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSubscriberVasServices|0|NONE|

20230324: 152102     DEBUG  2784[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getSubscriberVasServices
Execute SQL Statement: SELECT vas_service_code FROM vas_active_service WHERE vas_subscriber_id = ? AND vas_service_code NOT IN (SELECT tt_type FROM tt_type_text WHERE tt_group = 'IDACCSRVEX');
Argument(s): |31590|
20230324: 152102     DEBUG  2788[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@15615099
20230324: 152102     DEBUG  2795[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 152102     DEBUG  2797[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getTtTypeTextDAC(BaseAbstractDACFactory.java:144) - getTtTypeTextDAC()
20230324: 152102     DEBUG  2813[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.TtTypeTextDACImpl com.eppixcomm.eppix.base.dml.TtTypeTextAbstractDMLFactory@1963006a
20230324: 152102     DEBUG  2814[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.TtTypeTextDACImpl
20230324: 152102     DEBUG  2820[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 152102     DEBUG  2821[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.TtTypeTextDACImpl TO MAP
20230324: 152102     DEBUG  2822[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 152102     DEBUG  2823[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 152102     DEBUG  2823[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 152102     DEBUG  2911[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|BB03|
20230324: 152102     ERROR  2959[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1234) - Failed to get TT for group: ADHC_BUNDL and type: BB03
20230324: 152102     DEBUG  2960[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 152102     DEBUG  2961[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 152102     DEBUG  3071[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |BB03|31590|
20230324: 152102     DEBUG  3072[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5e91993f
20230324: 152102     DEBUG  3121[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@379619aa
20230324: 152102     DEBUG  3122[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 152102     DEBUG  3123[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 152102     DEBUG  3123[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 152102     DEBUG  3124[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 152102     DEBUG  3160[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|BSTL|
20230324: 152102     ERROR  3218[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1234) - Failed to get TT for group: ADHC_BUNDL and type: BSTL
20230324: 152102     DEBUG  3219[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 152102     DEBUG  3220[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 152102     DEBUG  3277[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |BSTL|31590|
20230324: 152102     DEBUG  3277[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4361bd48
20230324: 152102     DEBUG  3345[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2401f4c3
20230324: 152102     DEBUG  3346[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 152102     DEBUG  3346[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 152102     DEBUG  3347[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 152102     DEBUG  3347[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 152102     DEBUG  3372[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|CSCP|
20230324: 152102     ERROR  3425[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1234) - Failed to get TT for group: ADHC_BUNDL and type: CSCP
20230324: 152102     DEBUG  3426[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 152102     DEBUG  3426[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 152102     DEBUG  3463[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |CSCP|31590|
20230324: 152102     DEBUG  3464[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7d6f77cc
20230324: 152102     DEBUG  3513[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@73a28541
20230324: 152102     DEBUG  3514[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 152102     DEBUG  3514[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 152102     DEBUG  3514[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 152102     DEBUG  3514[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 152102     DEBUG  3541[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|CSCR|
20230324: 152102     ERROR  3611[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1234) - Failed to get TT for group: ADHC_BUNDL and type: CSCR
20230324: 152102     DEBUG  3611[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 152102     DEBUG  3611[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 152102     DEBUG  3637[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |CSCR|31590|
20230324: 152102     DEBUG  3638[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@244038d0
20230324: 152103     DEBUG  3694[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5fdef03a
20230324: 152103     DEBUG  3694[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 152103     DEBUG  3694[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 152103     DEBUG  3694[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 152103     DEBUG  3694[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 152103     DEBUG  3725[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|ITBL|
20230324: 152103     ERROR  3777[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1234) - Failed to get TT for group: ADHC_BUNDL and type: ITBL
20230324: 152103     DEBUG  3778[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 152103     DEBUG  3778[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 152103     DEBUG  3804[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |ITBL|31590|
20230324: 152103     DEBUG  3806[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5c8da962
20230324: 152103     DEBUG  3850[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2c13da15
20230324: 152103     DEBUG  3851[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 152103     DEBUG  3852[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 152103     DEBUG  3864[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 152103     DEBUG  3864[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 152103     DEBUG  3904[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|SPUL|
20230324: 152103     ERROR  3967[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1234) - Failed to get TT for group: ADHC_BUNDL and type: SPUL
20230324: 152103     DEBUG  3968[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 152103     DEBUG  3969[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 152103     DEBUG  3996[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |SPUL|31590|
20230324: 152103     DEBUG  3997[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@11028347
20230324: 152103     DEBUG  4050[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2aae9190
20230324: 152103     DEBUG  4094[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 152103     DEBUG  4094[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 152103     DEBUG  4095[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 152103     DEBUG  4096[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 152103     DEBUG  4128[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|SUL |
20230324: 152103     ERROR  4186[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1234) - Failed to get TT for group: ADHC_BUNDL and type: SUL 
20230324: 152103     DEBUG  4187[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 152103     DEBUG  4188[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 152103     DEBUG  4206[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |SUL |31590|
20230324: 152103     DEBUG  4207[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@e73f9ac
20230324: 152103     DEBUG  4285[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BlhBillLimitHd )
20230324: 152103     DEBUG  4292[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getBlhBillLimitHdDAC(BaseAbstractDACFactory.java:930) - getBlhBillLimitHdDAC()
20230324: 152103     DEBUG  4314[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl com.eppixcomm.eppix.base.dml.BlhBillLimitHdDMLFactory@383534aa
20230324: 152103     DEBUG  4315[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl
20230324: 152103     DEBUG  4319[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 152103     DEBUG  4320[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl TO MAP
20230324: 152103     DEBUG  4320[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractBLO.get(BlhBillLimitHdAbstractBLO.java:264) - get( filter )
20230324: 152103     DEBUG  4322[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractDACImpl.get(BlhBillLimitHdAbstractDACImpl.java:98) - get( filter )
20230324: 152103     DEBUG  4323[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BlhBillLimitHd|0|equalBlhSubscriberId+equalBlhServiceCode|

20230324: 152103     DEBUG  4446[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BlhBillLimitHd
Execute SQL Statement: SELECT BLH_SUBSCRIBER_ID, BLH_SERVICE_CODE, BLH_BILL_LIMIT_VAL, BLH_LEVEL,BLH_TYPE, BLH_VAT_IND, BLH_UNBILL_USAGE, BLH_UNBILL_CHARGES, BLH_DIFF,BLH_USER_STATUS, BLH_NEXT_THRESHOLD, BLH_PREV_THRESHOLD, BLH_NEXT_ACN_ID,BLH_PREV_ACN_ID, BLH_NETWORK_ACN, BLH_TRIG_FLAG, BLH_LAST_UPDATE
FROM BLH_BILL_LIMIT_HD
WHERE BLH_SUBSCRIBER_ID = ? AND BLH_SERVICE_CODE = ?
Argument(s): |31590|SPUL|
20230324: 152103     DEBUG  4450[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1c6b6478
20230324: 152103     DEBUG  4501[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BlhBillLimitHd )
20230324: 152103     DEBUG  4501[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractBLO.get(BlhBillLimitHdAbstractBLO.java:264) - get( filter )
20230324: 152103     DEBUG  4502[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractDACImpl.get(BlhBillLimitHdAbstractDACImpl.java:98) - get( filter )
20230324: 152103     DEBUG  4502[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BlhBillLimitHd|0|equalBlhSubscriberId+equalBlhServiceCode|

20230324: 152103     DEBUG  4522[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BlhBillLimitHd
Execute SQL Statement: SELECT BLH_SUBSCRIBER_ID, BLH_SERVICE_CODE, BLH_BILL_LIMIT_VAL, BLH_LEVEL,BLH_TYPE, BLH_VAT_IND, BLH_UNBILL_USAGE, BLH_UNBILL_CHARGES, BLH_DIFF,BLH_USER_STATUS, BLH_NEXT_THRESHOLD, BLH_PREV_THRESHOLD, BLH_NEXT_ACN_ID,BLH_PREV_ACN_ID, BLH_NETWORK_ACN, BLH_TRIG_FLAG, BLH_LAST_UPDATE
FROM BLH_BILL_LIMIT_HD
WHERE BLH_SUBSCRIBER_ID = ? AND BLH_SERVICE_CODE = ?
Argument(s): |31590|SUL|
20230324: 152103     DEBUG  4524[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5f205aa
20230324: 152103     ERROR  4568[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1026) - 
CREDIT LIMIT: 16722.58
TOTAL CHARGES: 1337.57
TOTAL SUL60.00
20230324: 152103     ERROR  4568[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1050) - 
TOTAL SUL WITHOUT CURRENT SUL: 30.00
AFTER CREDIT LIMIT: 16722.58
TOTAL CHARGES: 1337.57TOTAL SUL: 30.00
PARAM CHARGES: 0.00
20230324: 152103     DEBUG  4573[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SksKeySetting )
20230324: 152103     DEBUG  4575[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSksKeySettingDAC(BaseAbstractDACFactory.java:314) - getSksKeySettingDAC()
20230324: 152103     DEBUG  4585[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl com.eppixcomm.eppix.base.dml.SksKeySettingAbstractDMLFactory@161cd475
20230324: 152103     DEBUG  4586[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl
20230324: 152103     DEBUG  4591[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 152103     DEBUG  4592[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl TO MAP
20230324: 152103     DEBUG  4593[main] - com.eppixcomm.eppix.base.blo.SksKeySettingAbstractBLO.get(SksKeySettingAbstractBLO.java:500) - get( filter )
20230324: 152103     DEBUG  4593[main] - com.eppixcomm.eppix.base.blo.SksKeySettingAbstractDACImpl.get(SksKeySettingAbstractDACImpl.java:420) - get( filter )
20230324: 152103     DEBUG  4594[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
SksKeySetting|0|equalSksKeyCode|

20230324: 152103     DEBUG  4680[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SksKeySetting
Execute SQL Statement: SELECT SKS_KEY_CODE, SKS_VALUE, SKS_COMMENT, SKS_TIMESTAMP
FROM SKS_KEY_SETTING
WHERE (SKS_KEY_CODE) = ?
Argument(s): |ALFTURNONO|
20230324: 152103     DEBUG  4680[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4c3e4790
20230324: 152104     DEBUG  4769[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.Sysdirm )
20230324: 152104     DEBUG  4771[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSysdirmDAC(BaseAbstractDACFactory.java:327) - getSysdirmDAC()
20230324: 152104     DEBUG  4782[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SysdirmDACImpl com.eppixcomm.eppix.base.dml.SysdirmAbstractDMLFactory@19e1023e
20230324: 152104     DEBUG  4782[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SysdirmDACImpl
20230324: 152104     DEBUG  4786[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 152104     DEBUG  4786[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SysdirmDACImpl TO MAP
20230324: 152104     DEBUG  4787[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractBLO.get(SysdirmAbstractBLO.java:501) - get( filter )
20230324: 152104     DEBUG  4787[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractDACImpl.get(SysdirmAbstractDACImpl.java:435) - get( filter )
20230324: 152104     DEBUG  4788[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
Sysdirm|0|equalSystemKey|

20230324: 152104     DEBUG  4881[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: Sysdirm
Execute SQL Statement: SELECT SYSTEM_KEY, KEY_VALUE, DESCRIPTION
FROM SYSDIRM
WHERE (SYSTEM_KEY) = ?
Argument(s): |OPVATCODE|
20230324: 152104     DEBUG  4883[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6d1e7682
20230324: 152104     DEBUG  4930[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVatPercentageByCode
20230324: 152104     DEBUG  4931[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVatPercentageByCode|0||

20230324: 152104     DEBUG  4994[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVatPercentageByCode
Execute SQL Statement: SELECT percentage FROM cevatm WHERE vat_code = ? 
Argument(s): |VST|
20230324: 152104     DEBUG  4995[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2a3046da
20230324: 152104     DEBUG  5051[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BcyBillingCycle )
20230324: 152104     DEBUG  5052[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getBcyBillingCycleDAC(BaseAbstractDACFactory.java:550) - getBcyBillingCycleDAC()
20230324: 152104     DEBUG  5073[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.BcyBillingCycleDACImpl com.eppixcomm.eppix.base.dml.BcyBillingCycleDMLFactory@3ada9e37
20230324: 152104     DEBUG  5074[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.BcyBillingCycleDACImpl
20230324: 152104     DEBUG  5079[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 152104     DEBUG  5079[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.BcyBillingCycleDACImpl TO MAP
20230324: 152104     DEBUG  5080[main] - com.eppixcomm.eppix.base.blo.BcyBillingCycleAbstractBLO.get(BcyBillingCycleAbstractBLO.java:587) - get( filter )
20230324: 152104     DEBUG  5080[main] - com.eppixcomm.eppix.base.blo.BcyBillingCycleAbstractDACImpl.get(BcyBillingCycleAbstractDACImpl.java:492) - get( filter )
20230324: 152104     DEBUG  5081[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BcyBillingCycle|0|equalBcyBillCycle|

20230324: 152104     DEBUG  5153[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BcyBillingCycle
Execute SQL Statement: SELECT BCY_BILL_CYCLE, BCY_DESCRIPTION, BCY_PERIOD, BCY_FREQUENCY, BCY_DAY_OF_RUN, BCY_NEXT_RUN, BCY_SUSPENDED, BCY_USE_STATUS, BCY_NEXT_CALL_RUN, BCY_IN_ADVANCE
FROM BCY_BILLING_CYCLE
WHERE BCY_BILL_CYCLE = ?
Argument(s): |CYC93|
20230324: 152104     DEBUG  5155[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@574caa3f
20230324: 152104     DEBUG  5211[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10040) - 
billTable=bill_CYC9320230205
20230324: 152104     DEBUG  5217[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.CrbaCustRiskAux )
20230324: 152104     DEBUG  5219[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getCrbaCustRiskAuxDAC(BaseAbstractDACFactory.java:1601) - getCrbaCustRiskAuxDAC()
20230324: 152104     DEBUG  5236[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxDACImpl com.eppixcomm.eppix.base.dml.CrbaCustRiskAuxDMLFactory@3f102e87
20230324: 152104     DEBUG  5236[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxDACImpl
20230324: 152104     DEBUG  5240[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 152104     DEBUG  5241[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxDACImpl TO MAP
20230324: 152104     DEBUG  5241[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractBLO.get(CrbaCustRiskAuxAbstractBLO.java:270) - get( filter )
20230324: 152104     DEBUG  5242[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractDACImpl.get(CrbaCustRiskAuxAbstractDACImpl.java:322) - get( filter )
20230324: 152104     DEBUG  5242[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
CrbaCustRiskAux|0|equalcrbaBillAcNo|

20230324: 152105     DEBUG  5748[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: CrbaCustRiskAux
Execute SQL Statement: SELECT CRBA_BILL_AC_NO, CRBA_ACC_DISC_VAL, CRBA_AUX_FLOAT_1, CRBA_AUX_FLOAT_2, CRBA_AUX_FLOAT_3, CRBA_AUX_INT_1, CRBA_AUX_INT_2, CRBA_AUX_INT_3, CRBA_AUX_CHAR_1, CRBA_AUX_CHAR_2, CRBA_AUX_CHAR_3, CRBA_AUX_DATE_1, CRBA_AUX_DATE_2, CRBA_AUX_DATE_3
FROM crba_cust_risk_aux
WHERE CRBA_BILL_AC_NO = ? 
Argument(s): |A3169077|
20230324: 152105     DEBUG  5752[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@60215eee
20230324: 152105     DEBUG  5821[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.CrbCustRiskBal )
20230324: 152105     DEBUG  5822[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getCrbCustRiskBalDAC(BaseAbstractDACFactory.java:943) - getCrbCustRiskBalDAC()
20230324: 152105     DEBUG  5833[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.CrbCustRiskBalDACImpl com.eppixcomm.eppix.base.dml.CrbCustRiskBalDMLFactory@b065c63
20230324: 152105     DEBUG  5833[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbCustRiskBalDACImpl
20230324: 152105     DEBUG  5836[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 152105     DEBUG  5837[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbCustRiskBalDACImpl TO MAP
20230324: 152105     DEBUG  5837[main] - com.eppixcomm.eppix.base.blo.CrbCustRiskBalAbstractBLO.get(CrbCustRiskBalAbstractBLO.java:256) - get( filter )
20230324: 152105     DEBUG  5837[main] - com.eppixcomm.eppix.base.blo.CrbCustRiskBalAbstractDACImpl.get(CrbCustRiskBalAbstractDACImpl.java:96) - get( filter )
20230324: 152105     DEBUG  5838[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
crbCustRiskBal|0|equalCrbBillAcNo|

20230324: 152105     DEBUG  5961[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: crbCustRiskBal
Execute SQL Statement: SELECT CRB_BILL_AC_NO, CRB_ACCOUNT_TYPE, CRB_CREDIT_LIMIT, CRB_ACC_BAL, CRB_UNBILL_CHARGES, CRB_UNBILL_CALLS, CRB_DIFF, CRB_NEXT_THRESHOLD, CRB_PREV_THRESHOLD, CRB_COLL_PLAN, CRB_MIN_THRESHOLD, CRB_ACTIVATE_FLAG, CRB_EAP_FLAG, CRB_BL_STATUS, CRB_BL_TYPE, CRB_BL_LIMIT, CRB_BL_DIFF, CRB_BL_NEXT_THRESH, CRB_BL_PREV_THRESH, CRB_BL_NEXT_ACN_ID, CRB_BL_PREV_ACN_ID, CRB_BL_TRIG_FLAG, CRB_BL_LAST_UPDATE
FROM CRB_CUST_RISK_BAL
WHERE CRB_BILL_AC_NO = ?
Argument(s): |A3169077|
20230324: 152105     DEBUG  5969[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@46f5f779
20230324: 152105     DEBUG  6068[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10087) - 
Select sbd_subscriber_id, start_period, sparech, chaserv, charge from sbd_sub_dets, vam_active_msisdn, bill_CYC9320230205 WHERE subscriber_id = sbd_subscriber_id AND subscriber_id =  vam_subscriber_id  AND handset =  vam_msisdn_no  AND sparech[1,3] != 'CCC'  AND charge > 0   AND sbd_bill_ac_no = 'A3169077'
20230324: 152106     DEBUG  6716[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10193) - 
otherCharges: 0.00
20230324: 152106     DEBUG  6718[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10197) - 
Before VAT unbilledCharges: 1337.569999999999936335370875895023345947265625
20230324: 152106     DEBUG  6719[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10201) - 
UNBILLED CHARGES + VAT: 1538.20549999999992678567650727927684783935546875
20230324: 152106     DEBUG  6723[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1102) - 
TOTAL MAX ALLOWED: 15184.37
20230324: 152106     DEBUG  6724[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSpulByAccount
20230324: 152106     DEBUG  6724[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSpulByAccount|0||

20230324: 152106     DEBUG  6853[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSpulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SPUL' AND sbd_bill_ac_no = ? 
Argument(s): |A3169077|
20230324: 152106     DEBUG  6854[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@769c9116
20230324: 152106     DEBUG  6952[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.CrbaCustRiskAux )
20230324: 152106     DEBUG  6952[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractBLO.get(CrbaCustRiskAuxAbstractBLO.java:270) - get( filter )
20230324: 152106     DEBUG  6954[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractDACImpl.get(CrbaCustRiskAuxAbstractDACImpl.java:322) - get( filter )
20230324: 152106     DEBUG  6954[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
CrbaCustRiskAux|0|equalcrbaBillAcNo|

20230324: 152106     DEBUG  7013[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: CrbaCustRiskAux
Execute SQL Statement: SELECT CRBA_BILL_AC_NO, CRBA_ACC_DISC_VAL, CRBA_AUX_FLOAT_1, CRBA_AUX_FLOAT_2, CRBA_AUX_FLOAT_3, CRBA_AUX_INT_1, CRBA_AUX_INT_2, CRBA_AUX_INT_3, CRBA_AUX_CHAR_1, CRBA_AUX_CHAR_2, CRBA_AUX_CHAR_3, CRBA_AUX_DATE_1, CRBA_AUX_DATE_2, CRBA_AUX_DATE_3
FROM crba_cust_risk_aux
WHERE CRBA_BILL_AC_NO = ? 
Argument(s): |A3169077|
20230324: 152106     DEBUG  7015[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1ef7fe8e
20230324: 152106     DEBUG  7109[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSulByAccount
20230324: 152106     DEBUG  7110[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSulByAccount|0||

20230324: 152106     DEBUG  7156[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SUL' AND sbd_bill_ac_no = ? 
Argument(s): |A3169077|
20230324: 152106     DEBUG  7156[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5fe5c6f
20230324: 152106     DEBUG  7258[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getTsServiceBySubscriber|0|NONE|

20230324: 152106     DEBUG  7558[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getTsServiceBySubscriber
Execute SQL Statement:  select * from ts_tariff_service  where ts_service_code  in  (select vas_service_code from vas_active_service  where vas_subscriber_id in   (select sbd_subscriber_id from sbd_sub_dets  where sbd_bill_ac_no = ?))  and ts_package_code =  ?  and ts_internal_tariff = ?  and (ts_sub_charge1 <> '' ) 
Argument(s): |A3169077|MYMTN|E_34|
20230324: 152106     DEBUG  7560[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2be94b0f
20230324: 152106     DEBUG  7564[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: BVD03
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 152106     DEBUG  7564[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: BVD03
20230324: 152106     DEBUG  7572[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 152106     DEBUG  7575[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getChgChargesDAC(BaseAbstractDACFactory.java:578) - getChgChargesDAC()
20230324: 152106     DEBUG  7591[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.ChgChargesDACImpl com.eppixcomm.eppix.base.dml.ChgChargesDMLFactory@47d384ee
20230324: 152106     DEBUG  7592[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.ChgChargesDACImpl
20230324: 152106     DEBUG  7598[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 152106     DEBUG  7600[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.ChgChargesDACImpl TO MAP
20230324: 152106     DEBUG  7601[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 152106     DEBUG  7601[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 152106     DEBUG  7602[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 152107     DEBUG  7789[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |BVD03|M1|2023-03-24|F|
20230324: 152107     DEBUG  7825[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-15
20230324: 152107     DEBUG  7826[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-15
20230324: 152107     DEBUG  7826[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 152107     DEBUG  7827[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 152107     DEBUG  7827[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 152107     DEBUG  7828[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 152107     DEBUG  7979[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |BVD03|M1|2018-05-15|F|
20230324: 152107     DEBUG  7981[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@f5f2bb7
20230324: 152107     DEBUG  8051[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@64c64813
20230324: 152107     DEBUG  8052[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: BUSV
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 152107     DEBUG  8052[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: BUSV
20230324: 152107     DEBUG  8053[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 152107     DEBUG  8053[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 152107     DEBUG  8053[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 152107     DEBUG  8054[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 152108     DEBUG  9144[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |BUSV|M1|2023-03-24|F|
20230324: 152108     DEBUG  9244[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-15
20230324: 152108     DEBUG  9245[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-15
20230324: 152108     DEBUG  9246[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 152108     DEBUG  9246[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 152108     DEBUG  9247[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 152108     DEBUG  9248[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 152108     DEBUG  9293[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |BUSV|M1|2018-05-15|F|
20230324: 152108     DEBUG  9293[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@445b84c0
20230324: 152108     DEBUG  9417[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@233c0b17
20230324: 152108     DEBUG  9418[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: CL
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 152108     DEBUG  9419[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: CL
20230324: 152108     DEBUG  9420[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 152108     DEBUG  9420[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 152108     DEBUG  9421[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 152108     DEBUG  9421[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 152108     DEBUG  9472[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |CL|M1|2023-03-24|F|
20230324: 152108     DEBUG  9522[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2019-05-25
20230324: 152108     DEBUG  9523[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2019-05-25
20230324: 152108     DEBUG  9524[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 152108     DEBUG  9525[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 152108     DEBUG  9525[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 152108     DEBUG  9525[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 152108     DEBUG  9584[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |CL|M1|2019-05-25|F|
20230324: 152108     DEBUG  9586[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2eee9593
20230324: 152109     DEBUG  9897[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@546a03af
20230324: 152109     DEBUG  9935[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: LTE
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 152109     DEBUG  9936[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: LTE
20230324: 152109     DEBUG  9936[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 152109     DEBUG  9937[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 152109     DEBUG  9937[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 152109     DEBUG  9937[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 152109     DEBUG 10029[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |LTE|M1|2023-03-24|F|
20230324: 152109     DEBUG 10059[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2013-05-16
20230324: 152109     DEBUG 10060[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2013-05-16
20230324: 152109     DEBUG 10061[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 152109     DEBUG 10061[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 152109     DEBUG 10061[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 152109     DEBUG 10062[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 152109     DEBUG 10153[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |LTE|M1|2013-05-16|F|
20230324: 152109     DEBUG 10154[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2a18f23c
20230324: 165037     DEBUG     0[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.loadproperties(TestSubscriberServices.java:280) - loading appProperties
20230324: 165037     DEBUG     4[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.loadproperties(TestSubscriberServices.java:287) - appProperties loaded : {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230324: 165037     DEBUG     4[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:300) - DB Connection start
20230324: 165037     DEBUG     4[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:303) - {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230324: 165038     DEBUG  1353[main] - com.eppixcomm.eppix.common.data.DACFactory.<init>(DACFactory.java:95) - constructor( connection, thrower )
20230324: 165038     DEBUG  1358[main] - com.eppixcomm.eppix.common.data.ConnectionContext.connect(ConnectionContext.java:100) - connect( connection )
20230324: 165038     DEBUG  1359[main] - com.eppixcomm.eppix.common.data.ConnectionContext.get(ConnectionContext.java:82) - get()
20230324: 165038     DEBUG  1361[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberActiveServices )
20230324: 165038     DEBUG  1402[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberActiveServicesDAC(BaseDACFactory.java:506) - getSubscriberActiveServicesDAC
20230324: 165038     DEBUG  1409[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl com.eppixcomm.eppix.base.dml.SubscriberActiveServicesDML@6d21714c
20230324: 165038     DEBUG  1409[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl
20230324: 165038     DEBUG  1433[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 165038     DEBUG  1433[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl TO MAP
20230324: 165038     DEBUG  1435[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230324: 165038     DEBUG  1436[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetServiceDiscountDAC(BaseDACFactory.java:426) - getGetServiceDiscountDAC()
20230324: 165038     DEBUG  1439[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl com.eppixcomm.eppix.base.dml.GetServiceDiscountDML@619a5dff
20230324: 165038     DEBUG  1439[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl
20230324: 165038     DEBUG  1440[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 165038     DEBUG  1440[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl TO MAP
20230324: 165038     DEBUG  1442[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SimAPNServices )
20230324: 165038     DEBUG  1445[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSimAPNServicesDAC(BaseDACFactory.java:467) - getSimAPNServicesDAC
20230324: 165038     DEBUG  1448[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl com.eppixcomm.eppix.base.dml.SimAPNServicesDML@6438a396
20230324: 165038     DEBUG  1448[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl
20230324: 165038     DEBUG  1448[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 165038     DEBUG  1449[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl TO MAP
20230324: 165038     DEBUG  1449[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowed )
20230324: 165038     DEBUG  1452[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetSULMaxUsageAllowedDAC(BaseDACFactory.java:532) - getGetSULMaxUsageAllowedDAC
20230324: 165038     DEBUG  1454[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl com.eppixcomm.eppix.base.dml.GetSULMaxUsageAllowedDML@7506e922
20230324: 165038     DEBUG  1454[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl
20230324: 165038     DEBUG  1455[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 165038     DEBUG  1455[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl TO MAP
20230324: 165038     DEBUG  1455[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230324: 165038     DEBUG  1463[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230324: 165038     DEBUG  1538[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberUpgradeMigradeDAC(BaseDACFactory.java:519) - getSubscriberUpgradeMigradeDAC
20230324: 165039     DEBUG  1545[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl com.eppixcomm.eppix.base.dml.SubscriberUpgradeMigradeDML@5d6f64b1
20230324: 165039     DEBUG  1546[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl
20230324: 165039     DEBUG  1548[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 165039     DEBUG  1548[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl TO MAP
20230324: 165039     DEBUG  1548[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230324: 165039     DEBUG  1548[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowed )
20230324: 165039     DEBUG  1548[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230324: 165039     DEBUG  1549[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230324: 165039     DEBUG  1549[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230324: 165039     DEBUG  1549[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:336) - DB Connection successfull
20230324: 165039     DEBUG  1552[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SbdSubDets )
20230324: 165039     DEBUG  1678[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSbdSubDetsDAC(BaseAbstractDACFactory.java:234) - getSbdSubDetsDAC()
20230324: 165039     DEBUG  1688[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl com.eppixcomm.eppix.base.dml.SbdSubDetsAbstractDMLFactory@f2a0b8e
20230324: 165039     DEBUG  1688[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl
20230324: 165039     DEBUG  1690[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 165039     DEBUG  1690[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl TO MAP
20230324: 165039     DEBUG  1690[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractBLO.get(SbdSubDetsAbstractBLO.java:531) - get( filter )
20230324: 165039     DEBUG  1690[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractDACImpl.get(SbdSubDetsAbstractDACImpl.java:556) - get( filter )
20230324: 165039     DEBUG  1694[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
SbdSubDets|0|equalSbdSubscriberId|

20230324: 165039     DEBUG  1849[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SbdSubDets
Execute SQL Statement: SELECT SBD_SUBSCRIBER_ID, SBD_DIALLING_NO, SBD_BILL_AC_NO, SBD_CONNECT_DATE, SBD_DCONNECT_DATE, SBD_TERM_DATE, SBD_TITLE, SBD_SURNAME, SBD_FIRSTNAME, SBD_GENDER, SBD_DOB, SBD_PASSWORD, SBD_LOCATION_CODE, SBD_BILL_CYCLE, SBD_PACKAGE_CODE, SBD_BILLED_UPTO, SBD_TARIFF_PLAN
FROM SBD_SUB_DETS
WHERE SBD_SUBSCRIBER_ID = ?
Argument(s): |1003411985|
20230324: 165039     DEBUG  1859[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3b764bce
20230324: 165039     DEBUG  1948[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSulByAccount
20230324: 165039     DEBUG  1952[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSulByAccount|0||

20230324: 165041     DEBUG  3585[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SUL' AND sbd_bill_ac_no = ? 
Argument(s): |A5085810|
20230324: 165041     DEBUG  3588[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6bf2d08e
20230324: 165041     DEBUG  3641[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getCrbUnbillCharges
20230324: 165041     DEBUG  3641[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getCrbUnbillCharges|0||

20230324: 165041     DEBUG  3843[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getCrbUnbillCharges
Execute SQL Statement: SELECT NVL((crb_unbill_charges + crb_unbill_calls), 0) FROM crb_cust_risk_bal WHERE crb_bill_ac_no = ? 
Argument(s): |A5085810|
20230324: 165041     DEBUG  3844[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7e774085
20230324: 165041     DEBUG  3926[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getAccountCreditLimit
20230324: 165041     DEBUG  3927[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getAccountCreditLimit|0||

20230324: 165041     DEBUG  4138[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getAccountCreditLimit
Execute SQL Statement: SELECT credit_limit FROM slcustm WHERE customer = ? 
Argument(s): |A5085810|
20230324: 165041     DEBUG  4140[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1b701da1
20230324: 165041     DEBUG  4236[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSubscriberVasServices|0|NONE|

20230324: 165041     DEBUG  4434[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getSubscriberVasServices
Execute SQL Statement: SELECT vas_service_code FROM vas_active_service WHERE vas_subscriber_id = ? AND vas_service_code NOT IN (SELECT tt_type FROM tt_type_text WHERE tt_group = 'IDACCSRVEX');
Argument(s): |1003411985|
20230324: 165041     DEBUG  4437[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@15615099
20230324: 165041     DEBUG  4442[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 165041     DEBUG  4443[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getTtTypeTextDAC(BaseAbstractDACFactory.java:144) - getTtTypeTextDAC()
20230324: 165041     DEBUG  4451[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.TtTypeTextDACImpl com.eppixcomm.eppix.base.dml.TtTypeTextAbstractDMLFactory@1963006a
20230324: 165041     DEBUG  4452[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.TtTypeTextDACImpl
20230324: 165041     DEBUG  4456[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 165041     DEBUG  4456[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.TtTypeTextDACImpl TO MAP
20230324: 165041     DEBUG  4457[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 165041     DEBUG  4457[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 165041     DEBUG  4458[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 165042     DEBUG  4559[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|BSTL|
20230324: 165042     ERROR  4625[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1234) - Failed to get TT for group: ADHC_BUNDL and type: BSTL
20230324: 165042     DEBUG  4626[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 165042     DEBUG  4627[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 165042     DEBUG  4722[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |BSTL|1003411985|
20230324: 165042     DEBUG  4724[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5e91993f
20230324: 165042     DEBUG  4793[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@379619aa
20230324: 165042     DEBUG  4794[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 165042     DEBUG  4794[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 165042     DEBUG  4795[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 165042     DEBUG  4795[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 165042     DEBUG  4821[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|CSCP|
20230324: 165042     ERROR  4876[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1234) - Failed to get TT for group: ADHC_BUNDL and type: CSCP
20230324: 165042     DEBUG  4877[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 165042     DEBUG  4878[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 165042     DEBUG  4900[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |CSCP|1003411985|
20230324: 165042     DEBUG  4901[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4361bd48
20230324: 165042     DEBUG  4960[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2401f4c3
20230324: 165042     DEBUG  4961[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 165042     DEBUG  4962[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 165042     DEBUG  4962[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 165042     DEBUG  4963[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 165042     DEBUG  4980[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|EVE |
20230324: 165042     ERROR  5026[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1234) - Failed to get TT for group: ADHC_BUNDL and type: EVE 
20230324: 165042     DEBUG  5026[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 165042     DEBUG  5027[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 165042     DEBUG  5052[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |EVE |1003411985|
20230324: 165042     DEBUG  5052[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7d6f77cc
20230324: 165042     DEBUG  5097[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@73a28541
20230324: 165042     DEBUG  5098[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 165042     DEBUG  5099[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 165042     DEBUG  5099[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 165042     DEBUG  5100[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 165042     DEBUG  5134[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|ITBL|
20230324: 165042     ERROR  5186[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1234) - Failed to get TT for group: ADHC_BUNDL and type: ITBL
20230324: 165042     DEBUG  5187[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 165042     DEBUG  5187[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 165042     DEBUG  5219[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |ITBL|1003411985|
20230324: 165042     DEBUG  5220[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@244038d0
20230324: 165042     DEBUG  5276[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5fdef03a
20230324: 165042     DEBUG  5277[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 165042     DEBUG  5278[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 165042     DEBUG  5278[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 165042     DEBUG  5279[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 165042     DEBUG  5304[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|MBIP|
20230324: 165042     ERROR  5351[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1234) - Failed to get TT for group: ADHC_BUNDL and type: MBIP
20230324: 165042     DEBUG  5352[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 165042     DEBUG  5352[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 165042     DEBUG  5382[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |MBIP|1003411985|
20230324: 165042     DEBUG  5383[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5c8da962
20230324: 165042     DEBUG  5448[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.PshParamServHdr )
20230324: 165042     DEBUG  5450[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getPshParamServHdrDAC(BaseDACFactory.java:199) - getPshParamServHdrDAC()
20230324: 165042     DEBUG  5469[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.PshParamServHdrDACImpl com.eppixcomm.eppix.base.dml.PshParamServHdrAbstractDMLFactory@368239c8
20230324: 165042     DEBUG  5483[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.PshParamServHdrDACImpl
20230324: 165042     DEBUG  5488[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 165042     DEBUG  5489[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.PshParamServHdrDACImpl TO MAP
20230324: 165042     DEBUG  5490[main] - com.eppixcomm.eppix.base.blo.PshParamServHdrAbstractBLO.get(PshParamServHdrAbstractBLO.java:516) - get( filter )
20230324: 165042     DEBUG  5490[main] - com.eppixcomm.eppix.base.blo.PshParamServHdrAbstractDACImpl.get(PshParamServHdrAbstractDACImpl.java:448) - get( filter )
20230324: 165042     DEBUG  5491[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
PshParamServHdr|0|equalPshServiceCode+equalPshSubscriberId+equalPshArchived|

20230324: 165043     DEBUG  5602[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: PshParamServHdr
Execute SQL Statement: SELECT PSH_ID, PSH_SERVICE_CODE, PSH_SERVICE_TYPE, PSH_SUBSCRIBER_ID, PSH_SIM_NO, PSH_MSISDN_NO, PSH_ARCHIVED
FROM PSH_PARAM_SERV_HDR
WHERE (PSH_SERVICE_CODE) = ? AND PSH_SUBSCRIBER_ID = ? AND (PSH_ARCHIVED) = ?
Argument(s): |MBIP|1003411985|N|
20230324: 165043     DEBUG  5604[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@11028347
20230324: 165043     DEBUG  5652[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getPshPsdServices|0|NONE|

20230324: 165043     DEBUG  5827[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getPshPsdServices
Execute SQL Statement: SELECT * FROM psh_param_serv_hdr, psd_param_serv_det WHERE psd_psh_id = ? AND psh_id = psd_psh_id AND psd_param_active = 'Y' 
Argument(s): |23449756|
20230324: 165043     DEBUG  5831[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@77468bd9
20230324: 165043     DEBUG  5859[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 165043     DEBUG  5860[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 165043     DEBUG  5861[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 165043     DEBUG  5862[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 165043     DEBUG  5888[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |CHGVARPARM|MBSIP|
20230324: 165043     ERROR  5945[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1234) - Failed to get TT for group: CHGVARPARM and type: MBSIP
20230324: 165043     DEBUG  5946[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getChgNetId|0|NONE|

20230324: 165043     DEBUG  6043[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getChgNetId
Execute SQL Statement: SELECT chg_netid FROM chg_charges WHERE chg_code = ? ORDER BY chg_effective_date DESC
Argument(s): |MBBIP|
20230324: 165043     DEBUG  6045[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@61064425
20230324: 165043     DEBUG  6090[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: MBBIP
String netId: M1   
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 165043     DEBUG  6090[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: MBBIP
20230324: 165043     DEBUG  6097[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 165043     DEBUG  6099[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getChgChargesDAC(BaseAbstractDACFactory.java:578) - getChgChargesDAC()
20230324: 165043     DEBUG  6117[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.ChgChargesDACImpl com.eppixcomm.eppix.base.dml.ChgChargesDMLFactory@2e5c649
20230324: 165043     DEBUG  6117[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.ChgChargesDACImpl
20230324: 165043     DEBUG  6120[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 165043     DEBUG  6120[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.ChgChargesDACImpl TO MAP
20230324: 165043     DEBUG  6121[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 165043     DEBUG  6121[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 165043     DEBUG  6121[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 165043     DEBUG  6190[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |MBBIP|M1   |2023-03-24|F|
20230324: 165043     DEBUG  6229[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2022-08-10
20230324: 165043     DEBUG  6231[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2022-08-10
20230324: 165043     DEBUG  6232[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 165043     DEBUG  6233[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 165043     DEBUG  6233[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 165043     DEBUG  6235[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 165043     DEBUG  6297[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |MBBIP|M1   |2022-08-10|F|
20230324: 165043     DEBUG  6301[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2ff5659e
20230324: 165043     DEBUG  6361[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@161cd475
20230324: 165043     DEBUG  6362[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 165043     DEBUG  6363[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 165043     DEBUG  6363[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 165043     DEBUG  6364[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 165043     DEBUG  6393[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|PENB|
20230324: 165043     ERROR  6450[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1234) - Failed to get TT for group: ADHC_BUNDL and type: PENB
20230324: 165043     DEBUG  6450[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 165043     DEBUG  6451[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 165043     DEBUG  6469[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |PENB|1003411985|
20230324: 165043     DEBUG  6471[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@27ddd392
20230324: 165043     DEBUG  6507[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7cef4e59
20230324: 165043     DEBUG  6508[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 165043     DEBUG  6508[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 165043     DEBUG  6509[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 165043     DEBUG  6509[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 165043     DEBUG  6540[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|SPUL|
20230324: 165044     ERROR  6587[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1234) - Failed to get TT for group: ADHC_BUNDL and type: SPUL
20230324: 165044     DEBUG  6588[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 165044     DEBUG  6588[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 165044     DEBUG  6620[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |SPUL|1003411985|
20230324: 165044     DEBUG  6621[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@16b4a017
20230324: 165044     DEBUG  6674[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2a3046da
20230324: 165044     DEBUG  6675[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 165044     DEBUG  6675[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 165044     DEBUG  6676[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 165044     DEBUG  6677[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 165044     DEBUG  6706[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|SUB |
20230324: 165044     ERROR  6757[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1234) - Failed to get TT for group: ADHC_BUNDL and type: SUB 
20230324: 165044     DEBUG  6758[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 165044     DEBUG  6758[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 165044     DEBUG  6788[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |SUB |1003411985|
20230324: 165044     DEBUG  6789[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@59690aa4
20230324: 165044     DEBUG  6849[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@574caa3f
20230324: 165044     DEBUG  6885[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 165044     DEBUG  6885[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 165044     DEBUG  6886[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 165044     DEBUG  6886[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 165044     DEBUG  6920[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|VPNA|
20230324: 165044     ERROR  6967[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1234) - Failed to get TT for group: ADHC_BUNDL and type: VPNA
20230324: 165044     DEBUG  6968[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 165044     DEBUG  6968[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 165044     DEBUG  7003[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |VPNA|1003411985|
20230324: 165044     DEBUG  7004[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2280cdac
20230324: 165044     DEBUG  7102[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BlhBillLimitHd )
20230324: 165044     DEBUG  7107[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getBlhBillLimitHdDAC(BaseAbstractDACFactory.java:930) - getBlhBillLimitHdDAC()
20230324: 165044     DEBUG  7136[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl com.eppixcomm.eppix.base.dml.BlhBillLimitHdDMLFactory@60215eee
20230324: 165044     DEBUG  7137[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl
20230324: 165044     DEBUG  7142[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 165044     DEBUG  7142[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl TO MAP
20230324: 165044     DEBUG  7142[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractBLO.get(BlhBillLimitHdAbstractBLO.java:264) - get( filter )
20230324: 165044     DEBUG  7143[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractDACImpl.get(BlhBillLimitHdAbstractDACImpl.java:98) - get( filter )
20230324: 165044     DEBUG  7144[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BlhBillLimitHd|0|equalBlhSubscriberId+equalBlhServiceCode|

20230324: 165044     DEBUG  7224[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BlhBillLimitHd
Execute SQL Statement: SELECT BLH_SUBSCRIBER_ID, BLH_SERVICE_CODE, BLH_BILL_LIMIT_VAL, BLH_LEVEL,BLH_TYPE, BLH_VAT_IND, BLH_UNBILL_USAGE, BLH_UNBILL_CHARGES, BLH_DIFF,BLH_USER_STATUS, BLH_NEXT_THRESHOLD, BLH_PREV_THRESHOLD, BLH_NEXT_ACN_ID,BLH_PREV_ACN_ID, BLH_NETWORK_ACN, BLH_TRIG_FLAG, BLH_LAST_UPDATE
FROM BLH_BILL_LIMIT_HD
WHERE BLH_SUBSCRIBER_ID = ? AND BLH_SERVICE_CODE = ?
Argument(s): |1003411985|SPUL|
20230324: 165044     DEBUG  7225[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5479e3f
20230324: 165044     DEBUG  7267[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BlhBillLimitHd )
20230324: 165044     DEBUG  7269[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractBLO.get(BlhBillLimitHdAbstractBLO.java:264) - get( filter )
20230324: 165044     DEBUG  7269[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractDACImpl.get(BlhBillLimitHdAbstractDACImpl.java:98) - get( filter )
20230324: 165044     DEBUG  7269[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BlhBillLimitHd|0|equalBlhSubscriberId+equalBlhServiceCode|

20230324: 165044     DEBUG  7293[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BlhBillLimitHd
Execute SQL Statement: SELECT BLH_SUBSCRIBER_ID, BLH_SERVICE_CODE, BLH_BILL_LIMIT_VAL, BLH_LEVEL,BLH_TYPE, BLH_VAT_IND, BLH_UNBILL_USAGE, BLH_UNBILL_CHARGES, BLH_DIFF,BLH_USER_STATUS, BLH_NEXT_THRESHOLD, BLH_PREV_THRESHOLD, BLH_NEXT_ACN_ID,BLH_PREV_ACN_ID, BLH_NETWORK_ACN, BLH_TRIG_FLAG, BLH_LAST_UPDATE
FROM BLH_BILL_LIMIT_HD
WHERE BLH_SUBSCRIBER_ID = ? AND BLH_SERVICE_CODE = ?
Argument(s): |1003411985|SUL|
20230324: 165044     ERROR  7328[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5888) - Failed to get Bill Limits for subscriber: 1003411985 and service code: SUL
20230324: 165044     ERROR  7329[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5904) - Exception getting Bill Limits for subscriber: 1003411985 and service code: SUL EXCEPTION: com.eppixcomm.eppix.base.error.EPPIXSeriousException: Failed to get Bill Limits for subscriber: 1003411985 and service code: SUL
20230324: 170855     DEBUG     0[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.loadproperties(TestSubscriberServices.java:280) - loading appProperties
20230324: 170855     DEBUG     7[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.loadproperties(TestSubscriberServices.java:287) - appProperties loaded : {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230324: 170855     DEBUG     8[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:300) - DB Connection start
20230324: 170855     DEBUG    13[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:303) - {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230324: 170856     DEBUG  1022[main] - com.eppixcomm.eppix.common.data.DACFactory.<init>(DACFactory.java:95) - constructor( connection, thrower )
20230324: 170856     DEBUG  1024[main] - com.eppixcomm.eppix.common.data.ConnectionContext.connect(ConnectionContext.java:100) - connect( connection )
20230324: 170856     DEBUG  1025[main] - com.eppixcomm.eppix.common.data.ConnectionContext.get(ConnectionContext.java:82) - get()
20230324: 170856     DEBUG  1025[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberActiveServices )
20230324: 170856     DEBUG  1048[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberActiveServicesDAC(BaseDACFactory.java:506) - getSubscriberActiveServicesDAC
20230324: 170856     DEBUG  1053[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl com.eppixcomm.eppix.base.dml.SubscriberActiveServicesDML@6d21714c
20230324: 170856     DEBUG  1053[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl
20230324: 170856     DEBUG  1079[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 170856     DEBUG  1080[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl TO MAP
20230324: 170856     DEBUG  1081[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230324: 170856     DEBUG  1083[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetServiceDiscountDAC(BaseDACFactory.java:426) - getGetServiceDiscountDAC()
20230324: 170856     DEBUG  1084[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl com.eppixcomm.eppix.base.dml.GetServiceDiscountDML@619a5dff
20230324: 170856     DEBUG  1085[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl
20230324: 170856     DEBUG  1085[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 170856     DEBUG  1085[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl TO MAP
20230324: 170856     DEBUG  1087[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SimAPNServices )
20230324: 170856     DEBUG  1089[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSimAPNServicesDAC(BaseDACFactory.java:467) - getSimAPNServicesDAC
20230324: 170856     DEBUG  1091[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl com.eppixcomm.eppix.base.dml.SimAPNServicesDML@6438a396
20230324: 170856     DEBUG  1091[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl
20230324: 170856     DEBUG  1092[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 170856     DEBUG  1092[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl TO MAP
20230324: 170856     DEBUG  1093[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowed )
20230324: 170856     DEBUG  1095[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetSULMaxUsageAllowedDAC(BaseDACFactory.java:532) - getGetSULMaxUsageAllowedDAC
20230324: 170856     DEBUG  1097[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl com.eppixcomm.eppix.base.dml.GetSULMaxUsageAllowedDML@7506e922
20230324: 170856     DEBUG  1097[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl
20230324: 170856     DEBUG  1097[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 170856     DEBUG  1098[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl TO MAP
20230324: 170856     DEBUG  1098[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230324: 170856     DEBUG  1110[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230324: 170856     DEBUG  1244[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberUpgradeMigradeDAC(BaseDACFactory.java:519) - getSubscriberUpgradeMigradeDAC
20230324: 170856     DEBUG  1250[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl com.eppixcomm.eppix.base.dml.SubscriberUpgradeMigradeDML@5d6f64b1
20230324: 170856     DEBUG  1250[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl
20230324: 170856     DEBUG  1253[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 170856     DEBUG  1253[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl TO MAP
20230324: 170856     DEBUG  1254[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230324: 170856     DEBUG  1254[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowed )
20230324: 170856     DEBUG  1254[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230324: 170856     DEBUG  1254[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230324: 170856     DEBUG  1254[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230324: 170856     DEBUG  1255[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:336) - DB Connection successfull
20230324: 170856     DEBUG  1257[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SbdSubDets )
20230324: 170856     DEBUG  1317[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSbdSubDetsDAC(BaseAbstractDACFactory.java:234) - getSbdSubDetsDAC()
20230324: 170856     DEBUG  1326[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl com.eppixcomm.eppix.base.dml.SbdSubDetsAbstractDMLFactory@f2a0b8e
20230324: 170856     DEBUG  1327[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl
20230324: 170856     DEBUG  1328[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 170856     DEBUG  1328[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl TO MAP
20230324: 170856     DEBUG  1328[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractBLO.get(SbdSubDetsAbstractBLO.java:531) - get( filter )
20230324: 170856     DEBUG  1328[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractDACImpl.get(SbdSubDetsAbstractDACImpl.java:556) - get( filter )
20230324: 170856     DEBUG  1333[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
SbdSubDets|0|equalSbdSubscriberId|

20230324: 170856     DEBUG  1482[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SbdSubDets
Execute SQL Statement: SELECT SBD_SUBSCRIBER_ID, SBD_DIALLING_NO, SBD_BILL_AC_NO, SBD_CONNECT_DATE, SBD_DCONNECT_DATE, SBD_TERM_DATE, SBD_TITLE, SBD_SURNAME, SBD_FIRSTNAME, SBD_GENDER, SBD_DOB, SBD_PASSWORD, SBD_LOCATION_CODE, SBD_BILL_CYCLE, SBD_PACKAGE_CODE, SBD_BILLED_UPTO, SBD_TARIFF_PLAN
FROM SBD_SUB_DETS
WHERE SBD_SUBSCRIBER_ID = ?
Argument(s): |1003411985|
20230324: 170856     DEBUG  1493[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3b764bce
20230324: 170856     DEBUG  1561[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSulByAccount
20230324: 170856     DEBUG  1565[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSulByAccount|0||

20230324: 170857     DEBUG  2880[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SUL' AND sbd_bill_ac_no = ? 
Argument(s): |A5085810|
20230324: 170857     DEBUG  2890[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6bf2d08e
20230324: 170858     DEBUG  2977[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getCrbUnbillCharges
20230324: 170858     DEBUG  2979[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getCrbUnbillCharges|0||

20230324: 170858     DEBUG  3275[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getCrbUnbillCharges
Execute SQL Statement: SELECT NVL((crb_unbill_charges + crb_unbill_calls), 0) FROM crb_cust_risk_bal WHERE crb_bill_ac_no = ? 
Argument(s): |A5085810|
20230324: 170858     DEBUG  3276[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7e774085
20230324: 170858     DEBUG  3402[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getAccountCreditLimit
20230324: 170858     DEBUG  3403[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getAccountCreditLimit|0||

20230324: 170858     DEBUG  3729[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getAccountCreditLimit
Execute SQL Statement: SELECT credit_limit FROM slcustm WHERE customer = ? 
Argument(s): |A5085810|
20230324: 170858     DEBUG  3730[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1b701da1
20230324: 170858     DEBUG  3884[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSubscriberVasServices|0|NONE|

20230324: 170859     DEBUG  4242[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getSubscriberVasServices
Execute SQL Statement: SELECT vas_service_code FROM vas_active_service WHERE vas_subscriber_id = ? AND vas_service_code NOT IN (SELECT tt_type FROM tt_type_text WHERE tt_group = 'IDACCSRVEX');
Argument(s): |1003411985|
20230324: 170859     DEBUG  4246[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@15615099
20230324: 170859     DEBUG  4249[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 170859     DEBUG  4251[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getTtTypeTextDAC(BaseAbstractDACFactory.java:144) - getTtTypeTextDAC()
20230324: 170859     DEBUG  4262[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.TtTypeTextDACImpl com.eppixcomm.eppix.base.dml.TtTypeTextAbstractDMLFactory@1963006a
20230324: 170859     DEBUG  4263[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.TtTypeTextDACImpl
20230324: 170859     DEBUG  4267[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 170859     DEBUG  4268[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.TtTypeTextDACImpl TO MAP
20230324: 170859     DEBUG  4269[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 170859     DEBUG  4270[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 170859     DEBUG  4271[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 170859     DEBUG  4486[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|BSTL|
20230324: 170859     ERROR  4583[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: BSTL
20230324: 170859     DEBUG  4584[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 170859     DEBUG  4584[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 170859     DEBUG  4801[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |BSTL|1003411985|
20230324: 170859     DEBUG  4802[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5e91993f
20230324: 170859     DEBUG  4871[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@379619aa
20230324: 170859     DEBUG  4873[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 170859     DEBUG  4874[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 170859     DEBUG  4875[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 170859     DEBUG  4876[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 170900     DEBUG  5033[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|CSCP|
20230324: 170900     ERROR  5100[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: CSCP
20230324: 170900     DEBUG  5101[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 170900     DEBUG  5101[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 170900     DEBUG  5162[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |CSCP|1003411985|
20230324: 170900     DEBUG  5163[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4361bd48
20230324: 170900     DEBUG  5296[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2401f4c3
20230324: 170900     DEBUG  5297[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 170900     DEBUG  5297[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 170900     DEBUG  5297[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 170900     DEBUG  5298[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 170900     DEBUG  5354[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|EVE |
20230324: 170900     ERROR  5414[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: EVE 
20230324: 170900     DEBUG  5414[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 170900     DEBUG  5415[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 170900     DEBUG  5463[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |EVE |1003411985|
20230324: 170900     DEBUG  5463[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7d6f77cc
20230324: 170900     DEBUG  5576[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@73a28541
20230324: 170900     DEBUG  5577[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 170900     DEBUG  5578[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 170900     DEBUG  5579[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 170900     DEBUG  5580[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 170900     DEBUG  5644[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|ITBL|
20230324: 170900     ERROR  5727[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: ITBL
20230324: 170900     DEBUG  5727[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 170900     DEBUG  5728[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 170900     DEBUG  5793[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |ITBL|1003411985|
20230324: 170900     DEBUG  5794[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@244038d0
20230324: 170900     DEBUG  5868[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5fdef03a
20230324: 170900     DEBUG  5869[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 170900     DEBUG  5870[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 170900     DEBUG  5870[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 170900     DEBUG  5870[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 170900     DEBUG  5895[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|MBIP|
20230324: 170901     ERROR  5976[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: MBIP
20230324: 170901     DEBUG  5977[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 170901     DEBUG  5978[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 170901     DEBUG  6011[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |MBIP|1003411985|
20230324: 170901     DEBUG  6014[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5c8da962
20230324: 170901     DEBUG  6102[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.PshParamServHdr )
20230324: 170901     DEBUG  6105[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getPshParamServHdrDAC(BaseDACFactory.java:199) - getPshParamServHdrDAC()
20230324: 170901     DEBUG  6117[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.PshParamServHdrDACImpl com.eppixcomm.eppix.base.dml.PshParamServHdrAbstractDMLFactory@368239c8
20230324: 170901     DEBUG  6130[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.PshParamServHdrDACImpl
20230324: 170901     DEBUG  6134[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 170901     DEBUG  6134[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.PshParamServHdrDACImpl TO MAP
20230324: 170901     DEBUG  6135[main] - com.eppixcomm.eppix.base.blo.PshParamServHdrAbstractBLO.get(PshParamServHdrAbstractBLO.java:516) - get( filter )
20230324: 170901     DEBUG  6136[main] - com.eppixcomm.eppix.base.blo.PshParamServHdrAbstractDACImpl.get(PshParamServHdrAbstractDACImpl.java:448) - get( filter )
20230324: 170901     DEBUG  6137[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
PshParamServHdr|0|equalPshServiceCode+equalPshSubscriberId+equalPshArchived|

20230324: 170901     DEBUG  6366[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: PshParamServHdr
Execute SQL Statement: SELECT PSH_ID, PSH_SERVICE_CODE, PSH_SERVICE_TYPE, PSH_SUBSCRIBER_ID, PSH_SIM_NO, PSH_MSISDN_NO, PSH_ARCHIVED
FROM PSH_PARAM_SERV_HDR
WHERE (PSH_SERVICE_CODE) = ? AND PSH_SUBSCRIBER_ID = ? AND (PSH_ARCHIVED) = ?
Argument(s): |MBIP|1003411985|N|
20230324: 170901     DEBUG  6368[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@11028347
20230324: 170901     DEBUG  6423[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getPshPsdServices|0|NONE|

20230324: 170901     DEBUG  6671[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getPshPsdServices
Execute SQL Statement: SELECT * FROM psh_param_serv_hdr, psd_param_serv_det WHERE psd_psh_id = ? AND psh_id = psd_psh_id AND psd_param_active = 'Y' 
Argument(s): |23449756|
20230324: 170901     DEBUG  6675[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@77468bd9
20230324: 170901     DEBUG  6739[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 170901     DEBUG  6740[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 170901     DEBUG  6740[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 170901     DEBUG  6741[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 170901     DEBUG  6793[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |CHGVARPARM|MBSIP|
20230324: 170901     ERROR  6897[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: CHGVARPARM and type: MBSIP
20230324: 170901     DEBUG  6898[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getChgNetId|0|NONE|

20230324: 170902     DEBUG  7078[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getChgNetId
Execute SQL Statement: SELECT chg_netid FROM chg_charges WHERE chg_code = ? ORDER BY chg_effective_date DESC
Argument(s): |MBBIP|
20230324: 170902     DEBUG  7079[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@61064425
20230324: 170902     DEBUG  7306[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: MBBIP
String netId: M1   
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170902     DEBUG  7307[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: MBBIP
20230324: 170902     DEBUG  7311[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170902     DEBUG  7312[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getChgChargesDAC(BaseAbstractDACFactory.java:578) - getChgChargesDAC()
20230324: 170902     DEBUG  7326[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.ChgChargesDACImpl com.eppixcomm.eppix.base.dml.ChgChargesDMLFactory@2e5c649
20230324: 170902     DEBUG  7327[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.ChgChargesDACImpl
20230324: 170902     DEBUG  7331[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 170902     DEBUG  7333[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.ChgChargesDACImpl TO MAP
20230324: 170902     DEBUG  7334[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170902     DEBUG  7335[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170902     DEBUG  7336[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170902     DEBUG  7516[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |MBBIP|M1   |2023-03-24|F|
20230324: 170902     DEBUG  7587[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2022-08-10
20230324: 170902     DEBUG  7588[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2022-08-10
20230324: 170902     DEBUG  7589[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170902     DEBUG  7589[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170902     DEBUG  7590[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170902     DEBUG  7591[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170902     DEBUG  7753[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |MBBIP|M1   |2022-08-10|F|
20230324: 170902     DEBUG  7758[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2ff5659e
20230324: 170902     DEBUG  7879[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@161cd475
20230324: 170902     DEBUG  7879[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 170902     DEBUG  7880[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 170902     DEBUG  7880[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 170902     DEBUG  7881[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 170903     DEBUG  7936[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|PENB|
20230324: 170903     ERROR  8255[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: PENB
20230324: 170903     DEBUG  8256[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 170903     DEBUG  8256[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 170903     DEBUG  8297[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |PENB|1003411985|
20230324: 170903     DEBUG  8299[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@27ddd392
20230324: 170903     DEBUG  8496[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7cef4e59
20230324: 170903     DEBUG  8497[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 170903     DEBUG  8497[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 170903     DEBUG  8498[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 170903     DEBUG  8498[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 170903     DEBUG  8579[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|SPUL|
20230324: 170903     ERROR  8755[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: SPUL
20230324: 170903     DEBUG  8755[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 170903     DEBUG  8756[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 170903     DEBUG  8886[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |SPUL|1003411985|
20230324: 170903     DEBUG  8887[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@16b4a017
20230324: 170904     DEBUG  8964[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2a3046da
20230324: 170904     DEBUG  8965[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 170904     DEBUG  8965[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 170904     DEBUG  8966[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 170904     DEBUG  8966[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 170904     DEBUG  9185[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|SUB |
20230324: 170904     ERROR  9458[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: SUB 
20230324: 170904     DEBUG  9459[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 170904     DEBUG  9460[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 170904     DEBUG  9499[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |SUB |1003411985|
20230324: 170904     DEBUG  9499[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@59690aa4
20230324: 170904     DEBUG  9620[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@574caa3f
20230324: 170904     DEBUG  9841[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230324: 170904     DEBUG  9841[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230324: 170904     DEBUG  9842[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230324: 170904     DEBUG  9842[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230324: 170905     DEBUG  9928[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|VPNA|
20230324: 170906     ERROR 11247[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: VPNA
20230324: 170906     DEBUG 11247[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230324: 170906     DEBUG 11248[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230324: 170906     DEBUG 11272[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |VPNA|1003411985|
20230324: 170906     DEBUG 11272[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2280cdac
20230324: 170906     DEBUG 11455[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BlhBillLimitHd )
20230324: 170906     DEBUG 11458[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getBlhBillLimitHdDAC(BaseAbstractDACFactory.java:930) - getBlhBillLimitHdDAC()
20230324: 170906     DEBUG 11473[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl com.eppixcomm.eppix.base.dml.BlhBillLimitHdDMLFactory@60215eee
20230324: 170906     DEBUG 11473[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl
20230324: 170906     DEBUG 11478[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 170906     DEBUG 11479[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl TO MAP
20230324: 170906     DEBUG 11479[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractBLO.get(BlhBillLimitHdAbstractBLO.java:264) - get( filter )
20230324: 170906     DEBUG 11480[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractDACImpl.get(BlhBillLimitHdAbstractDACImpl.java:98) - get( filter )
20230324: 170906     DEBUG 11482[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BlhBillLimitHd|0|equalBlhSubscriberId+equalBlhServiceCode|

20230324: 170906     DEBUG 11655[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BlhBillLimitHd
Execute SQL Statement: SELECT BLH_SUBSCRIBER_ID, BLH_SERVICE_CODE, BLH_BILL_LIMIT_VAL, BLH_LEVEL,BLH_TYPE, BLH_VAT_IND, BLH_UNBILL_USAGE, BLH_UNBILL_CHARGES, BLH_DIFF,BLH_USER_STATUS, BLH_NEXT_THRESHOLD, BLH_PREV_THRESHOLD, BLH_NEXT_ACN_ID,BLH_PREV_ACN_ID, BLH_NETWORK_ACN, BLH_TRIG_FLAG, BLH_LAST_UPDATE
FROM BLH_BILL_LIMIT_HD
WHERE BLH_SUBSCRIBER_ID = ? AND BLH_SERVICE_CODE = ?
Argument(s): |1003411985|SPUL|
20230324: 170906     DEBUG 11661[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5479e3f
20230324: 170906     DEBUG 11740[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BlhBillLimitHd )
20230324: 170906     DEBUG 11741[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractBLO.get(BlhBillLimitHdAbstractBLO.java:264) - get( filter )
20230324: 170906     DEBUG 11741[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractDACImpl.get(BlhBillLimitHdAbstractDACImpl.java:98) - get( filter )
20230324: 170906     DEBUG 11742[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BlhBillLimitHd|0|equalBlhSubscriberId+equalBlhServiceCode|

20230324: 170906     DEBUG 11802[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BlhBillLimitHd
Execute SQL Statement: SELECT BLH_SUBSCRIBER_ID, BLH_SERVICE_CODE, BLH_BILL_LIMIT_VAL, BLH_LEVEL,BLH_TYPE, BLH_VAT_IND, BLH_UNBILL_USAGE, BLH_UNBILL_CHARGES, BLH_DIFF,BLH_USER_STATUS, BLH_NEXT_THRESHOLD, BLH_PREV_THRESHOLD, BLH_NEXT_ACN_ID,BLH_PREV_ACN_ID, BLH_NETWORK_ACN, BLH_TRIG_FLAG, BLH_LAST_UPDATE
FROM BLH_BILL_LIMIT_HD
WHERE BLH_SUBSCRIBER_ID = ? AND BLH_SERVICE_CODE = ?
Argument(s): |1003411985|SUL|
20230324: 170906     ERROR 11891[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5888) - Failed to get Bill Limits for subscriber: 1003411985 and service code: SUL
20230324: 170906     ERROR 11893[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5904) - Exception getting Bill Limits for subscriber: 1003411985 and service code: SUL EXCEPTION: com.eppixcomm.eppix.base.error.EPPIXSeriousException: Failed to get Bill Limits for subscriber: 1003411985 and service code: SUL
20230324: 170906     ERROR 11894[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1007) - Exception getting Bill Limits for subscriber: 1003411985 and service code: SUL EXCEPTION: com.eppixcomm.eppix.base.error.EPPIXSeriousException: Failed to get Bill Limits for subscriber: 1003411985 and service code: SUL
20230324: 170906     ERROR 11895[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1030) - 
CREDIT LIMIT: 578437.20
TOTAL CHARGES: 46169.73
TOTAL SUL320.00
20230324: 170906     ERROR 11895[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1054) - 
TOTAL SUL WITHOUT CURRENT SUL: 320.00
AFTER CREDIT LIMIT: 578437.20
TOTAL CHARGES: 46169.73TOTAL SUL: 320.00
PARAM CHARGES: 0.00
20230324: 170906     DEBUG 11898[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SksKeySetting )
20230324: 170906     DEBUG 11899[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSksKeySettingDAC(BaseAbstractDACFactory.java:314) - getSksKeySettingDAC()
20230324: 170906     DEBUG 11906[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl com.eppixcomm.eppix.base.dml.SksKeySettingAbstractDMLFactory@4f4a7090
20230324: 170906     DEBUG 11906[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl
20230324: 170906     DEBUG 11909[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 170906     DEBUG 11910[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl TO MAP
20230324: 170906     DEBUG 11911[main] - com.eppixcomm.eppix.base.blo.SksKeySettingAbstractBLO.get(SksKeySettingAbstractBLO.java:500) - get( filter )
20230324: 170906     DEBUG 11912[main] - com.eppixcomm.eppix.base.blo.SksKeySettingAbstractDACImpl.get(SksKeySettingAbstractDACImpl.java:420) - get( filter )
20230324: 170906     DEBUG 11913[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
SksKeySetting|0|equalSksKeyCode|

20230324: 170907     DEBUG 12043[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SksKeySetting
Execute SQL Statement: SELECT SKS_KEY_CODE, SKS_VALUE, SKS_COMMENT, SKS_TIMESTAMP
FROM SKS_KEY_SETTING
WHERE (SKS_KEY_CODE) = ?
Argument(s): |ALFTURNONO|
20230324: 170907     DEBUG 12044[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1ef7fe8e
20230324: 170907     DEBUG 12111[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.Sysdirm )
20230324: 170907     DEBUG 12112[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSysdirmDAC(BaseAbstractDACFactory.java:327) - getSysdirmDAC()
20230324: 170907     DEBUG 12118[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SysdirmDACImpl com.eppixcomm.eppix.base.dml.SysdirmAbstractDMLFactory@2471cca7
20230324: 170907     DEBUG 12119[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SysdirmDACImpl
20230324: 170907     DEBUG 12122[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 170907     DEBUG 12122[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SysdirmDACImpl TO MAP
20230324: 170907     DEBUG 12123[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractBLO.get(SysdirmAbstractBLO.java:501) - get( filter )
20230324: 170907     DEBUG 12124[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractDACImpl.get(SysdirmAbstractDACImpl.java:435) - get( filter )
20230324: 170907     DEBUG 12125[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
Sysdirm|0|equalSystemKey|

20230324: 170907     DEBUG 12238[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: Sysdirm
Execute SQL Statement: SELECT SYSTEM_KEY, KEY_VALUE, DESCRIPTION
FROM SYSDIRM
WHERE (SYSTEM_KEY) = ?
Argument(s): |OPVATCODE|
20230324: 170907     DEBUG 12239[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@31b7dea0
20230324: 170907     DEBUG 12321[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVatPercentageByCode
20230324: 170907     DEBUG 12322[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVatPercentageByCode|0||

20230324: 170907     DEBUG 12479[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVatPercentageByCode
Execute SQL Statement: SELECT percentage FROM cevatm WHERE vat_code = ? 
Argument(s): |VST|
20230324: 170907     DEBUG 12480[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3930015a
20230324: 170907     DEBUG 12596[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BcyBillingCycle )
20230324: 170907     DEBUG 12597[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getBcyBillingCycleDAC(BaseAbstractDACFactory.java:550) - getBcyBillingCycleDAC()
20230324: 170907     DEBUG 12607[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.BcyBillingCycleDACImpl com.eppixcomm.eppix.base.dml.BcyBillingCycleDMLFactory@387c703b
20230324: 170907     DEBUG 12608[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.BcyBillingCycleDACImpl
20230324: 170907     DEBUG 12611[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 170907     DEBUG 12612[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.BcyBillingCycleDACImpl TO MAP
20230324: 170907     DEBUG 12612[main] - com.eppixcomm.eppix.base.blo.BcyBillingCycleAbstractBLO.get(BcyBillingCycleAbstractBLO.java:587) - get( filter )
20230324: 170907     DEBUG 12613[main] - com.eppixcomm.eppix.base.blo.BcyBillingCycleAbstractDACImpl.get(BcyBillingCycleAbstractDACImpl.java:492) - get( filter )
20230324: 170907     DEBUG 12614[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BcyBillingCycle|0|equalBcyBillCycle|

20230324: 170907     DEBUG 12772[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BcyBillingCycle
Execute SQL Statement: SELECT BCY_BILL_CYCLE, BCY_DESCRIPTION, BCY_PERIOD, BCY_FREQUENCY, BCY_DAY_OF_RUN, BCY_NEXT_RUN, BCY_SUSPENDED, BCY_USE_STATUS, BCY_NEXT_CALL_RUN, BCY_IN_ADVANCE
FROM BCY_BILLING_CYCLE
WHERE BCY_BILL_CYCLE = ?
Argument(s): |CYC95|
20230324: 170907     DEBUG 12773[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@282ba1e
20230324: 170907     DEBUG 12838[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10040) - 
billTable=bill_CYC9520230205
20230324: 170907     DEBUG 12841[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.CrbaCustRiskAux )
20230324: 170907     DEBUG 12842[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getCrbaCustRiskAuxDAC(BaseAbstractDACFactory.java:1601) - getCrbaCustRiskAuxDAC()
20230324: 170907     DEBUG 12851[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxDACImpl com.eppixcomm.eppix.base.dml.CrbaCustRiskAuxDMLFactory@3ecf72fd
20230324: 170907     DEBUG 12852[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxDACImpl
20230324: 170907     DEBUG 12858[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 170907     DEBUG 12859[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxDACImpl TO MAP
20230324: 170907     DEBUG 12859[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractBLO.get(CrbaCustRiskAuxAbstractBLO.java:270) - get( filter )
20230324: 170907     DEBUG 12859[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractDACImpl.get(CrbaCustRiskAuxAbstractDACImpl.java:322) - get( filter )
20230324: 170907     DEBUG 12860[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
CrbaCustRiskAux|0|equalcrbaBillAcNo|

20230324: 170908     DEBUG 13093[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: CrbaCustRiskAux
Execute SQL Statement: SELECT CRBA_BILL_AC_NO, CRBA_ACC_DISC_VAL, CRBA_AUX_FLOAT_1, CRBA_AUX_FLOAT_2, CRBA_AUX_FLOAT_3, CRBA_AUX_INT_1, CRBA_AUX_INT_2, CRBA_AUX_INT_3, CRBA_AUX_CHAR_1, CRBA_AUX_CHAR_2, CRBA_AUX_CHAR_3, CRBA_AUX_DATE_1, CRBA_AUX_DATE_2, CRBA_AUX_DATE_3
FROM crba_cust_risk_aux
WHERE CRBA_BILL_AC_NO = ? 
Argument(s): |A5085810|
20230324: 170908     DEBUG 13096[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4b6995df
20230324: 170908     DEBUG 13197[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.CrbCustRiskBal )
20230324: 170908     DEBUG 13199[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getCrbCustRiskBalDAC(BaseAbstractDACFactory.java:943) - getCrbCustRiskBalDAC()
20230324: 170908     DEBUG 13210[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.CrbCustRiskBalDACImpl com.eppixcomm.eppix.base.dml.CrbCustRiskBalDMLFactory@61443d8f
20230324: 170908     DEBUG 13211[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbCustRiskBalDACImpl
20230324: 170908     DEBUG 13214[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 170908     DEBUG 13215[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbCustRiskBalDACImpl TO MAP
20230324: 170908     DEBUG 13215[main] - com.eppixcomm.eppix.base.blo.CrbCustRiskBalAbstractBLO.get(CrbCustRiskBalAbstractBLO.java:256) - get( filter )
20230324: 170908     DEBUG 13216[main] - com.eppixcomm.eppix.base.blo.CrbCustRiskBalAbstractDACImpl.get(CrbCustRiskBalAbstractDACImpl.java:96) - get( filter )
20230324: 170908     DEBUG 13217[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
crbCustRiskBal|0|equalCrbBillAcNo|

20230324: 170908     DEBUG 13395[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: crbCustRiskBal
Execute SQL Statement: SELECT CRB_BILL_AC_NO, CRB_ACCOUNT_TYPE, CRB_CREDIT_LIMIT, CRB_ACC_BAL, CRB_UNBILL_CHARGES, CRB_UNBILL_CALLS, CRB_DIFF, CRB_NEXT_THRESHOLD, CRB_PREV_THRESHOLD, CRB_COLL_PLAN, CRB_MIN_THRESHOLD, CRB_ACTIVATE_FLAG, CRB_EAP_FLAG, CRB_BL_STATUS, CRB_BL_TYPE, CRB_BL_LIMIT, CRB_BL_DIFF, CRB_BL_NEXT_THRESH, CRB_BL_PREV_THRESH, CRB_BL_NEXT_ACN_ID, CRB_BL_PREV_ACN_ID, CRB_BL_TRIG_FLAG, CRB_BL_LAST_UPDATE
FROM CRB_CUST_RISK_BAL
WHERE CRB_BILL_AC_NO = ?
Argument(s): |A5085810|
20230324: 170908     DEBUG 13404[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3aa9e816
20230324: 170908     DEBUG 13489[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10087) - 
Select sbd_subscriber_id, start_period, sparech, chaserv, charge from sbd_sub_dets, vam_active_msisdn, bill_CYC9520230205 WHERE subscriber_id = sbd_subscriber_id AND subscriber_id =  vam_subscriber_id  AND handset =  vam_msisdn_no  AND sparech[1,3] != 'CCC'  AND charge > 0   AND sbd_bill_ac_no = 'A5085810'
20230324: 170911     DEBUG 16610[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31060221
chaserv: OTGR
charge: 17.3900000000000005684341886080801486968994140625
20230324: 170911     DEBUG 16611[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230324: 170911     DEBUG 16612[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230324: 170911     DEBUG 16612[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230324: 170911     DEBUG 16615[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230324: 170911     DEBUG 16616[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getVcfVrbleChrgFeeDAC(BaseAbstractDACFactory.java:1477) - getVcfVrbleChrgFeeDAC()
20230324: 170911     DEBUG 16627[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeDACImpl com.eppixcomm.eppix.base.dml.VcfVrbleChrgFeeDMLFactory@7907ec20
20230324: 170911     DEBUG 16628[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeDACImpl
20230324: 170911     DEBUG 16631[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230324: 170911     DEBUG 16632[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeDACImpl TO MAP
20230324: 170911     DEBUG 16632[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230324: 170911     DEBUG 16633[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230324: 170911     DEBUG 16633[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230324: 170912     DEBUG 16939[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230324: 170912     DEBUG 17065[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230324: 170912     DEBUG 17066[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31060267
chaserv: OTGR
charge: 117.3900000000000005684341886080801486968994140625
20230324: 170912     DEBUG 17067[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230324: 170912     DEBUG 17067[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230324: 170912     DEBUG 17068[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230324: 170912     DEBUG 17069[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230324: 170912     DEBUG 17070[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230324: 170912     DEBUG 17070[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230324: 170912     DEBUG 17070[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230324: 170912     DEBUG 17229[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230324: 170912     DEBUG 17262[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230324: 170912     DEBUG 17263[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31064291
chaserv: OTGR
charge: 33.909999999999996589394868351519107818603515625
20230324: 170912     DEBUG 17264[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230324: 170912     DEBUG 17264[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230324: 170912     DEBUG 17264[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230324: 170912     DEBUG 17265[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230324: 170912     DEBUG 17265[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230324: 170912     DEBUG 17266[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230324: 170912     DEBUG 17266[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230324: 170912     DEBUG 17294[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230324: 170912     DEBUG 17699[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230324: 170912     DEBUG 17700[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31064292
chaserv: OTGR
charge: 33.909999999999996589394868351519107818603515625
20230324: 170912     DEBUG 17700[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230324: 170912     DEBUG 17701[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230324: 170912     DEBUG 17701[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230324: 170912     DEBUG 17702[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230324: 170912     DEBUG 17702[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230324: 170912     DEBUG 17702[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230324: 170912     DEBUG 17703[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230324: 170912     DEBUG 17762[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230324: 170912     DEBUG 17802[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230324: 170912     DEBUG 17804[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000287625
start_period: 2023-01-09
sparech: CFF             BSWA      VS1R
chaserv: EVS5R
charge: 120.4200000000000017053025658242404460906982421875
20230324: 170912     DEBUG 17804[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFF
20230324: 170912     DEBUG 17805[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-09 bcyDMO.getBcyNextRun: 2023-02-05
20230324: 170912     DEBUG 17806[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFF
20230324: 170912     DEBUG 17807[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230324: 170912     DEBUG 17807[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230324: 170912     DEBUG 17808[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230324: 170912     DEBUG 17808[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230324: 170912     DEBUG 17839[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |EVS5R|1000287625|A5085810|A|
20230324: 170912     DEBUG 17867[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR EVS5R COUNT:  0
20230324: 170912     DEBUG 17868[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 120.4200000000000017053025658242404460906982421875
20230324: 170912     DEBUG 17869[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA CUGCHG           619420822
chaserv: ESMCC
charge: 48.59999847412109375
20230324: 170912     DEBUG 17869[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230324: 170912     DEBUG 17870[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230324: 170912     DEBUG 17870[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230324: 170912     DEBUG 17870[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230324: 170912     DEBUG 17871[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230324: 170912     DEBUG 17871[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230324: 170912     DEBUG 17871[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230324: 170913     DEBUG 17994[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCC|1000740188|A5085810|A|
20230324: 170913     DEBUG 18060[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCC COUNT:  0
20230324: 170913     DEBUG 18061[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 48.59999847412109375
20230324: 170913     DEBUG 18061[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA DATACHG           61942082
chaserv: ESMCD
charge: 25.5
20230324: 170913     DEBUG 18061[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230324: 170913     DEBUG 18061[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230324: 170913     DEBUG 18062[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230324: 170913     DEBUG 18062[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230324: 170913     DEBUG 18062[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230324: 170913     DEBUG 18063[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230324: 170913     DEBUG 18063[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230324: 170913     DEBUG 18289[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCD|1000740188|A5085810|A|
20230324: 170913     DEBUG 18342[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCD COUNT:  0
20230324: 170913     DEBUG 18342[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 25.5
20230324: 170913     DEBUG 18342[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA SMSCHG           -49820895
chaserv: ESMCS
charge: 34.5
20230324: 170913     DEBUG 18342[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230324: 170913     DEBUG 18342[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230324: 170913     DEBUG 18342[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230324: 170913     DEBUG 18343[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230324: 170913     DEBUG 18343[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230324: 170913     DEBUG 18343[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230324: 170913     DEBUG 18343[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230324: 170913     DEBUG 18428[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCS|1000740188|A5085810|A|
20230324: 170913     DEBUG 18479[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCS COUNT:  0
20230324: 170913     DEBUG 18479[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 34.5
20230324: 170913     DEBUG 18480[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA VOICECHG           6194208
chaserv: ESMCV
charge: 243
20230324: 170913     DEBUG 18480[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230324: 170913     DEBUG 18480[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230324: 170913     DEBUG 18480[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230324: 170913     DEBUG 18480[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230324: 170913     DEBUG 18481[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230324: 170913     DEBUG 18481[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230324: 170913     DEBUG 18481[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230324: 170913     DEBUG 18588[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCV|1000740188|A5085810|A|
20230324: 170913     DEBUG 18827[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCV COUNT:  0
20230324: 170913     DEBUG 18828[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 243
20230324: 170913     DEBUG 18829[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA ESPRCHG           61942082
chaserv: ESOBD
charge: 7750.81005859375
20230324: 170913     DEBUG 18829[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230324: 170913     DEBUG 18829[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230324: 170913     DEBUG 18830[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230324: 170913     DEBUG 18831[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230324: 170913     DEBUG 18831[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230324: 170913     DEBUG 18831[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230324: 170913     DEBUG 18832[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230324: 170914     DEBUG 18937[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESOBD|1000740188|A5085810|A|
20230324: 170914     DEBUG 19000[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESOBD COUNT:  0
20230324: 170914     DEBUG 19001[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 7750.81005859375
20230324: 170914     DEBUG 19001[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA ESPRCHG           61942082
chaserv: ESOBV
charge: 632.6099853515625
20230324: 170914     DEBUG 19002[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230324: 170914     DEBUG 19002[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230324: 170914     DEBUG 19002[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230324: 170914     DEBUG 19003[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230324: 170914     DEBUG 19003[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230324: 170914     DEBUG 19004[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230324: 170914     DEBUG 19004[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230324: 170914     DEBUG 19035[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESOBV|1000740188|A5085810|A|
20230324: 170914     DEBUG 19082[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESOBV COUNT:  0
20230324: 170914     DEBUG 19083[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 632.6099853515625
20230324: 170914     DEBUG 19084[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1001769643
start_period: 2023-02-05
sparech: CFA SVRCHG         31064290
chaserv: OTGR
charge: 51.2999999999999971578290569595992565155029296875
20230324: 170914     DEBUG 19084[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230324: 170914     DEBUG 19085[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230324: 170914     DEBUG 19085[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230324: 170914     DEBUG 19085[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230324: 170914     DEBUG 19086[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230324: 170914     DEBUG 19086[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230324: 170914     DEBUG 19086[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230324: 170914     DEBUG 19155[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|1001769643|A5085810|A|
20230324: 170916     DEBUG 21707[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  1
20230324: 170916     DEBUG 21708[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1003400281
start_period: 2023-01-20
sparech: CFF             BUDA      UCWD
chaserv: UCPWD
charge: 122.0799999999999982946974341757595539093017578125
20230324: 170916     DEBUG 21709[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFF
20230324: 170916     DEBUG 21709[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-20 bcyDMO.getBcyNextRun: 2023-02-05
20230324: 170916     DEBUG 21709[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFF
20230324: 170916     DEBUG 21710[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230324: 170916     DEBUG 21710[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230324: 170916     DEBUG 21710[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230324: 170916     DEBUG 21710[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230324: 170916     DEBUG 21878[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |UCPWD|1003400281|A5085810|A|
20230324: 170917     DEBUG 21969[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR UCPWD COUNT:  0
20230324: 170917     DEBUG 21971[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 122.0799999999999982946974341757595539093017578125
20230324: 170917     DEBUG 22056[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10193) - 
otherCharges: 8977.5200424194335937500000000000000000000000000000
20230324: 170917     DEBUG 22057[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10197) - 
Before VAT unbilledCharges: 35617.1099575805637869052588939666748046875000000000
20230324: 170917     DEBUG 22058[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10201) - 
UNBILLED CHARGES + VAT: 40959.676451217648354941047728061676025390625000000000
20230324: 170917     DEBUG 22060[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1106) - 
TOTAL MAX ALLOWED: 537477.52
20230324: 170917     DEBUG 22060[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSpulByAccount
20230324: 170917     DEBUG 22060[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSpulByAccount|0||

20230324: 170918     DEBUG 22927[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSpulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SPUL' AND sbd_bill_ac_no = ? 
Argument(s): |A5085810|
20230324: 170918     DEBUG 22928[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4e04a765
20230324: 170918     DEBUG 23178[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.CrbaCustRiskAux )
20230324: 170918     DEBUG 23179[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractBLO.get(CrbaCustRiskAuxAbstractBLO.java:270) - get( filter )
20230324: 170918     DEBUG 23179[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractDACImpl.get(CrbaCustRiskAuxAbstractDACImpl.java:322) - get( filter )
20230324: 170918     DEBUG 23179[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
CrbaCustRiskAux|0|equalcrbaBillAcNo|

20230324: 170918     DEBUG 23235[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: CrbaCustRiskAux
Execute SQL Statement: SELECT CRBA_BILL_AC_NO, CRBA_ACC_DISC_VAL, CRBA_AUX_FLOAT_1, CRBA_AUX_FLOAT_2, CRBA_AUX_FLOAT_3, CRBA_AUX_INT_1, CRBA_AUX_INT_2, CRBA_AUX_INT_3, CRBA_AUX_CHAR_1, CRBA_AUX_CHAR_2, CRBA_AUX_CHAR_3, CRBA_AUX_DATE_1, CRBA_AUX_DATE_2, CRBA_AUX_DATE_3
FROM crba_cust_risk_aux
WHERE CRBA_BILL_AC_NO = ? 
Argument(s): |A5085810|
20230324: 170918     DEBUG 23236[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@246ae04d
20230324: 170918     DEBUG 23408[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSulByAccount
20230324: 170918     DEBUG 23408[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSulByAccount|0||

20230324: 170918     DEBUG 23476[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SUL' AND sbd_bill_ac_no = ? 
Argument(s): |A5085810|
20230324: 170918     DEBUG 23477[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1e67b872
20230324: 170918     DEBUG 23616[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getTsServiceBySubscriber|0|NONE|

20230324: 170921     DEBUG 26803[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getTsServiceBySubscriber
Execute SQL Statement:  select * from ts_tariff_service  where ts_service_code  in  (select vas_service_code from vas_active_service  where vas_subscriber_id in   (select sbd_subscriber_id from sbd_sub_dets  where sbd_bill_ac_no = ?))  and ts_package_code =  ?  and ts_internal_tariff = ?  and (ts_sub_charge1 <> '' ) 
Argument(s): |A5085810|M4BDS|YT_34|
20230324: 170921     DEBUG 26806[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6fb554cc
20230324: 170921     DEBUG 26807[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: AR100
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170921     DEBUG 26807[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: AR100
20230324: 170921     DEBUG 26807[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170921     DEBUG 26808[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170921     DEBUG 26808[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170921     DEBUG 26808[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170921     DEBUG 26848[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |AR100|M1|2023-03-24|F|
20230324: 170921     DEBUG 26902[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-04-04
20230324: 170921     DEBUG 26902[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-04-04
20230324: 170921     DEBUG 26903[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170921     DEBUG 26903[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170921     DEBUG 26904[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170921     DEBUG 26905[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170922     DEBUG 26929[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |AR100|M1|2018-04-04|F|
20230324: 170922     DEBUG 26932[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3a03464
20230324: 170922     DEBUG 27000[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@617c74e5
20230324: 170922     DEBUG 27001[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: AR50
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170922     DEBUG 27001[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: AR50
20230324: 170922     DEBUG 27001[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170922     DEBUG 27002[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170922     DEBUG 27002[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170922     DEBUG 27002[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170922     DEBUG 27088[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |AR50|M1|2023-03-24|F|
20230324: 170922     DEBUG 27144[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-07-26
20230324: 170922     DEBUG 27145[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-07-26
20230324: 170922     DEBUG 27145[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170922     DEBUG 27145[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170922     DEBUG 27146[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170922     DEBUG 27146[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170922     DEBUG 27190[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |AR50|M1|2018-07-26|F|
20230324: 170922     DEBUG 27191[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2c9f9fb0
20230324: 170922     DEBUG 27241[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@9f70c54
20230324: 170922     DEBUG 27242[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: AR500
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170922     DEBUG 27242[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: AR500
20230324: 170922     DEBUG 27242[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170922     DEBUG 27243[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170922     DEBUG 27243[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170922     DEBUG 27244[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170922     DEBUG 27275[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |AR500|M1|2023-03-24|F|
20230324: 170922     DEBUG 27304[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-04-04
20230324: 170922     DEBUG 27306[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-04-04
20230324: 170922     DEBUG 27306[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170922     DEBUG 27307[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170922     DEBUG 27307[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170922     DEBUG 27308[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170922     DEBUG 27343[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |AR500|M1|2018-04-04|F|
20230324: 170922     DEBUG 27344[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@337d0578
20230324: 170922     DEBUG 27425[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@61a485d2
20230324: 170922     DEBUG 27426[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: BDB01
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170922     DEBUG 27426[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: BDB01
20230324: 170922     DEBUG 27427[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170922     DEBUG 27427[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170922     DEBUG 27428[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170922     DEBUG 27428[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170922     DEBUG 27451[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |BDB01|M1|2023-03-24|F|
20230324: 170922     DEBUG 27485[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-15
20230324: 170922     DEBUG 27486[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-15
20230324: 170922     DEBUG 27486[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170922     DEBUG 27486[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170922     DEBUG 27487[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170922     DEBUG 27487[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170922     DEBUG 27537[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |BDB01|M1|2018-05-15|F|
20230324: 170922     DEBUG 27539[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6a024a67
20230324: 170922     DEBUG 27630[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@174d20a
20230324: 170922     DEBUG 27631[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: M4BDS
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170922     DEBUG 27631[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: M4BDS
20230324: 170922     DEBUG 27631[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170922     DEBUG 27632[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170922     DEBUG 27632[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170922     DEBUG 27632[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170922     DEBUG 27687[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |M4BDS|M1|2023-03-24|F|
20230324: 170922     DEBUG 27761[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2021-11-22
20230324: 170922     DEBUG 27762[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2021-11-22
20230324: 170922     DEBUG 27763[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170922     DEBUG 27763[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170922     DEBUG 27763[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170922     DEBUG 27764[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170922     DEBUG 27813[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |M4BDS|M1|2021-11-22|F|
20230324: 170922     DEBUG 27814[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5f375618
20230324: 170922     DEBUG 27891[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@32d992b2
20230324: 170922     DEBUG 27892[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: BVB02
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170922     DEBUG 27892[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: BVB02
20230324: 170922     DEBUG 27893[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170922     DEBUG 27893[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170922     DEBUG 27893[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170922     DEBUG 27894[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170922     DEBUG 27915[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |BVB02|M1|2023-03-24|F|
20230324: 170923     DEBUG 27952[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-15
20230324: 170923     DEBUG 27953[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-15
20230324: 170923     DEBUG 27953[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170923     DEBUG 27953[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170923     DEBUG 27954[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170923     DEBUG 27954[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170923     DEBUG 27978[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |BVB02|M1|2018-05-15|F|
20230324: 170923     DEBUG 27980[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@51081592
20230324: 170923     DEBUG 28039[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@9629756
20230324: 170923     DEBUG 28040[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: C20G
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170923     DEBUG 28041[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: C20G
20230324: 170923     DEBUG 28042[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170923     DEBUG 28042[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170923     DEBUG 28042[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170923     DEBUG 28043[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170923     DEBUG 28065[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |C20G|M1|2023-03-24|F|
20230324: 170923     DEBUG 28099[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-11
20230324: 170923     DEBUG 28100[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-11
20230324: 170923     DEBUG 28100[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170923     DEBUG 28101[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170923     DEBUG 28101[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170923     DEBUG 28101[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170923     DEBUG 28123[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |C20G|M1|2018-05-11|F|
20230324: 170923     DEBUG 28125[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@28feb3fa
20230324: 170923     DEBUG 28235[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@51565ec2
20230324: 170923     DEBUG 28236[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: CL
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170923     DEBUG 28237[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: CL
20230324: 170923     DEBUG 28237[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170923     DEBUG 28238[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170923     DEBUG 28238[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170923     DEBUG 28238[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170923     DEBUG 28278[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |CL|M1|2023-03-24|F|
20230324: 170923     DEBUG 28310[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2019-05-25
20230324: 170923     DEBUG 28310[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2019-05-25
20230324: 170923     DEBUG 28311[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170923     DEBUG 28311[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170923     DEBUG 28312[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170923     DEBUG 28312[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170923     DEBUG 28350[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |CL|M1|2019-05-25|F|
20230324: 170923     DEBUG 28352[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@8bd1b6a
20230324: 170923     DEBUG 28425[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@cb5822
20230324: 170923     DEBUG 28426[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: CUGR6
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170923     DEBUG 28426[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: CUGR6
20230324: 170923     DEBUG 28427[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170923     DEBUG 28427[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170923     DEBUG 28427[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170923     DEBUG 28427[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170923     DEBUG 28473[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |CUGR6|M1|2023-03-24|F|
20230324: 170923     DEBUG 28528[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2019-04-29
20230324: 170923     DEBUG 28529[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2019-04-29
20230324: 170923     DEBUG 28530[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170923     DEBUG 28530[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170923     DEBUG 28531[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170923     DEBUG 28531[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170923     DEBUG 28563[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |CUGR6|M1|2019-04-29|F|
20230324: 170923     DEBUG 28563[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@61832929
20230324: 170923     DEBUG 28624[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3ffc5af1
20230324: 170923     DEBUG 28624[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: DBR
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170923     DEBUG 28624[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: DBR
20230324: 170923     DEBUG 28625[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170923     DEBUG 28625[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170923     DEBUG 28625[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170923     DEBUG 28625[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170923     DEBUG 28681[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |DBR|M1|2023-03-24|F|
20230324: 170923     DEBUG 28734[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-10-14
20230324: 170923     DEBUG 28734[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-10-14
20230324: 170923     DEBUG 28735[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170923     DEBUG 28735[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170923     DEBUG 28735[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170923     DEBUG 28736[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170923     DEBUG 28787[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |DBR|M1|2018-10-14|F|
20230324: 170923     DEBUG 28788[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1bce4f0a
20230324: 170923     DEBUG 28845[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5c3bd550
20230324: 170923     DEBUG 28846[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: DBR1
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170923     DEBUG 28846[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: DBR1
20230324: 170923     DEBUG 28847[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170923     DEBUG 28848[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170923     DEBUG 28848[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170923     DEBUG 28848[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170923     DEBUG 28888[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |DBR1|M1|2023-03-24|F|
20230324: 170923     DEBUG 28925[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-11
20230324: 170924     DEBUG 28926[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-11
20230324: 170924     DEBUG 28926[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170924     DEBUG 28926[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170924     DEBUG 28927[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170924     DEBUG 28928[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170924     DEBUG 28963[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |DBR1|M1|2018-05-11|F|
20230324: 170924     DEBUG 28965[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@343f4d3d
20230324: 170924     DEBUG 29052[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5442a311
20230324: 170924     DEBUG 29053[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: DR5M
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170924     DEBUG 29053[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: DR5M
20230324: 170924     DEBUG 29053[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170924     DEBUG 29054[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170924     DEBUG 29054[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170924     DEBUG 29055[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170924     DEBUG 29093[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |DR5M|M1|2023-03-24|F|
20230324: 170924     DEBUG 29121[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-15
20230324: 170924     DEBUG 29121[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-15
20230324: 170924     DEBUG 29121[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170924     DEBUG 29121[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170924     DEBUG 29121[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170924     DEBUG 29121[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170924     DEBUG 29143[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |DR5M|M1|2018-05-15|F|
20230324: 170924     DEBUG 29144[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@57fffcd7
20230324: 170924     DEBUG 29202[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@598067a5
20230324: 170924     DEBUG 29202[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: ERR
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170924     DEBUG 29202[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: ERR
20230324: 170924     DEBUG 29202[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170924     DEBUG 29202[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170924     DEBUG 29203[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170924     DEBUG 29203[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170924     DEBUG 29240[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |ERR|M1|2023-03-24|F|
20230324: 170924     DEBUG 29267[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2020-12-14
20230324: 170924     DEBUG 29267[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2020-12-14
20230324: 170924     DEBUG 29267[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170924     DEBUG 29268[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170924     DEBUG 29268[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170924     DEBUG 29268[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170924     DEBUG 29303[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |ERR|M1|2020-12-14|F|
20230324: 170924     DEBUG 29304[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7085bdee
20230324: 170924     DEBUG 29417[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5700d6b1
20230324: 170924     DEBUG 29417[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: LTE
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170924     DEBUG 29417[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: LTE
20230324: 170924     DEBUG 29418[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170924     DEBUG 29418[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170924     DEBUG 29418[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170924     DEBUG 29419[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170924     DEBUG 29454[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |LTE|M1|2023-03-24|F|
20230324: 170924     DEBUG 29491[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2013-05-16
20230324: 170924     DEBUG 29492[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2013-05-16
20230324: 170924     DEBUG 29492[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170924     DEBUG 29492[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170924     DEBUG 29492[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170924     DEBUG 29493[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170924     DEBUG 29515[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |LTE|M1|2013-05-16|F|
20230324: 170924     DEBUG 29516[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@cb644e
20230324: 170924     DEBUG 29636[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@56ef9176
20230324: 170924     DEBUG 29637[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: MBBIP
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170924     DEBUG 29637[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: MBBIP
20230324: 170924     DEBUG 29637[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170924     DEBUG 29638[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170924     DEBUG 29638[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170924     DEBUG 29638[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170924     DEBUG 29669[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |MBBIP|M1|2023-03-24|F|
20230324: 170924     DEBUG 29704[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2022-08-10
20230324: 170924     DEBUG 29705[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2022-08-10
20230324: 170924     DEBUG 29705[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170924     DEBUG 29705[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170924     DEBUG 29706[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170924     DEBUG 29706[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170924     DEBUG 29734[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |MBBIP|M1|2022-08-10|F|
20230324: 170924     DEBUG 29735[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@20322d26
20230324: 170924     DEBUG 29786[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@64bf3bbf
20230324: 170924     DEBUG 29787[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: OA25
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170924     DEBUG 29787[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: OA25
20230324: 170924     DEBUG 29788[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170924     DEBUG 29789[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170924     DEBUG 29789[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170924     DEBUG 29789[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170924     DEBUG 29818[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |OA25|M1|2023-03-24|F|
20230324: 170924     DEBUG 29849[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2016-05-27
20230324: 170924     DEBUG 29850[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2016-05-27
20230324: 170924     DEBUG 29850[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170924     DEBUG 29851[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170924     DEBUG 29851[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170924     DEBUG 29851[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170924     DEBUG 29893[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |OA25|M1|2016-05-27|F|
20230324: 170924     DEBUG 29894[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@21213b92
20230324: 170925     DEBUG 30058[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3327bd23
20230324: 170925     DEBUG 30059[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: OR50
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170925     DEBUG 30059[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: OR50
20230324: 170925     DEBUG 30059[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170925     DEBUG 30060[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170925     DEBUG 30060[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170925     DEBUG 30060[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170925     DEBUG 30087[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |OR50|M1|2023-03-24|F|
20230324: 170925     DEBUG 30117[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-04-04
20230324: 170925     DEBUG 30118[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-04-04
20230324: 170925     DEBUG 30118[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170925     DEBUG 30118[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170925     DEBUG 30119[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170925     DEBUG 30119[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170925     DEBUG 30149[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |OR50|M1|2018-04-04|F|
20230324: 170925     DEBUG 30149[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2286778
20230324: 170925     DEBUG 30286[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6d7b4f4c
20230324: 170925     DEBUG 30286[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: PASS
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170925     DEBUG 30286[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: PASS
20230324: 170925     DEBUG 30287[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170925     DEBUG 30287[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170925     DEBUG 30287[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170925     DEBUG 30287[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170925     DEBUG 30324[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |PASS|M1|2023-03-24|F|
20230324: 170925     DEBUG 30456[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2020-01-23
20230324: 170925     DEBUG 30456[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2020-01-23
20230324: 170925     DEBUG 30457[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170925     DEBUG 30457[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170925     DEBUG 30457[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170925     DEBUG 30457[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170925     DEBUG 30498[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |PASS|M1|2020-01-23|F|
20230324: 170925     DEBUG 30498[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@335eadca
20230324: 170925     DEBUG 30557[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@eec5a4a
20230324: 170925     DEBUG 30558[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: R750
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170925     DEBUG 30559[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: R750
20230324: 170925     DEBUG 30560[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170925     DEBUG 30560[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170925     DEBUG 30560[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170925     DEBUG 30561[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170925     DEBUG 30590[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |R750|M1|2023-03-24|F|
20230324: 170925     DEBUG 30610[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2021-08-04
20230324: 170925     DEBUG 30611[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2021-08-04
20230324: 170925     DEBUG 30611[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170925     DEBUG 30611[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170925     DEBUG 30612[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170925     DEBUG 30612[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170925     DEBUG 30665[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |R750|M1|2021-08-04|F|
20230324: 170925     DEBUG 30666[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2b9627bc
20230324: 170925     DEBUG 30768[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4f970963
20230324: 170925     DEBUG 30768[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: SMR3
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170925     DEBUG 30769[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: SMR3
20230324: 170925     DEBUG 30769[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170925     DEBUG 30770[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170925     DEBUG 30770[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170925     DEBUG 30770[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170925     DEBUG 30813[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |SMR3|M1|2023-03-24|F|
20230324: 170925     DEBUG 30843[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-08-08
20230324: 170925     DEBUG 30844[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-08-08
20230324: 170925     DEBUG 30844[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170925     DEBUG 30845[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170925     DEBUG 30845[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170925     DEBUG 30845[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170925     DEBUG 30864[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |SMR3|M1|2018-08-08|F|
20230324: 170925     DEBUG 30865[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@627551fb
20230324: 170926     DEBUG 31032[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2758fe70
20230324: 170926     DEBUG 31033[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: SMR30
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170926     DEBUG 31033[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: SMR30
20230324: 170926     DEBUG 31034[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170926     DEBUG 31034[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170926     DEBUG 31034[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170926     DEBUG 31035[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170926     DEBUG 31063[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |SMR30|M1|2023-03-24|F|
20230324: 170926     DEBUG 31089[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-04-04
20230324: 170926     DEBUG 31090[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-04-04
20230324: 170926     DEBUG 31090[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170926     DEBUG 31091[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170926     DEBUG 31091[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170926     DEBUG 31091[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170926     DEBUG 31114[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |SMR30|M1|2018-04-04|F|
20230324: 170926     DEBUG 31115[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6321e813
20230324: 170926     DEBUG 31233[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@22a67b4
20230324: 170926     DEBUG 31234[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: UCMS
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170926     DEBUG 31234[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: UCMS
20230324: 170926     DEBUG 31235[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170926     DEBUG 31236[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170926     DEBUG 31236[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170926     DEBUG 31237[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170926     DEBUG 31266[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |UCMS|M1|2023-03-24|F|
20230324: 170926     DEBUG 31374[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2021-07-20
20230324: 170926     DEBUG 31375[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2021-07-20
20230324: 170926     DEBUG 31375[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170926     DEBUG 31376[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170926     DEBUG 31376[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170926     DEBUG 31376[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170926     DEBUG 31396[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |UCMS|M1|2021-07-20|F|
20230324: 170926     DEBUG 31397[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6c49835d
20230324: 170926     DEBUG 31478[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@67205a84
20230324: 170926     DEBUG 31479[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: UCMV
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170926     DEBUG 31479[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: UCMV
20230324: 170926     DEBUG 31479[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170926     DEBUG 31480[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170926     DEBUG 31480[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170926     DEBUG 31480[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170926     DEBUG 31501[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |UCMV|M1|2023-03-24|F|
20230324: 170926     DEBUG 31530[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2021-07-20
20230324: 170926     DEBUG 31531[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2021-07-20
20230324: 170926     DEBUG 31532[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170926     DEBUG 31532[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170926     DEBUG 31532[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170926     DEBUG 31533[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170926     DEBUG 31571[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |UCMV|M1|2021-07-20|F|
20230324: 170926     DEBUG 31572[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7f13d6e
20230324: 170926     DEBUG 31673[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@d44fc21
20230324: 170926     DEBUG 31674[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: EVS5R
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170926     DEBUG 31674[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: EVS5R
20230324: 170926     DEBUG 31674[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170926     DEBUG 31674[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170926     DEBUG 31674[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170926     DEBUG 31674[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170926     DEBUG 31714[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |EVS5R|M1|2023-03-24|F|
20230324: 170926     DEBUG 31750[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2022-11-13
20230324: 170926     DEBUG 31750[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2022-11-13
20230324: 170926     DEBUG 31750[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170926     DEBUG 31750[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170926     DEBUG 31750[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170926     DEBUG 31751[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170926     DEBUG 31786[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |EVS5R|M1|2022-11-13|F|
20230324: 170926     DEBUG 31786[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5f282abb
20230324: 170926     DEBUG 31849[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1e965684
20230324: 170926     DEBUG 31849[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: WABR
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170926     DEBUG 31849[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: WABR
20230324: 170926     DEBUG 31849[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170926     DEBUG 31849[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170926     DEBUG 31849[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170926     DEBUG 31849[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170926     DEBUG 31880[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |WABR|M1|2023-03-24|F|
20230324: 170926     DEBUG 31905[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2020-09-28
20230324: 170926     DEBUG 31905[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2020-09-28
20230324: 170926     DEBUG 31905[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170926     DEBUG 31906[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170926     DEBUG 31906[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170926     DEBUG 31906[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170927     DEBUG 31935[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |WABR|M1|2020-09-28|F|
20230324: 170927     DEBUG 31936[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1b68ddbd
20230324: 170927     DEBUG 31993[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@59e5ddf
20230324: 170927     DEBUG 32016[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: ZRDB
String netId: M1
Date chargeDate: 2023-03-24
Date effectiveDate: null
String chgType: F
20230324: 170927     DEBUG 32016[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: ZRDB
20230324: 170927     DEBUG 32016[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170927     DEBUG 32016[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230324: 170927     DEBUG 32016[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230324: 170927     DEBUG 32017[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230324: 170927     DEBUG 32048[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |ZRDB|M1|2023-03-24|F|
20230324: 170927     DEBUG 32074[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-03-29
20230324: 170927     DEBUG 32074[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-03-29
20230324: 170927     DEBUG 32075[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230324: 170927     DEBUG 32075[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230324: 170927     DEBUG 32076[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230324: 170927     DEBUG 32076[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230324: 170927     DEBUG 32097[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |ZRDB|M1|2018-03-29|F|
20230324: 170927     DEBUG 32097[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7a1ebcd8
20230325: 081759     DEBUG     0[main] - com.eppixcomm.eppix.base.test.TestIdcAccSubServ.loadproperties(TestIdcAccSubServ.java:171) - loading appProperties
20230325: 081759     DEBUG    12[main] - com.eppixcomm.eppix.base.test.TestIdcAccSubServ.loadproperties(TestIdcAccSubServ.java:178) - appProperties loaded : {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230325: 081759     DEBUG    12[main] - com.eppixcomm.eppix.base.test.TestIdcAccSubServ.dbConnectionInit(TestIdcAccSubServ.java:191) - DB Connection start
20230325: 081759     DEBUG    12[main] - com.eppixcomm.eppix.base.test.TestIdcAccSubServ.dbConnectionInit(TestIdcAccSubServ.java:194) - {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230325: 081800     DEBUG   941[main] - com.eppixcomm.eppix.common.data.DACFactory.<init>(DACFactory.java:95) - constructor( connection, thrower )
20230325: 081800     DEBUG   944[main] - com.eppixcomm.eppix.common.data.ConnectionContext.connect(ConnectionContext.java:100) - connect( connection )
20230325: 081800     DEBUG   945[main] - com.eppixcomm.eppix.common.data.ConnectionContext.get(ConnectionContext.java:82) - get()
20230325: 081800     DEBUG   950[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.IDAccSubServList )
20230325: 081800     DEBUG   986[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getIDAccSubServListDAC(BaseDACFactory.java:571) - getIDAccSubServListDAC
20230325: 081800     DEBUG   995[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.IDAccSubServListDACImpl com.eppixcomm.eppix.base.dml.IDAccSubServListDML@6d21714c
20230325: 081800     DEBUG   996[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.IDAccSubServListDACImpl
20230325: 081800     DEBUG  1020[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 081800     DEBUG  1021[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.IDAccSubServListDACImpl TO MAP
20230325: 081800     DEBUG  1022[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowed )
20230325: 081800     DEBUG  1024[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetSULMaxUsageAllowedDAC(BaseDACFactory.java:532) - getGetSULMaxUsageAllowedDAC
20230325: 081800     DEBUG  1029[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl com.eppixcomm.eppix.base.dml.GetSULMaxUsageAllowedDML@619a5dff
20230325: 081800     DEBUG  1029[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl
20230325: 081800     DEBUG  1030[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 081800     DEBUG  1030[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl TO MAP
20230325: 081800     DEBUG  1032[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230325: 081800     DEBUG  1033[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetServiceDiscountDAC(BaseDACFactory.java:426) - getGetServiceDiscountDAC()
20230325: 081800     DEBUG  1036[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl com.eppixcomm.eppix.base.dml.GetServiceDiscountDML@6438a396
20230325: 081800     DEBUG  1036[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl
20230325: 081800     DEBUG  1036[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 081800     DEBUG  1037[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl TO MAP
20230325: 081800     DEBUG  1047[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230325: 081800     DEBUG  1127[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberUpgradeMigradeDAC(BaseDACFactory.java:519) - getSubscriberUpgradeMigradeDAC
20230325: 081800     DEBUG  1137[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl com.eppixcomm.eppix.base.dml.SubscriberUpgradeMigradeDML@7506e922
20230325: 081800     DEBUG  1137[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl
20230325: 081800     DEBUG  1140[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 081800     DEBUG  1140[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl TO MAP
20230325: 081800     DEBUG  1140[main] - com.eppixcomm.eppix.base.test.TestIdcAccSubServ.dbConnectionInit(TestIdcAccSubServ.java:218) - DB Connection successfull
20230325: 081800     DEBUG  1144[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSulByAccount
20230325: 081800     DEBUG  1146[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSulByAccount|0||

20230325: 081801     DEBUG  2602[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SUL' AND sbd_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 081801     DEBUG  2605[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@f2a0b8e
20230325: 081801     DEBUG  2683[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getCrbUnbillCharges
20230325: 081801     DEBUG  2683[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getCrbUnbillCharges|0||

20230325: 081801     DEBUG  2870[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getCrbUnbillCharges
Execute SQL Statement: SELECT NVL((crb_unbill_charges + crb_unbill_calls), 0) FROM crb_cust_risk_bal WHERE crb_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 081801     DEBUG  2870[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2530c12
20230325: 081802     DEBUG  2946[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getAccountCreditLimit
20230325: 081802     DEBUG  2946[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getAccountCreditLimit|0||

20230325: 081802     DEBUG  3090[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getAccountCreditLimit
Execute SQL Statement: SELECT credit_limit FROM slcustm WHERE customer = ? 
Argument(s): |A5085810|
20230325: 081802     DEBUG  3090[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3b95a09c
20230325: 081802     DEBUG  3186[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSubscriberVasServices|0|NONE|

20230325: 081802     DEBUG  3333[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getSubscriberVasServices
Execute SQL Statement: SELECT vas_service_code FROM vas_active_service WHERE vas_subscriber_id = ? AND vas_service_code NOT IN (SELECT tt_type FROM tt_type_text WHERE tt_group = 'IDACCSRVEX');
Argument(s): |140978|
20230325: 081802     DEBUG  3451[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BlhBillLimitHd )
20230325: 081802     DEBUG  3667[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getBlhBillLimitHdDAC(BaseAbstractDACFactory.java:930) - getBlhBillLimitHdDAC()
20230325: 081802     DEBUG  3679[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl com.eppixcomm.eppix.base.dml.BlhBillLimitHdDMLFactory@17d10166
20230325: 081802     DEBUG  3679[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl
20230325: 081802     DEBUG  3682[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 081802     DEBUG  3683[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl TO MAP
20230325: 081802     DEBUG  3683[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractBLO.get(BlhBillLimitHdAbstractBLO.java:264) - get( filter )
20230325: 081802     DEBUG  3683[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractDACImpl.get(BlhBillLimitHdAbstractDACImpl.java:98) - get( filter )
20230325: 081802     DEBUG  3686[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BlhBillLimitHd|0|equalBlhSubscriberId+equalBlhServiceCode|

20230325: 081802     DEBUG  3842[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BlhBillLimitHd
Execute SQL Statement: SELECT BLH_SUBSCRIBER_ID, BLH_SERVICE_CODE, BLH_BILL_LIMIT_VAL, BLH_LEVEL,BLH_TYPE, BLH_VAT_IND, BLH_UNBILL_USAGE, BLH_UNBILL_CHARGES, BLH_DIFF,BLH_USER_STATUS, BLH_NEXT_THRESHOLD, BLH_PREV_THRESHOLD, BLH_NEXT_ACN_ID,BLH_PREV_ACN_ID, BLH_NETWORK_ACN, BLH_TRIG_FLAG, BLH_LAST_UPDATE
FROM BLH_BILL_LIMIT_HD
WHERE BLH_SUBSCRIBER_ID = ? AND BLH_SERVICE_CODE = ?
Argument(s): |140978|SPUL|
20230325: 081803     ERROR  3912[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5888) - Failed to get Bill Limits for subscriber: 140978 and service code: SPUL
20230325: 081803     ERROR  3912[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5904) - Exception getting Bill Limits for subscriber: 140978 and service code: SPUL EXCEPTION: com.eppixcomm.eppix.base.error.EPPIXSeriousException: Failed to get Bill Limits for subscriber: 140978 and service code: SPUL
20230325: 082728     DEBUG     0[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.loadproperties(TestSubscriberServices.java:280) - loading appProperties
20230325: 082728     DEBUG     9[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.loadproperties(TestSubscriberServices.java:287) - appProperties loaded : {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230325: 082728     DEBUG    10[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:300) - DB Connection start
20230325: 082728     DEBUG    10[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:303) - {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230325: 082729     DEBUG   709[main] - com.eppixcomm.eppix.common.data.DACFactory.<init>(DACFactory.java:95) - constructor( connection, thrower )
20230325: 082729     DEBUG   711[main] - com.eppixcomm.eppix.common.data.ConnectionContext.connect(ConnectionContext.java:100) - connect( connection )
20230325: 082729     DEBUG   711[main] - com.eppixcomm.eppix.common.data.ConnectionContext.get(ConnectionContext.java:82) - get()
20230325: 082729     DEBUG   712[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberActiveServices )
20230325: 082729     DEBUG   742[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberActiveServicesDAC(BaseDACFactory.java:506) - getSubscriberActiveServicesDAC
20230325: 082729     DEBUG   750[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl com.eppixcomm.eppix.base.dml.SubscriberActiveServicesDML@6d21714c
20230325: 082729     DEBUG   750[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl
20230325: 082729     DEBUG   773[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082729     DEBUG   773[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl TO MAP
20230325: 082729     DEBUG   775[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230325: 082729     DEBUG   776[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetServiceDiscountDAC(BaseDACFactory.java:426) - getGetServiceDiscountDAC()
20230325: 082729     DEBUG   779[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl com.eppixcomm.eppix.base.dml.GetServiceDiscountDML@619a5dff
20230325: 082729     DEBUG   779[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl
20230325: 082729     DEBUG   780[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082729     DEBUG   780[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl TO MAP
20230325: 082729     DEBUG   782[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SimAPNServices )
20230325: 082729     DEBUG   785[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSimAPNServicesDAC(BaseDACFactory.java:467) - getSimAPNServicesDAC
20230325: 082729     DEBUG   787[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl com.eppixcomm.eppix.base.dml.SimAPNServicesDML@6438a396
20230325: 082729     DEBUG   787[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl
20230325: 082729     DEBUG   787[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082729     DEBUG   787[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl TO MAP
20230325: 082729     DEBUG   789[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowed )
20230325: 082729     DEBUG   791[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetSULMaxUsageAllowedDAC(BaseDACFactory.java:532) - getGetSULMaxUsageAllowedDAC
20230325: 082729     DEBUG   794[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl com.eppixcomm.eppix.base.dml.GetSULMaxUsageAllowedDML@7506e922
20230325: 082729     DEBUG   794[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl
20230325: 082729     DEBUG   794[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082729     DEBUG   794[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl TO MAP
20230325: 082729     DEBUG   795[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230325: 082729     DEBUG   804[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230325: 082729     DEBUG   880[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberUpgradeMigradeDAC(BaseDACFactory.java:519) - getSubscriberUpgradeMigradeDAC
20230325: 082729     DEBUG   887[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl com.eppixcomm.eppix.base.dml.SubscriberUpgradeMigradeDML@5d6f64b1
20230325: 082729     DEBUG   887[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl
20230325: 082729     DEBUG   890[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082729     DEBUG   890[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl TO MAP
20230325: 082729     DEBUG   890[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230325: 082729     DEBUG   890[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowed )
20230325: 082729     DEBUG   890[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230325: 082729     DEBUG   891[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230325: 082729     DEBUG   891[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230325: 082729     DEBUG   891[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:336) - DB Connection successfull
20230325: 082729     DEBUG   896[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SbdSubDets )
20230325: 082729     DEBUG  1007[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSbdSubDetsDAC(BaseAbstractDACFactory.java:234) - getSbdSubDetsDAC()
20230325: 082729     DEBUG  1018[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl com.eppixcomm.eppix.base.dml.SbdSubDetsAbstractDMLFactory@f2a0b8e
20230325: 082729     DEBUG  1018[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl
20230325: 082729     DEBUG  1019[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082729     DEBUG  1019[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl TO MAP
20230325: 082729     DEBUG  1019[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractBLO.get(SbdSubDetsAbstractBLO.java:531) - get( filter )
20230325: 082729     DEBUG  1020[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractDACImpl.get(SbdSubDetsAbstractDACImpl.java:556) - get( filter )
20230325: 082729     DEBUG  1023[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
SbdSubDets|0|equalSbdSubscriberId|

20230325: 082730     DEBUG  1171[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SbdSubDets
Execute SQL Statement: SELECT SBD_SUBSCRIBER_ID, SBD_DIALLING_NO, SBD_BILL_AC_NO, SBD_CONNECT_DATE, SBD_DCONNECT_DATE, SBD_TERM_DATE, SBD_TITLE, SBD_SURNAME, SBD_FIRSTNAME, SBD_GENDER, SBD_DOB, SBD_PASSWORD, SBD_LOCATION_CODE, SBD_BILL_CYCLE, SBD_PACKAGE_CODE, SBD_BILLED_UPTO, SBD_TARIFF_PLAN
FROM SBD_SUB_DETS
WHERE SBD_SUBSCRIBER_ID = ?
Argument(s): |1003411985|
20230325: 082730     DEBUG  1174[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3b764bce
20230325: 082730     DEBUG  1247[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSulByAccount
20230325: 082730     DEBUG  1251[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSulByAccount|0||

20230325: 082730     DEBUG  1380[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SUL' AND sbd_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 082730     DEBUG  1389[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6bf2d08e
20230325: 082730     DEBUG  1477[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getCrbUnbillCharges
20230325: 082730     DEBUG  1478[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getCrbUnbillCharges|0||

20230325: 082730     DEBUG  1630[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getCrbUnbillCharges
Execute SQL Statement: SELECT NVL((crb_unbill_charges + crb_unbill_calls), 0) FROM crb_cust_risk_bal WHERE crb_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 082730     DEBUG  1631[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7e774085
20230325: 082730     DEBUG  1704[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getAccountCreditLimit
20230325: 082730     DEBUG  1705[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getAccountCreditLimit|0||

20230325: 082730     DEBUG  1826[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getAccountCreditLimit
Execute SQL Statement: SELECT credit_limit FROM slcustm WHERE customer = ? 
Argument(s): |A5085810|
20230325: 082730     DEBUG  1827[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1b701da1
20230325: 082730     DEBUG  1898[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSubscriberVasServices|0|NONE|

20230325: 082731     DEBUG  2104[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getSubscriberVasServices
Execute SQL Statement: SELECT vas_service_code FROM vas_active_service WHERE vas_subscriber_id = ? AND vas_service_code NOT IN (SELECT tt_type FROM tt_type_text WHERE tt_group = 'IDACCSRVEX');
Argument(s): |1003411985|
20230325: 082731     DEBUG  2109[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@15615099
20230325: 082731     DEBUG  2113[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 082731     DEBUG  2115[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getTtTypeTextDAC(BaseAbstractDACFactory.java:144) - getTtTypeTextDAC()
20230325: 082731     DEBUG  2123[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.TtTypeTextDACImpl com.eppixcomm.eppix.base.dml.TtTypeTextAbstractDMLFactory@1963006a
20230325: 082731     DEBUG  2123[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.TtTypeTextDACImpl
20230325: 082731     DEBUG  2126[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082731     DEBUG  2127[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.TtTypeTextDACImpl TO MAP
20230325: 082731     DEBUG  2127[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 082731     DEBUG  2127[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 082731     DEBUG  2128[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 082731     DEBUG  2299[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|BSTL|
20230325: 082731     ERROR  2390[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: BSTL
20230325: 082731     DEBUG  2391[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 082731     DEBUG  2392[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 082731     DEBUG  2577[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |BSTL|1003411985|
20230325: 082731     DEBUG  2577[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5e91993f
20230325: 082731     DEBUG  2663[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@379619aa
20230325: 082731     DEBUG  2664[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 082731     DEBUG  2665[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 082731     DEBUG  2665[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 082731     DEBUG  2666[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 082731     DEBUG  2704[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|CSCP|
20230325: 082731     ERROR  2788[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: CSCP
20230325: 082731     DEBUG  2789[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 082731     DEBUG  2790[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 082731     DEBUG  2834[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |CSCP|1003411985|
20230325: 082731     DEBUG  2835[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4361bd48
20230325: 082731     DEBUG  2908[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2401f4c3
20230325: 082731     DEBUG  2908[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 082731     DEBUG  2909[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 082731     DEBUG  2909[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 082731     DEBUG  2910[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 082731     DEBUG  2955[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|EVE |
20230325: 082731     ERROR  3027[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: EVE 
20230325: 082731     DEBUG  3028[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 082731     DEBUG  3028[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 082731     DEBUG  3089[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |EVE |1003411985|
20230325: 082731     DEBUG  3090[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7d6f77cc
20230325: 082732     DEBUG  3162[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@73a28541
20230325: 082732     DEBUG  3163[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 082732     DEBUG  3164[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 082732     DEBUG  3164[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 082732     DEBUG  3165[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 082732     DEBUG  3201[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|ITBL|
20230325: 082732     ERROR  3283[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: ITBL
20230325: 082732     DEBUG  3283[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 082732     DEBUG  3284[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 082732     DEBUG  3332[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |ITBL|1003411985|
20230325: 082732     DEBUG  3333[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@244038d0
20230325: 082732     DEBUG  3412[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5fdef03a
20230325: 082732     DEBUG  3413[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 082732     DEBUG  3414[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 082732     DEBUG  3414[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 082732     DEBUG  3415[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 082732     DEBUG  3454[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|MBIP|
20230325: 082732     ERROR  3552[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: MBIP
20230325: 082732     DEBUG  3553[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 082732     DEBUG  3554[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 082732     DEBUG  3604[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |MBIP|1003411985|
20230325: 082732     DEBUG  3605[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5c8da962
20230325: 082732     DEBUG  3696[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.PshParamServHdr )
20230325: 082732     DEBUG  3698[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getPshParamServHdrDAC(BaseDACFactory.java:199) - getPshParamServHdrDAC()
20230325: 082732     DEBUG  3718[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.PshParamServHdrDACImpl com.eppixcomm.eppix.base.dml.PshParamServHdrAbstractDMLFactory@368239c8
20230325: 082732     DEBUG  3719[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.PshParamServHdrDACImpl
20230325: 082732     DEBUG  3724[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082732     DEBUG  3725[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.PshParamServHdrDACImpl TO MAP
20230325: 082732     DEBUG  3726[main] - com.eppixcomm.eppix.base.blo.PshParamServHdrAbstractBLO.get(PshParamServHdrAbstractBLO.java:516) - get( filter )
20230325: 082732     DEBUG  3727[main] - com.eppixcomm.eppix.base.blo.PshParamServHdrAbstractDACImpl.get(PshParamServHdrAbstractDACImpl.java:448) - get( filter )
20230325: 082732     DEBUG  3728[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
PshParamServHdr|0|equalPshServiceCode+equalPshSubscriberId+equalPshArchived|

20230325: 082732     DEBUG  3976[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: PshParamServHdr
Execute SQL Statement: SELECT PSH_ID, PSH_SERVICE_CODE, PSH_SERVICE_TYPE, PSH_SUBSCRIBER_ID, PSH_SIM_NO, PSH_MSISDN_NO, PSH_ARCHIVED
FROM PSH_PARAM_SERV_HDR
WHERE (PSH_SERVICE_CODE) = ? AND PSH_SUBSCRIBER_ID = ? AND (PSH_ARCHIVED) = ?
Argument(s): |MBIP|1003411985|N|
20230325: 082732     DEBUG  3977[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@11028347
20230325: 082732     DEBUG  4070[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getPshPsdServices|0|NONE|

20230325: 082733     DEBUG  4351[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getPshPsdServices
Execute SQL Statement: SELECT * FROM psh_param_serv_hdr, psd_param_serv_det WHERE psd_psh_id = ? AND psh_id = psd_psh_id AND psd_param_active = 'Y' 
Argument(s): |23449756|
20230325: 082733     DEBUG  4353[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@77468bd9
20230325: 082733     DEBUG  4388[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 082733     DEBUG  4389[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 082733     DEBUG  4389[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 082733     DEBUG  4389[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 082733     DEBUG  4430[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |CHGVARPARM|MBSIP|
20230325: 082733     ERROR  4532[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: CHGVARPARM and type: MBSIP
20230325: 082733     DEBUG  4533[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getChgNetId|0|NONE|

20230325: 082733     DEBUG  4707[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getChgNetId
Execute SQL Statement: SELECT chg_netid FROM chg_charges WHERE chg_code = ? ORDER BY chg_effective_date DESC
Argument(s): |MBBIP|
20230325: 082733     DEBUG  4708[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@61064425
20230325: 082733     DEBUG  4790[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: MBBIP
String netId: M1   
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082733     DEBUG  4791[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: MBBIP
20230325: 082733     DEBUG  4796[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082733     DEBUG  4798[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getChgChargesDAC(BaseAbstractDACFactory.java:578) - getChgChargesDAC()
20230325: 082733     DEBUG  4812[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.ChgChargesDACImpl com.eppixcomm.eppix.base.dml.ChgChargesDMLFactory@2e5c649
20230325: 082733     DEBUG  4813[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.ChgChargesDACImpl
20230325: 082733     DEBUG  4818[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082733     DEBUG  4818[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.ChgChargesDACImpl TO MAP
20230325: 082733     DEBUG  4819[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082733     DEBUG  4819[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082733     DEBUG  4819[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082733     DEBUG  4964[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |MBBIP|M1   |2023-03-25|F|
20230325: 082733     DEBUG  5010[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2022-08-10
20230325: 082733     DEBUG  5011[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2022-08-10
20230325: 082733     DEBUG  5012[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082733     DEBUG  5013[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082733     DEBUG  5013[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082733     DEBUG  5014[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082734     DEBUG  5148[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |MBBIP|M1   |2022-08-10|F|
20230325: 082734     DEBUG  5151[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2ff5659e
20230325: 082734     DEBUG  5227[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@161cd475
20230325: 082734     DEBUG  5228[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 082734     DEBUG  5228[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 082734     DEBUG  5228[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 082734     DEBUG  5229[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 082734     DEBUG  5281[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|PENB|
20230325: 082734     ERROR  5352[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: PENB
20230325: 082734     DEBUG  5352[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 082734     DEBUG  5353[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 082734     DEBUG  5391[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |PENB|1003411985|
20230325: 082734     DEBUG  5393[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@27ddd392
20230325: 082734     DEBUG  5465[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7cef4e59
20230325: 082734     DEBUG  5466[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 082734     DEBUG  5466[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 082734     DEBUG  5467[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 082734     DEBUG  5467[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 082734     DEBUG  5504[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|SPUL|
20230325: 082734     ERROR  5577[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: SPUL
20230325: 082734     DEBUG  5577[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 082734     DEBUG  5578[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 082734     DEBUG  5617[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |SPUL|1003411985|
20230325: 082734     DEBUG  5618[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@16b4a017
20230325: 082734     DEBUG  5703[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2a3046da
20230325: 082734     DEBUG  5704[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 082734     DEBUG  5705[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 082734     DEBUG  5705[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 082734     DEBUG  5706[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 082734     DEBUG  5744[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|SUB |
20230325: 082734     ERROR  5820[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: SUB 
20230325: 082734     DEBUG  5821[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 082734     DEBUG  5821[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 082734     DEBUG  5858[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |SUB |1003411985|
20230325: 082734     DEBUG  5859[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@59690aa4
20230325: 082734     DEBUG  5940[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@574caa3f
20230325: 082734     DEBUG  5978[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 082734     DEBUG  5978[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 082734     DEBUG  5978[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 082734     DEBUG  5979[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 082734     DEBUG  6021[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|VPNA|
20230325: 082734     ERROR  6093[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: VPNA
20230325: 082734     DEBUG  6093[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 082735     DEBUG  6094[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 082735     DEBUG  6131[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |VPNA|1003411985|
20230325: 082735     DEBUG  6132[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2280cdac
20230325: 082735     DEBUG  6309[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BlhBillLimitHd )
20230325: 082735     DEBUG  6313[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getBlhBillLimitHdDAC(BaseAbstractDACFactory.java:930) - getBlhBillLimitHdDAC()
20230325: 082735     DEBUG  6339[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl com.eppixcomm.eppix.base.dml.BlhBillLimitHdDMLFactory@60215eee
20230325: 082735     DEBUG  6339[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl
20230325: 082735     DEBUG  6342[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082735     DEBUG  6342[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl TO MAP
20230325: 082735     DEBUG  6343[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractBLO.get(BlhBillLimitHdAbstractBLO.java:264) - get( filter )
20230325: 082735     DEBUG  6343[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractDACImpl.get(BlhBillLimitHdAbstractDACImpl.java:98) - get( filter )
20230325: 082735     DEBUG  6344[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BlhBillLimitHd|0|equalBlhSubscriberId+equalBlhServiceCode|

20230325: 082735     DEBUG  6533[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BlhBillLimitHd
Execute SQL Statement: SELECT BLH_SUBSCRIBER_ID, BLH_SERVICE_CODE, BLH_BILL_LIMIT_VAL, BLH_LEVEL,BLH_TYPE, BLH_VAT_IND, BLH_UNBILL_USAGE, BLH_UNBILL_CHARGES, BLH_DIFF,BLH_USER_STATUS, BLH_NEXT_THRESHOLD, BLH_PREV_THRESHOLD, BLH_NEXT_ACN_ID,BLH_PREV_ACN_ID, BLH_NETWORK_ACN, BLH_TRIG_FLAG, BLH_LAST_UPDATE
FROM BLH_BILL_LIMIT_HD
WHERE BLH_SUBSCRIBER_ID = ? AND BLH_SERVICE_CODE = ?
Argument(s): |1003411985|SPUL|
20230325: 082735     DEBUG  6537[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5479e3f
20230325: 082735     DEBUG  6641[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BlhBillLimitHd )
20230325: 082735     DEBUG  6642[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractBLO.get(BlhBillLimitHdAbstractBLO.java:264) - get( filter )
20230325: 082735     DEBUG  6642[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractDACImpl.get(BlhBillLimitHdAbstractDACImpl.java:98) - get( filter )
20230325: 082735     DEBUG  6642[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BlhBillLimitHd|0|equalBlhSubscriberId+equalBlhServiceCode|

20230325: 082735     DEBUG  6701[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BlhBillLimitHd
Execute SQL Statement: SELECT BLH_SUBSCRIBER_ID, BLH_SERVICE_CODE, BLH_BILL_LIMIT_VAL, BLH_LEVEL,BLH_TYPE, BLH_VAT_IND, BLH_UNBILL_USAGE, BLH_UNBILL_CHARGES, BLH_DIFF,BLH_USER_STATUS, BLH_NEXT_THRESHOLD, BLH_PREV_THRESHOLD, BLH_NEXT_ACN_ID,BLH_PREV_ACN_ID, BLH_NETWORK_ACN, BLH_TRIG_FLAG, BLH_LAST_UPDATE
FROM BLH_BILL_LIMIT_HD
WHERE BLH_SUBSCRIBER_ID = ? AND BLH_SERVICE_CODE = ?
Argument(s): |1003411985|SUL|
20230325: 082735     ERROR  6802[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5888) - Failed to get Bill Limits for subscriber: 1003411985 and service code: SUL
20230325: 082735     ERROR  6804[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5904) - Exception getting Bill Limits for subscriber: 1003411985 and service code: SUL EXCEPTION: com.eppixcomm.eppix.base.error.EPPIXSeriousException: Failed to get Bill Limits for subscriber: 1003411985 and service code: SUL
20230325: 082735     ERROR  6805[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1007) - Exception getting Bill Limits for subscriber: 1003411985 and service code: SUL EXCEPTION: com.eppixcomm.eppix.base.error.EPPIXSeriousException: Failed to get Bill Limits for subscriber: 1003411985 and service code: SUL
20230325: 082735     ERROR  6805[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1030) - 
CREDIT LIMIT: 578437.20
TOTAL CHARGES: 46169.73
TOTAL SUL320.00
20230325: 082735     ERROR  6806[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1054) - 
TOTAL SUL WITHOUT CURRENT SUL: 320.00
AFTER CREDIT LIMIT: 578437.20
TOTAL CHARGES: 46169.73TOTAL SUL: 320.00
PARAM CHARGES: 0.00
20230325: 082735     DEBUG  6811[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SksKeySetting )
20230325: 082735     DEBUG  6812[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSksKeySettingDAC(BaseAbstractDACFactory.java:314) - getSksKeySettingDAC()
20230325: 082735     DEBUG  6823[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl com.eppixcomm.eppix.base.dml.SksKeySettingAbstractDMLFactory@4f4a7090
20230325: 082735     DEBUG  6823[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl
20230325: 082735     DEBUG  6826[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082735     DEBUG  6827[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl TO MAP
20230325: 082735     DEBUG  6828[main] - com.eppixcomm.eppix.base.blo.SksKeySettingAbstractBLO.get(SksKeySettingAbstractBLO.java:500) - get( filter )
20230325: 082735     DEBUG  6828[main] - com.eppixcomm.eppix.base.blo.SksKeySettingAbstractDACImpl.get(SksKeySettingAbstractDACImpl.java:420) - get( filter )
20230325: 082735     DEBUG  6838[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
SksKeySetting|0|equalSksKeyCode|

20230325: 082735     DEBUG  6995[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SksKeySetting
Execute SQL Statement: SELECT SKS_KEY_CODE, SKS_VALUE, SKS_COMMENT, SKS_TIMESTAMP
FROM SKS_KEY_SETTING
WHERE (SKS_KEY_CODE) = ?
Argument(s): |ALFTURNONO|
20230325: 082735     DEBUG  6995[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1ef7fe8e
20230325: 082735     DEBUG  7083[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.Sysdirm )
20230325: 082735     DEBUG  7084[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSysdirmDAC(BaseAbstractDACFactory.java:327) - getSysdirmDAC()
20230325: 082736     DEBUG  7094[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SysdirmDACImpl com.eppixcomm.eppix.base.dml.SysdirmAbstractDMLFactory@2471cca7
20230325: 082736     DEBUG  7095[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SysdirmDACImpl
20230325: 082736     DEBUG  7099[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082736     DEBUG  7099[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SysdirmDACImpl TO MAP
20230325: 082736     DEBUG  7100[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractBLO.get(SysdirmAbstractBLO.java:501) - get( filter )
20230325: 082736     DEBUG  7100[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractDACImpl.get(SysdirmAbstractDACImpl.java:435) - get( filter )
20230325: 082736     DEBUG  7101[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
Sysdirm|0|equalSystemKey|

20230325: 082736     DEBUG  7249[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: Sysdirm
Execute SQL Statement: SELECT SYSTEM_KEY, KEY_VALUE, DESCRIPTION
FROM SYSDIRM
WHERE (SYSTEM_KEY) = ?
Argument(s): |OPVATCODE|
20230325: 082736     DEBUG  7250[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@31b7dea0
20230325: 082736     DEBUG  7318[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVatPercentageByCode
20230325: 082736     DEBUG  7318[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVatPercentageByCode|0||

20230325: 082736     DEBUG  7446[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVatPercentageByCode
Execute SQL Statement: SELECT percentage FROM cevatm WHERE vat_code = ? 
Argument(s): |VST|
20230325: 082736     DEBUG  7446[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3930015a
20230325: 082736     DEBUG  7535[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BcyBillingCycle )
20230325: 082736     DEBUG  7536[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getBcyBillingCycleDAC(BaseAbstractDACFactory.java:550) - getBcyBillingCycleDAC()
20230325: 082736     DEBUG  7544[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.BcyBillingCycleDACImpl com.eppixcomm.eppix.base.dml.BcyBillingCycleDMLFactory@387c703b
20230325: 082736     DEBUG  7544[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.BcyBillingCycleDACImpl
20230325: 082736     DEBUG  7546[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082736     DEBUG  7546[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.BcyBillingCycleDACImpl TO MAP
20230325: 082736     DEBUG  7546[main] - com.eppixcomm.eppix.base.blo.BcyBillingCycleAbstractBLO.get(BcyBillingCycleAbstractBLO.java:587) - get( filter )
20230325: 082736     DEBUG  7547[main] - com.eppixcomm.eppix.base.blo.BcyBillingCycleAbstractDACImpl.get(BcyBillingCycleAbstractDACImpl.java:492) - get( filter )
20230325: 082736     DEBUG  7547[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BcyBillingCycle|0|equalBcyBillCycle|

20230325: 082736     DEBUG  7703[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BcyBillingCycle
Execute SQL Statement: SELECT BCY_BILL_CYCLE, BCY_DESCRIPTION, BCY_PERIOD, BCY_FREQUENCY, BCY_DAY_OF_RUN, BCY_NEXT_RUN, BCY_SUSPENDED, BCY_USE_STATUS, BCY_NEXT_CALL_RUN, BCY_IN_ADVANCE
FROM BCY_BILLING_CYCLE
WHERE BCY_BILL_CYCLE = ?
Argument(s): |CYC95|
20230325: 082736     DEBUG  7704[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@282ba1e
20230325: 082736     DEBUG  7775[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10040) - 
billTable=bill_CYC9520230205
20230325: 082736     DEBUG  7779[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.CrbaCustRiskAux )
20230325: 082736     DEBUG  7780[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getCrbaCustRiskAuxDAC(BaseAbstractDACFactory.java:1601) - getCrbaCustRiskAuxDAC()
20230325: 082736     DEBUG  7787[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxDACImpl com.eppixcomm.eppix.base.dml.CrbaCustRiskAuxDMLFactory@3ecf72fd
20230325: 082736     DEBUG  7787[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxDACImpl
20230325: 082736     DEBUG  7789[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082736     DEBUG  7790[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxDACImpl TO MAP
20230325: 082736     DEBUG  7790[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractBLO.get(CrbaCustRiskAuxAbstractBLO.java:270) - get( filter )
20230325: 082736     DEBUG  7790[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractDACImpl.get(CrbaCustRiskAuxAbstractDACImpl.java:322) - get( filter )
20230325: 082736     DEBUG  7790[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
CrbaCustRiskAux|0|equalcrbaBillAcNo|

20230325: 082736     DEBUG  7955[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: CrbaCustRiskAux
Execute SQL Statement: SELECT CRBA_BILL_AC_NO, CRBA_ACC_DISC_VAL, CRBA_AUX_FLOAT_1, CRBA_AUX_FLOAT_2, CRBA_AUX_FLOAT_3, CRBA_AUX_INT_1, CRBA_AUX_INT_2, CRBA_AUX_INT_3, CRBA_AUX_CHAR_1, CRBA_AUX_CHAR_2, CRBA_AUX_CHAR_3, CRBA_AUX_DATE_1, CRBA_AUX_DATE_2, CRBA_AUX_DATE_3
FROM crba_cust_risk_aux
WHERE CRBA_BILL_AC_NO = ? 
Argument(s): |A5085810|
20230325: 082736     DEBUG  7956[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4b6995df
20230325: 082736     DEBUG  8044[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.CrbCustRiskBal )
20230325: 082736     DEBUG  8046[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getCrbCustRiskBalDAC(BaseAbstractDACFactory.java:943) - getCrbCustRiskBalDAC()
20230325: 082736     DEBUG  8059[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.CrbCustRiskBalDACImpl com.eppixcomm.eppix.base.dml.CrbCustRiskBalDMLFactory@61443d8f
20230325: 082736     DEBUG  8059[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbCustRiskBalDACImpl
20230325: 082736     DEBUG  8063[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082736     DEBUG  8063[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbCustRiskBalDACImpl TO MAP
20230325: 082736     DEBUG  8064[main] - com.eppixcomm.eppix.base.blo.CrbCustRiskBalAbstractBLO.get(CrbCustRiskBalAbstractBLO.java:256) - get( filter )
20230325: 082736     DEBUG  8064[main] - com.eppixcomm.eppix.base.blo.CrbCustRiskBalAbstractDACImpl.get(CrbCustRiskBalAbstractDACImpl.java:96) - get( filter )
20230325: 082736     DEBUG  8065[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
crbCustRiskBal|0|equalCrbBillAcNo|

20230325: 082737     DEBUG  8200[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: crbCustRiskBal
Execute SQL Statement: SELECT CRB_BILL_AC_NO, CRB_ACCOUNT_TYPE, CRB_CREDIT_LIMIT, CRB_ACC_BAL, CRB_UNBILL_CHARGES, CRB_UNBILL_CALLS, CRB_DIFF, CRB_NEXT_THRESHOLD, CRB_PREV_THRESHOLD, CRB_COLL_PLAN, CRB_MIN_THRESHOLD, CRB_ACTIVATE_FLAG, CRB_EAP_FLAG, CRB_BL_STATUS, CRB_BL_TYPE, CRB_BL_LIMIT, CRB_BL_DIFF, CRB_BL_NEXT_THRESH, CRB_BL_PREV_THRESH, CRB_BL_NEXT_ACN_ID, CRB_BL_PREV_ACN_ID, CRB_BL_TRIG_FLAG, CRB_BL_LAST_UPDATE
FROM CRB_CUST_RISK_BAL
WHERE CRB_BILL_AC_NO = ?
Argument(s): |A5085810|
20230325: 082737     DEBUG  8209[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3aa9e816
20230325: 082737     DEBUG  8286[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10087) - 
Select sbd_subscriber_id, start_period, sparech, chaserv, charge from sbd_sub_dets, vam_active_msisdn, bill_CYC9520230205 WHERE subscriber_id = sbd_subscriber_id AND subscriber_id =  vam_subscriber_id  AND handset =  vam_msisdn_no  AND sparech[1,3] != 'CCC'  AND charge > 0   AND sbd_bill_ac_no = 'A5085810'
20230325: 082740     DEBUG 11733[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31060221
chaserv: OTGR
charge: 17.3900000000000005684341886080801486968994140625
20230325: 082740     DEBUG 11734[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 082740     DEBUG 11734[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 082740     DEBUG 11735[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 082740     DEBUG 11745[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 082740     DEBUG 11747[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getVcfVrbleChrgFeeDAC(BaseAbstractDACFactory.java:1477) - getVcfVrbleChrgFeeDAC()
20230325: 082740     DEBUG 11766[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeDACImpl com.eppixcomm.eppix.base.dml.VcfVrbleChrgFeeDMLFactory@7907ec20
20230325: 082740     DEBUG 11767[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeDACImpl
20230325: 082740     DEBUG 11772[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082740     DEBUG 11772[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeDACImpl TO MAP
20230325: 082740     DEBUG 11772[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 082740     DEBUG 11773[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 082740     DEBUG 11773[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 082740     DEBUG 11979[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230325: 082740     DEBUG 12021[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230325: 082740     DEBUG 12021[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31060267
chaserv: OTGR
charge: 117.3900000000000005684341886080801486968994140625
20230325: 082740     DEBUG 12022[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 082740     DEBUG 12022[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 082740     DEBUG 12022[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 082740     DEBUG 12022[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 082740     DEBUG 12023[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 082740     DEBUG 12023[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 082740     DEBUG 12023[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 082740     DEBUG 12058[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230325: 082740     DEBUG 12091[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230325: 082740     DEBUG 12092[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31064291
chaserv: OTGR
charge: 33.909999999999996589394868351519107818603515625
20230325: 082740     DEBUG 12092[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 082740     DEBUG 12092[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 082740     DEBUG 12092[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 082740     DEBUG 12093[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 082740     DEBUG 12093[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 082740     DEBUG 12093[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 082740     DEBUG 12093[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 082741     DEBUG 12130[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230325: 082741     DEBUG 12172[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230325: 082741     DEBUG 12173[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31064292
chaserv: OTGR
charge: 33.909999999999996589394868351519107818603515625
20230325: 082741     DEBUG 12174[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 082741     DEBUG 12174[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 082741     DEBUG 12174[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 082741     DEBUG 12175[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 082741     DEBUG 12175[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 082741     DEBUG 12176[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 082741     DEBUG 12176[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 082741     DEBUG 12219[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230325: 082741     DEBUG 12255[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230325: 082741     DEBUG 12257[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000287625
start_period: 2023-01-09
sparech: CFF             BSWA      VS1R
chaserv: EVS5R
charge: 120.4200000000000017053025658242404460906982421875
20230325: 082741     DEBUG 12257[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFF
20230325: 082741     DEBUG 12258[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-09 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 082741     DEBUG 12258[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFF
20230325: 082741     DEBUG 12259[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 082741     DEBUG 12259[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 082741     DEBUG 12259[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 082741     DEBUG 12260[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 082741     DEBUG 12310[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |EVS5R|1000287625|A5085810|A|
20230325: 082741     DEBUG 12345[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR EVS5R COUNT:  0
20230325: 082741     DEBUG 12347[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 120.4200000000000017053025658242404460906982421875
20230325: 082741     DEBUG 12349[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA CUGCHG           619420822
chaserv: ESMCC
charge: 48.59999847412109375
20230325: 082741     DEBUG 12349[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 082741     DEBUG 12349[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 082741     DEBUG 12350[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 082741     DEBUG 12350[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 082741     DEBUG 12351[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 082741     DEBUG 12351[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 082741     DEBUG 12352[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 082741     DEBUG 12422[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCC|1000740188|A5085810|A|
20230325: 082741     DEBUG 12458[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCC COUNT:  0
20230325: 082741     DEBUG 12459[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 48.59999847412109375
20230325: 082741     DEBUG 12459[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA DATACHG           61942082
chaserv: ESMCD
charge: 25.5
20230325: 082741     DEBUG 12460[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 082741     DEBUG 12460[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 082741     DEBUG 12460[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 082741     DEBUG 12461[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 082741     DEBUG 12461[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 082741     DEBUG 12461[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 082741     DEBUG 12462[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 082741     DEBUG 12507[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCD|1000740188|A5085810|A|
20230325: 082741     DEBUG 12543[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCD COUNT:  0
20230325: 082741     DEBUG 12543[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 25.5
20230325: 082741     DEBUG 12544[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA SMSCHG           -49820895
chaserv: ESMCS
charge: 34.5
20230325: 082741     DEBUG 12544[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 082741     DEBUG 12545[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 082741     DEBUG 12545[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 082741     DEBUG 12546[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 082741     DEBUG 12546[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 082741     DEBUG 12547[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 082741     DEBUG 12547[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 082741     DEBUG 12600[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCS|1000740188|A5085810|A|
20230325: 082741     DEBUG 12635[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCS COUNT:  0
20230325: 082741     DEBUG 12635[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 34.5
20230325: 082741     DEBUG 12636[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA VOICECHG           6194208
chaserv: ESMCV
charge: 243
20230325: 082741     DEBUG 12637[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 082741     DEBUG 12637[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 082741     DEBUG 12638[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 082741     DEBUG 12639[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 082741     DEBUG 12639[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 082741     DEBUG 12640[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 082741     DEBUG 12641[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 082741     DEBUG 12686[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCV|1000740188|A5085810|A|
20230325: 082741     DEBUG 12724[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCV COUNT:  0
20230325: 082741     DEBUG 12724[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 243
20230325: 082741     DEBUG 12725[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA ESPRCHG           61942082
chaserv: ESOBD
charge: 7750.81005859375
20230325: 082741     DEBUG 12726[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 082741     DEBUG 12726[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 082741     DEBUG 12727[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 082741     DEBUG 12728[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 082741     DEBUG 12728[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 082741     DEBUG 12728[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 082741     DEBUG 12729[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 082741     DEBUG 12774[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESOBD|1000740188|A5085810|A|
20230325: 082741     DEBUG 12809[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESOBD COUNT:  0
20230325: 082741     DEBUG 12810[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 7750.81005859375
20230325: 082741     DEBUG 12811[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA ESPRCHG           61942082
chaserv: ESOBV
charge: 632.6099853515625
20230325: 082741     DEBUG 12811[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 082741     DEBUG 12811[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 082741     DEBUG 12811[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 082741     DEBUG 12812[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 082741     DEBUG 12812[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 082741     DEBUG 12812[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 082741     DEBUG 12813[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 082741     DEBUG 12849[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESOBV|1000740188|A5085810|A|
20230325: 082741     DEBUG 12885[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESOBV COUNT:  0
20230325: 082741     DEBUG 12886[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 632.6099853515625
20230325: 082741     DEBUG 12887[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1001769643
start_period: 2023-02-05
sparech: CFA SVRCHG         31064290
chaserv: OTGR
charge: 51.2999999999999971578290569595992565155029296875
20230325: 082741     DEBUG 12887[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 082741     DEBUG 12887[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 082741     DEBUG 12888[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 082741     DEBUG 12888[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 082741     DEBUG 12888[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 082741     DEBUG 12889[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 082741     DEBUG 12889[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 082741     DEBUG 12942[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|1001769643|A5085810|A|
20230325: 082741     DEBUG 12978[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  1
20230325: 082741     DEBUG 12979[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1003400281
start_period: 2023-01-20
sparech: CFF             BUDA      UCWD
chaserv: UCPWD
charge: 122.0799999999999982946974341757595539093017578125
20230325: 082741     DEBUG 12980[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFF
20230325: 082741     DEBUG 12980[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-20 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 082741     DEBUG 12980[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFF
20230325: 082741     DEBUG 12981[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 082741     DEBUG 12981[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 082741     DEBUG 12982[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 082741     DEBUG 12982[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 082741     DEBUG 13032[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |UCPWD|1003400281|A5085810|A|
20230325: 082741     DEBUG 13092[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR UCPWD COUNT:  0
20230325: 082741     DEBUG 13093[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 122.0799999999999982946974341757595539093017578125
20230325: 082742     DEBUG 13128[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10193) - 
otherCharges: 8977.5200424194335937500000000000000000000000000000
20230325: 082742     DEBUG 13130[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10197) - 
Before VAT unbilledCharges: 35617.1099575805637869052588939666748046875000000000
20230325: 082742     DEBUG 13130[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10201) - 
UNBILLED CHARGES + VAT: 40959.676451217648354941047728061676025390625000000000
20230325: 082742     DEBUG 13135[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1106) - 
TOTAL MAX ALLOWED: 537477.52
20230325: 082742     DEBUG 13135[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSpulByAccount
20230325: 082742     DEBUG 13136[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSpulByAccount|0||

20230325: 082742     DEBUG 13889[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSpulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SPUL' AND sbd_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 082742     DEBUG 13890[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4e04a765
20230325: 082742     DEBUG 13967[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.CrbaCustRiskAux )
20230325: 082742     DEBUG 13967[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractBLO.get(CrbaCustRiskAuxAbstractBLO.java:270) - get( filter )
20230325: 082742     DEBUG 13967[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractDACImpl.get(CrbaCustRiskAuxAbstractDACImpl.java:322) - get( filter )
20230325: 082742     DEBUG 13968[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
CrbaCustRiskAux|0|equalcrbaBillAcNo|

20230325: 082742     DEBUG 14005[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: CrbaCustRiskAux
Execute SQL Statement: SELECT CRBA_BILL_AC_NO, CRBA_ACC_DISC_VAL, CRBA_AUX_FLOAT_1, CRBA_AUX_FLOAT_2, CRBA_AUX_FLOAT_3, CRBA_AUX_INT_1, CRBA_AUX_INT_2, CRBA_AUX_INT_3, CRBA_AUX_CHAR_1, CRBA_AUX_CHAR_2, CRBA_AUX_CHAR_3, CRBA_AUX_DATE_1, CRBA_AUX_DATE_2, CRBA_AUX_DATE_3
FROM crba_cust_risk_aux
WHERE CRBA_BILL_AC_NO = ? 
Argument(s): |A5085810|
20230325: 082742     DEBUG 14007[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@246ae04d
20230325: 082742     DEBUG 14079[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSulByAccount
20230325: 082742     DEBUG 14079[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSulByAccount|0||

20230325: 082743     DEBUG 14117[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SUL' AND sbd_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 082743     DEBUG 14118[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1e67b872
20230325: 082743     DEBUG 14201[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getTsServiceBySubscriber|0|NONE|

20230325: 082746     DEBUG 17752[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getTsServiceBySubscriber
Execute SQL Statement:  select * from ts_tariff_service  where ts_service_code  in  (select vas_service_code from vas_active_service  where vas_subscriber_id in   (select sbd_subscriber_id from sbd_sub_dets  where sbd_bill_ac_no = ?))  and ts_package_code =  ?  and ts_internal_tariff = ?  and (ts_sub_charge1 <> '' ) 
Argument(s): |A5085810|M4BDS|YT_34|
20230325: 082746     DEBUG 17754[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6fb554cc
20230325: 082746     DEBUG 17755[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: AR100
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082746     DEBUG 17755[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: AR100
20230325: 082746     DEBUG 17755[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082746     DEBUG 17755[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082746     DEBUG 17756[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082746     DEBUG 17756[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082746     DEBUG 17828[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |AR100|M1|2023-03-25|F|
20230325: 082746     DEBUG 17865[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-04-04
20230325: 082746     DEBUG 17866[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-04-04
20230325: 082746     DEBUG 17866[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082746     DEBUG 17866[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082746     DEBUG 17866[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082746     DEBUG 17867[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082746     DEBUG 17903[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |AR100|M1|2018-04-04|F|
20230325: 082746     DEBUG 17904[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3a03464
20230325: 082746     DEBUG 17976[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@617c74e5
20230325: 082746     DEBUG 17977[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: AR50
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082746     DEBUG 17977[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: AR50
20230325: 082746     DEBUG 17977[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082746     DEBUG 17978[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082746     DEBUG 17978[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082746     DEBUG 17978[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082746     DEBUG 18021[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |AR50|M1|2023-03-25|F|
20230325: 082746     DEBUG 18057[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-07-26
20230325: 082746     DEBUG 18058[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-07-26
20230325: 082746     DEBUG 18059[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082746     DEBUG 18059[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082746     DEBUG 18059[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082746     DEBUG 18060[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082747     DEBUG 18097[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |AR50|M1|2018-07-26|F|
20230325: 082747     DEBUG 18098[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2c9f9fb0
20230325: 082747     DEBUG 18181[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@9f70c54
20230325: 082747     DEBUG 18182[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: AR500
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082747     DEBUG 18182[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: AR500
20230325: 082747     DEBUG 18183[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082747     DEBUG 18183[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082747     DEBUG 18183[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082747     DEBUG 18184[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082747     DEBUG 18219[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |AR500|M1|2023-03-25|F|
20230325: 082747     DEBUG 18260[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-04-04
20230325: 082747     DEBUG 18261[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-04-04
20230325: 082747     DEBUG 18261[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082747     DEBUG 18261[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082747     DEBUG 18261[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082747     DEBUG 18262[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082747     DEBUG 18297[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |AR500|M1|2018-04-04|F|
20230325: 082747     DEBUG 18299[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@337d0578
20230325: 082747     DEBUG 18371[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@61a485d2
20230325: 082747     DEBUG 18372[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: BDB01
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082747     DEBUG 18372[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: BDB01
20230325: 082747     DEBUG 18374[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082747     DEBUG 18374[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082747     DEBUG 18374[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082747     DEBUG 18375[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082747     DEBUG 18425[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |BDB01|M1|2023-03-25|F|
20230325: 082747     DEBUG 18464[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-15
20230325: 082747     DEBUG 18465[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-15
20230325: 082747     DEBUG 18466[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082747     DEBUG 18466[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082747     DEBUG 18466[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082747     DEBUG 18467[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082747     DEBUG 18502[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |BDB01|M1|2018-05-15|F|
20230325: 082747     DEBUG 18505[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6a024a67
20230325: 082747     DEBUG 18574[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@174d20a
20230325: 082747     DEBUG 18575[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: LTE
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082747     DEBUG 18575[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: LTE
20230325: 082747     DEBUG 18576[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082747     DEBUG 18576[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082747     DEBUG 18577[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082747     DEBUG 18577[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082747     DEBUG 18625[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |LTE|M1|2023-03-25|F|
20230325: 082747     DEBUG 18663[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2013-05-16
20230325: 082747     DEBUG 18664[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2013-05-16
20230325: 082747     DEBUG 18664[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082747     DEBUG 18665[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082747     DEBUG 18665[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082747     DEBUG 18665[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082747     DEBUG 18711[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |LTE|M1|2013-05-16|F|
20230325: 082747     DEBUG 18712[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5f375618
20230325: 082747     DEBUG 18782[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@32d992b2
20230325: 082747     DEBUG 18783[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: MBBIP
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082747     DEBUG 18783[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: MBBIP
20230325: 082747     DEBUG 18783[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082747     DEBUG 18783[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082747     DEBUG 18783[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082747     DEBUG 18784[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082747     DEBUG 18821[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |MBBIP|M1|2023-03-25|F|
20230325: 082747     DEBUG 18858[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2022-08-10
20230325: 082747     DEBUG 18859[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2022-08-10
20230325: 082747     DEBUG 18860[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082747     DEBUG 18860[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082747     DEBUG 18860[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082747     DEBUG 18862[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082747     DEBUG 18919[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |MBBIP|M1|2022-08-10|F|
20230325: 082747     DEBUG 18920[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@51081592
20230325: 082747     DEBUG 19009[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@9629756
20230325: 082747     DEBUG 19010[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: OA25
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082747     DEBUG 19010[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: OA25
20230325: 082747     DEBUG 19011[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082747     DEBUG 19011[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082747     DEBUG 19012[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082747     DEBUG 19012[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082747     DEBUG 19049[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |OA25|M1|2023-03-25|F|
20230325: 082747     DEBUG 19087[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2016-05-27
20230325: 082747     DEBUG 19088[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2016-05-27
20230325: 082747     DEBUG 19088[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082747     DEBUG 19088[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082747     DEBUG 19089[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082747     DEBUG 19089[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082748     DEBUG 19125[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |OA25|M1|2016-05-27|F|
20230325: 082748     DEBUG 19126[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@28feb3fa
20230325: 082748     DEBUG 19197[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@51565ec2
20230325: 082748     DEBUG 19197[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: OR50
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082748     DEBUG 19197[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: OR50
20230325: 082748     DEBUG 19198[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082748     DEBUG 19198[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082748     DEBUG 19198[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082748     DEBUG 19198[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082748     DEBUG 19239[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |OR50|M1|2023-03-25|F|
20230325: 082748     DEBUG 19276[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-04-04
20230325: 082748     DEBUG 19276[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-04-04
20230325: 082748     DEBUG 19276[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082748     DEBUG 19276[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082748     DEBUG 19276[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082748     DEBUG 19276[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082748     DEBUG 19319[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |OR50|M1|2018-04-04|F|
20230325: 082748     DEBUG 19320[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@8bd1b6a
20230325: 082748     DEBUG 19389[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@cb5822
20230325: 082748     DEBUG 19389[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: PASS
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082748     DEBUG 19390[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: PASS
20230325: 082748     DEBUG 19390[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082748     DEBUG 19390[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082748     DEBUG 19390[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082748     DEBUG 19390[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082748     DEBUG 19425[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |PASS|M1|2023-03-25|F|
20230325: 082748     DEBUG 19460[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2020-01-23
20230325: 082748     DEBUG 19460[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2020-01-23
20230325: 082748     DEBUG 19461[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082748     DEBUG 19461[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082748     DEBUG 19461[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082748     DEBUG 19461[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082748     DEBUG 19496[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |PASS|M1|2020-01-23|F|
20230325: 082748     DEBUG 19497[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@61832929
20230325: 082748     DEBUG 19570[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3ffc5af1
20230325: 082748     DEBUG 19570[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: R750
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082748     DEBUG 19570[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: R750
20230325: 082748     DEBUG 19571[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082748     DEBUG 19571[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082748     DEBUG 19571[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082748     DEBUG 19571[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082748     DEBUG 19614[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |R750|M1|2023-03-25|F|
20230325: 082748     DEBUG 19650[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2021-08-04
20230325: 082748     DEBUG 19651[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2021-08-04
20230325: 082748     DEBUG 19651[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082748     DEBUG 19651[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082748     DEBUG 19652[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082748     DEBUG 19652[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082748     DEBUG 19689[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |R750|M1|2021-08-04|F|
20230325: 082748     DEBUG 19690[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1bce4f0a
20230325: 082748     DEBUG 19764[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5c3bd550
20230325: 082748     DEBUG 19765[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: SMR3
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082748     DEBUG 19766[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: SMR3
20230325: 082748     DEBUG 19766[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082748     DEBUG 19766[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082748     DEBUG 19767[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082748     DEBUG 19767[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082748     DEBUG 19811[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |SMR3|M1|2023-03-25|F|
20230325: 082748     DEBUG 19847[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-08-08
20230325: 082748     DEBUG 19847[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-08-08
20230325: 082748     DEBUG 19849[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082748     DEBUG 19849[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082748     DEBUG 19850[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082748     DEBUG 19850[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082748     DEBUG 19885[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |SMR3|M1|2018-08-08|F|
20230325: 082748     DEBUG 19886[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@343f4d3d
20230325: 082748     DEBUG 19967[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5442a311
20230325: 082748     DEBUG 19968[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: SMR30
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082748     DEBUG 19969[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: SMR30
20230325: 082748     DEBUG 19970[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082748     DEBUG 19970[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082748     DEBUG 19971[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082748     DEBUG 19971[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082748     DEBUG 20009[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |SMR30|M1|2023-03-25|F|
20230325: 082748     DEBUG 20045[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-04-04
20230325: 082748     DEBUG 20046[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-04-04
20230325: 082748     DEBUG 20046[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082748     DEBUG 20046[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082748     DEBUG 20046[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082748     DEBUG 20046[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082748     DEBUG 20085[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |SMR30|M1|2018-04-04|F|
20230325: 082748     DEBUG 20085[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@57fffcd7
20230325: 082749     DEBUG 20162[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@598067a5
20230325: 082749     DEBUG 20163[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: UCMS
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082749     DEBUG 20163[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: UCMS
20230325: 082749     DEBUG 20163[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082749     DEBUG 20164[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082749     DEBUG 20164[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082749     DEBUG 20164[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082749     DEBUG 20217[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |UCMS|M1|2023-03-25|F|
20230325: 082749     DEBUG 20253[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2021-07-20
20230325: 082749     DEBUG 20254[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2021-07-20
20230325: 082749     DEBUG 20254[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082749     DEBUG 20254[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082749     DEBUG 20254[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082749     DEBUG 20255[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082749     DEBUG 20292[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |UCMS|M1|2021-07-20|F|
20230325: 082749     DEBUG 20293[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7085bdee
20230325: 082749     DEBUG 20363[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5700d6b1
20230325: 082749     DEBUG 20364[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: UCMV
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082749     DEBUG 20364[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: UCMV
20230325: 082749     DEBUG 20365[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082749     DEBUG 20365[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082749     DEBUG 20365[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082749     DEBUG 20365[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082749     DEBUG 20403[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |UCMV|M1|2023-03-25|F|
20230325: 082749     DEBUG 20438[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2021-07-20
20230325: 082749     DEBUG 20438[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2021-07-20
20230325: 082749     DEBUG 20439[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082749     DEBUG 20439[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082749     DEBUG 20439[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082749     DEBUG 20440[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082749     DEBUG 20474[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |UCMV|M1|2021-07-20|F|
20230325: 082749     DEBUG 20475[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@cb644e
20230325: 082749     DEBUG 20548[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@56ef9176
20230325: 082749     DEBUG 20549[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: EVS5R
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082749     DEBUG 20549[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: EVS5R
20230325: 082749     DEBUG 20551[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082749     DEBUG 20551[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082749     DEBUG 20551[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082749     DEBUG 20551[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082749     DEBUG 20618[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |EVS5R|M1|2023-03-25|F|
20230325: 082749     DEBUG 20672[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2022-11-13
20230325: 082749     DEBUG 20673[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2022-11-13
20230325: 082749     DEBUG 20673[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082749     DEBUG 20673[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082749     DEBUG 20673[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082749     DEBUG 20674[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082749     DEBUG 20709[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |EVS5R|M1|2022-11-13|F|
20230325: 082749     DEBUG 20711[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@20322d26
20230325: 082749     DEBUG 20788[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@64bf3bbf
20230325: 082749     DEBUG 20789[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: WABR
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082749     DEBUG 20789[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: WABR
20230325: 082749     DEBUG 20789[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082749     DEBUG 20789[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082749     DEBUG 20790[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082749     DEBUG 20790[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082749     DEBUG 20833[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |WABR|M1|2023-03-25|F|
20230325: 082749     DEBUG 20869[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2020-09-28
20230325: 082749     DEBUG 20870[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2020-09-28
20230325: 082749     DEBUG 20871[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082749     DEBUG 20871[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082749     DEBUG 20871[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082749     DEBUG 20871[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082749     DEBUG 20911[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |WABR|M1|2020-09-28|F|
20230325: 082749     DEBUG 20911[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@21213b92
20230325: 082749     DEBUG 20996[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3327bd23
20230325: 082749     DEBUG 20997[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: ZRDB
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082749     DEBUG 20997[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: ZRDB
20230325: 082749     DEBUG 20998[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082749     DEBUG 20998[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082749     DEBUG 20998[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082749     DEBUG 20999[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082749     DEBUG 21039[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |ZRDB|M1|2023-03-25|F|
20230325: 082749     DEBUG 21078[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-03-29
20230325: 082749     DEBUG 21079[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-03-29
20230325: 082749     DEBUG 21080[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082749     DEBUG 21080[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082749     DEBUG 21081[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082749     DEBUG 21081[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082750     DEBUG 21129[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |ZRDB|M1|2018-03-29|F|
20230325: 082750     DEBUG 21130[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2286778
20230325: 082750     DEBUG 21205[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6d7b4f4c
20230325: 082750     DEBUG 21206[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: M4BDS
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082750     DEBUG 21206[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: M4BDS
20230325: 082750     DEBUG 21207[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082750     DEBUG 21207[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082750     DEBUG 21207[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082750     DEBUG 21208[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082750     DEBUG 21257[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |M4BDS|M1|2023-03-25|F|
20230325: 082750     DEBUG 21304[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2021-11-22
20230325: 082750     DEBUG 21304[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2021-11-22
20230325: 082750     DEBUG 21305[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082750     DEBUG 21305[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082750     DEBUG 21305[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082750     DEBUG 21306[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082750     DEBUG 21347[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |M4BDS|M1|2021-11-22|F|
20230325: 082750     DEBUG 21348[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@335eadca
20230325: 082750     DEBUG 21434[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@eec5a4a
20230325: 082750     DEBUG 21435[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: BVB02
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082750     DEBUG 21435[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: BVB02
20230325: 082750     DEBUG 21436[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082750     DEBUG 21436[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082750     DEBUG 21437[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082750     DEBUG 21437[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082750     DEBUG 21489[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |BVB02|M1|2023-03-25|F|
20230325: 082750     DEBUG 21527[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-15
20230325: 082750     DEBUG 21527[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-15
20230325: 082750     DEBUG 21528[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082750     DEBUG 21528[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082750     DEBUG 21528[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082750     DEBUG 21528[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082750     DEBUG 21563[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |BVB02|M1|2018-05-15|F|
20230325: 082750     DEBUG 21564[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2b9627bc
20230325: 082750     DEBUG 21635[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4f970963
20230325: 082750     DEBUG 21636[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: C20G
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082750     DEBUG 21636[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: C20G
20230325: 082750     DEBUG 21637[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082750     DEBUG 21638[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082750     DEBUG 21638[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082750     DEBUG 21639[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082750     DEBUG 21674[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |C20G|M1|2023-03-25|F|
20230325: 082750     DEBUG 21710[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-11
20230325: 082750     DEBUG 21711[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-11
20230325: 082750     DEBUG 21711[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082750     DEBUG 21711[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082750     DEBUG 21712[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082750     DEBUG 21712[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082750     DEBUG 21763[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |C20G|M1|2018-05-11|F|
20230325: 082750     DEBUG 21764[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@627551fb
20230325: 082750     DEBUG 21835[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2758fe70
20230325: 082750     DEBUG 21835[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: CL
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082750     DEBUG 21836[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: CL
20230325: 082750     DEBUG 21836[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082750     DEBUG 21837[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082750     DEBUG 21837[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082750     DEBUG 21837[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082750     DEBUG 21875[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |CL|M1|2023-03-25|F|
20230325: 082750     DEBUG 21911[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2019-05-25
20230325: 082750     DEBUG 21911[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2019-05-25
20230325: 082750     DEBUG 21913[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082750     DEBUG 21913[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082750     DEBUG 21914[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082750     DEBUG 21914[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082750     DEBUG 21949[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |CL|M1|2019-05-25|F|
20230325: 082750     DEBUG 21950[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6321e813
20230325: 082750     DEBUG 22023[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@22a67b4
20230325: 082750     DEBUG 22024[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: CUGR6
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082750     DEBUG 22024[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: CUGR6
20230325: 082750     DEBUG 22024[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082750     DEBUG 22025[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082750     DEBUG 22025[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082750     DEBUG 22025[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082750     DEBUG 22061[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |CUGR6|M1|2023-03-25|F|
20230325: 082751     DEBUG 22096[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2019-04-29
20230325: 082751     DEBUG 22097[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2019-04-29
20230325: 082751     DEBUG 22097[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082751     DEBUG 22098[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082751     DEBUG 22098[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082751     DEBUG 22098[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082751     DEBUG 22135[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |CUGR6|M1|2019-04-29|F|
20230325: 082751     DEBUG 22136[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6c49835d
20230325: 082751     DEBUG 22205[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@67205a84
20230325: 082751     DEBUG 22207[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: DBR
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082751     DEBUG 22207[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: DBR
20230325: 082751     DEBUG 22207[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082751     DEBUG 22208[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082751     DEBUG 22208[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082751     DEBUG 22208[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082751     DEBUG 22246[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |DBR|M1|2023-03-25|F|
20230325: 082751     DEBUG 22281[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-10-14
20230325: 082751     DEBUG 22282[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-10-14
20230325: 082751     DEBUG 22282[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082751     DEBUG 22282[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082751     DEBUG 22283[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082751     DEBUG 22283[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082751     DEBUG 22323[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |DBR|M1|2018-10-14|F|
20230325: 082751     DEBUG 22324[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7f13d6e
20230325: 082751     DEBUG 22394[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@d44fc21
20230325: 082751     DEBUG 22395[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: DBR1
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082751     DEBUG 22395[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: DBR1
20230325: 082751     DEBUG 22396[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082751     DEBUG 22397[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082751     DEBUG 22397[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082751     DEBUG 22397[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082751     DEBUG 22435[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |DBR1|M1|2023-03-25|F|
20230325: 082751     DEBUG 22470[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-11
20230325: 082751     DEBUG 22470[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-11
20230325: 082751     DEBUG 22470[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082751     DEBUG 22470[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082751     DEBUG 22470[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082751     DEBUG 22470[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082751     DEBUG 22505[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |DBR1|M1|2018-05-11|F|
20230325: 082751     DEBUG 22505[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5f282abb
20230325: 082751     DEBUG 22579[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1e965684
20230325: 082751     DEBUG 22579[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: DR5M
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082751     DEBUG 22579[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: DR5M
20230325: 082751     DEBUG 22580[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082751     DEBUG 22580[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082751     DEBUG 22580[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082751     DEBUG 22580[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082751     DEBUG 22616[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |DR5M|M1|2023-03-25|F|
20230325: 082751     DEBUG 22650[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-15
20230325: 082751     DEBUG 22650[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-15
20230325: 082751     DEBUG 22650[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082751     DEBUG 22650[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082751     DEBUG 22650[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082751     DEBUG 22651[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082751     DEBUG 22687[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |DR5M|M1|2018-05-15|F|
20230325: 082751     DEBUG 22687[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1b68ddbd
20230325: 082751     DEBUG 22758[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@59e5ddf
20230325: 082751     DEBUG 22795[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: ERR
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082751     DEBUG 22795[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: ERR
20230325: 082751     DEBUG 22795[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082751     DEBUG 22795[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082751     DEBUG 22797[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082751     DEBUG 22797[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082751     DEBUG 22833[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |ERR|M1|2023-03-25|F|
20230325: 082751     DEBUG 22868[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2020-12-14
20230325: 082751     DEBUG 22868[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2020-12-14
20230325: 082751     DEBUG 22869[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082751     DEBUG 22869[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082751     DEBUG 22869[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082751     DEBUG 22869[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082751     DEBUG 22904[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |ERR|M1|2020-12-14|F|
20230325: 082751     DEBUG 22905[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7a1ebcd8
20230325: 082954     DEBUG     0[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.loadproperties(TestSubscriberServices.java:280) - loading appProperties
20230325: 082954     DEBUG     6[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.loadproperties(TestSubscriberServices.java:287) - appProperties loaded : {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230325: 082954     DEBUG     7[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:300) - DB Connection start
20230325: 082954     DEBUG     7[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:303) - {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230325: 082955     DEBUG   702[main] - com.eppixcomm.eppix.common.data.DACFactory.<init>(DACFactory.java:95) - constructor( connection, thrower )
20230325: 082955     DEBUG   705[main] - com.eppixcomm.eppix.common.data.ConnectionContext.connect(ConnectionContext.java:100) - connect( connection )
20230325: 082955     DEBUG   706[main] - com.eppixcomm.eppix.common.data.ConnectionContext.get(ConnectionContext.java:82) - get()
20230325: 082955     DEBUG   707[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberActiveServices )
20230325: 082955     DEBUG   742[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberActiveServicesDAC(BaseDACFactory.java:506) - getSubscriberActiveServicesDAC
20230325: 082955     DEBUG   749[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl com.eppixcomm.eppix.base.dml.SubscriberActiveServicesDML@6d21714c
20230325: 082955     DEBUG   749[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl
20230325: 082955     DEBUG   774[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082955     DEBUG   774[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl TO MAP
20230325: 082955     DEBUG   776[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230325: 082955     DEBUG   778[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetServiceDiscountDAC(BaseDACFactory.java:426) - getGetServiceDiscountDAC()
20230325: 082955     DEBUG   781[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl com.eppixcomm.eppix.base.dml.GetServiceDiscountDML@619a5dff
20230325: 082955     DEBUG   782[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl
20230325: 082955     DEBUG   782[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082955     DEBUG   783[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl TO MAP
20230325: 082955     DEBUG   785[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SimAPNServices )
20230325: 082955     DEBUG   788[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSimAPNServicesDAC(BaseDACFactory.java:467) - getSimAPNServicesDAC
20230325: 082955     DEBUG   790[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl com.eppixcomm.eppix.base.dml.SimAPNServicesDML@6438a396
20230325: 082955     DEBUG   790[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl
20230325: 082955     DEBUG   790[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082955     DEBUG   791[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl TO MAP
20230325: 082955     DEBUG   792[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowed )
20230325: 082955     DEBUG   794[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetSULMaxUsageAllowedDAC(BaseDACFactory.java:532) - getGetSULMaxUsageAllowedDAC
20230325: 082955     DEBUG   798[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl com.eppixcomm.eppix.base.dml.GetSULMaxUsageAllowedDML@7506e922
20230325: 082955     DEBUG   798[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl
20230325: 082955     DEBUG   798[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082955     DEBUG   799[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl TO MAP
20230325: 082955     DEBUG   799[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230325: 082955     DEBUG   806[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230325: 082955     DEBUG   886[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberUpgradeMigradeDAC(BaseDACFactory.java:519) - getSubscriberUpgradeMigradeDAC
20230325: 082955     DEBUG   891[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl com.eppixcomm.eppix.base.dml.SubscriberUpgradeMigradeDML@5d6f64b1
20230325: 082955     DEBUG   891[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl
20230325: 082955     DEBUG   894[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082955     DEBUG   894[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl TO MAP
20230325: 082955     DEBUG   894[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230325: 082955     DEBUG   894[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowed )
20230325: 082955     DEBUG   895[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230325: 082955     DEBUG   895[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230325: 082955     DEBUG   895[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230325: 082955     DEBUG   895[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:336) - DB Connection successfull
20230325: 082955     DEBUG   900[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SbdSubDets )
20230325: 082955     DEBUG  1008[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSbdSubDetsDAC(BaseAbstractDACFactory.java:234) - getSbdSubDetsDAC()
20230325: 082955     DEBUG  1016[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl com.eppixcomm.eppix.base.dml.SbdSubDetsAbstractDMLFactory@f2a0b8e
20230325: 082955     DEBUG  1016[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl
20230325: 082955     DEBUG  1017[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082955     DEBUG  1018[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl TO MAP
20230325: 082955     DEBUG  1018[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractBLO.get(SbdSubDetsAbstractBLO.java:531) - get( filter )
20230325: 082955     DEBUG  1018[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractDACImpl.get(SbdSubDetsAbstractDACImpl.java:556) - get( filter )
20230325: 082955     DEBUG  1022[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
SbdSubDets|0|equalSbdSubscriberId|

20230325: 082955     DEBUG  1167[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SbdSubDets
Execute SQL Statement: SELECT SBD_SUBSCRIBER_ID, SBD_DIALLING_NO, SBD_BILL_AC_NO, SBD_CONNECT_DATE, SBD_DCONNECT_DATE, SBD_TERM_DATE, SBD_TITLE, SBD_SURNAME, SBD_FIRSTNAME, SBD_GENDER, SBD_DOB, SBD_PASSWORD, SBD_LOCATION_CODE, SBD_BILL_CYCLE, SBD_PACKAGE_CODE, SBD_BILLED_UPTO, SBD_TARIFF_PLAN
FROM SBD_SUB_DETS
WHERE SBD_SUBSCRIBER_ID = ?
Argument(s): |1003411985|
20230325: 082955     DEBUG  1176[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3b764bce
20230325: 082955     DEBUG  1263[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSulByAccount
20230325: 082955     DEBUG  1266[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSulByAccount|0||

20230325: 082956     DEBUG  1420[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SUL' AND sbd_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 082956     DEBUG  1426[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6bf2d08e
20230325: 082956     DEBUG  1518[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getCrbUnbillCharges
20230325: 082956     DEBUG  1519[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getCrbUnbillCharges|0||

20230325: 082956     DEBUG  1631[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getCrbUnbillCharges
Execute SQL Statement: SELECT NVL((crb_unbill_charges + crb_unbill_calls), 0) FROM crb_cust_risk_bal WHERE crb_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 082956     DEBUG  1632[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7e774085
20230325: 082956     DEBUG  1719[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getAccountCreditLimit
20230325: 082956     DEBUG  1720[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getAccountCreditLimit|0||

20230325: 082956     DEBUG  1854[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getAccountCreditLimit
Execute SQL Statement: SELECT credit_limit FROM slcustm WHERE customer = ? 
Argument(s): |A5085810|
20230325: 082956     DEBUG  1855[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1b701da1
20230325: 082956     DEBUG  1931[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSubscriberVasServices|0|NONE|

20230325: 082956     DEBUG  2062[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getSubscriberVasServices
Execute SQL Statement: SELECT vas_service_code FROM vas_active_service WHERE vas_subscriber_id = ? AND vas_service_code NOT IN (SELECT tt_type FROM tt_type_text WHERE tt_group = 'IDACCSRVEX');
Argument(s): |1003411985|
20230325: 082956     DEBUG  2067[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@15615099
20230325: 082956     DEBUG  2073[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 082956     DEBUG  2075[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getTtTypeTextDAC(BaseAbstractDACFactory.java:144) - getTtTypeTextDAC()
20230325: 082956     DEBUG  2097[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.TtTypeTextDACImpl com.eppixcomm.eppix.base.dml.TtTypeTextAbstractDMLFactory@1963006a
20230325: 082956     DEBUG  2097[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.TtTypeTextDACImpl
20230325: 082956     DEBUG  2102[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082956     DEBUG  2103[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.TtTypeTextDACImpl TO MAP
20230325: 082956     DEBUG  2104[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 082956     DEBUG  2105[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 082956     DEBUG  2107[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 082956     DEBUG  2244[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|BSTL|
20230325: 082956     ERROR  2315[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: BSTL
20230325: 082956     DEBUG  2315[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 082956     DEBUG  2316[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 082957     DEBUG  2432[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |BSTL|1003411985|
20230325: 082957     DEBUG  2433[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5e91993f
20230325: 082957     DEBUG  2516[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@379619aa
20230325: 082957     DEBUG  2518[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 082957     DEBUG  2519[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 082957     DEBUG  2519[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 082957     DEBUG  2520[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 082957     DEBUG  2567[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|CSCP|
20230325: 082957     ERROR  2638[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: CSCP
20230325: 082957     DEBUG  2639[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 082957     DEBUG  2640[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 082957     DEBUG  2691[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |CSCP|1003411985|
20230325: 082957     DEBUG  2691[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4361bd48
20230325: 082957     DEBUG  2765[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2401f4c3
20230325: 082957     DEBUG  2765[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 082957     DEBUG  2766[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 082957     DEBUG  2766[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 082957     DEBUG  2766[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 082957     DEBUG  2802[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|EVE |
20230325: 082957     ERROR  2875[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: EVE 
20230325: 082957     DEBUG  2876[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 082957     DEBUG  2876[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 082957     DEBUG  2914[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |EVE |1003411985|
20230325: 082957     DEBUG  2914[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7d6f77cc
20230325: 082957     DEBUG  2984[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@73a28541
20230325: 082957     DEBUG  2985[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 082957     DEBUG  2985[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 082957     DEBUG  2985[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 082957     DEBUG  2986[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 082957     DEBUG  3031[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|ITBL|
20230325: 082957     ERROR  3111[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: ITBL
20230325: 082957     DEBUG  3111[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 082957     DEBUG  3112[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 082957     DEBUG  3150[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |ITBL|1003411985|
20230325: 082957     DEBUG  3151[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@244038d0
20230325: 082957     DEBUG  3223[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5fdef03a
20230325: 082957     DEBUG  3224[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 082957     DEBUG  3225[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 082957     DEBUG  3225[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 082957     DEBUG  3225[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 082957     DEBUG  3262[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|MBIP|
20230325: 082958     ERROR  3342[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: MBIP
20230325: 082958     DEBUG  3343[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 082958     DEBUG  3343[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 082958     DEBUG  3381[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |MBIP|1003411985|
20230325: 082958     DEBUG  3383[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5c8da962
20230325: 082958     DEBUG  3463[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.PshParamServHdr )
20230325: 082958     DEBUG  3466[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getPshParamServHdrDAC(BaseDACFactory.java:199) - getPshParamServHdrDAC()
20230325: 082958     DEBUG  3485[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.PshParamServHdrDACImpl com.eppixcomm.eppix.base.dml.PshParamServHdrAbstractDMLFactory@368239c8
20230325: 082958     DEBUG  3498[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.PshParamServHdrDACImpl
20230325: 082958     DEBUG  3501[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082958     DEBUG  3501[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.PshParamServHdrDACImpl TO MAP
20230325: 082958     DEBUG  3501[main] - com.eppixcomm.eppix.base.blo.PshParamServHdrAbstractBLO.get(PshParamServHdrAbstractBLO.java:516) - get( filter )
20230325: 082958     DEBUG  3501[main] - com.eppixcomm.eppix.base.blo.PshParamServHdrAbstractDACImpl.get(PshParamServHdrAbstractDACImpl.java:448) - get( filter )
20230325: 082958     DEBUG  3502[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
PshParamServHdr|0|equalPshServiceCode+equalPshSubscriberId+equalPshArchived|

20230325: 082958     DEBUG  3632[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: PshParamServHdr
Execute SQL Statement: SELECT PSH_ID, PSH_SERVICE_CODE, PSH_SERVICE_TYPE, PSH_SUBSCRIBER_ID, PSH_SIM_NO, PSH_MSISDN_NO, PSH_ARCHIVED
FROM PSH_PARAM_SERV_HDR
WHERE (PSH_SERVICE_CODE) = ? AND PSH_SUBSCRIBER_ID = ? AND (PSH_ARCHIVED) = ?
Argument(s): |MBIP|1003411985|N|
20230325: 082958     DEBUG  3633[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@11028347
20230325: 082958     DEBUG  3710[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getPshPsdServices|0|NONE|

20230325: 082958     DEBUG  3835[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getPshPsdServices
Execute SQL Statement: SELECT * FROM psh_param_serv_hdr, psd_param_serv_det WHERE psd_psh_id = ? AND psh_id = psd_psh_id AND psd_param_active = 'Y' 
Argument(s): |23449756|
20230325: 082958     DEBUG  3837[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@77468bd9
20230325: 082958     DEBUG  3882[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 082958     DEBUG  3882[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 082958     DEBUG  3883[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 082958     DEBUG  3883[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 082958     DEBUG  3919[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |CHGVARPARM|MBSIP|
20230325: 082958     ERROR  3989[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: CHGVARPARM and type: MBSIP
20230325: 082958     DEBUG  3990[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getChgNetId|0|NONE|

20230325: 082958     DEBUG  4100[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getChgNetId
Execute SQL Statement: SELECT chg_netid FROM chg_charges WHERE chg_code = ? ORDER BY chg_effective_date DESC
Argument(s): |MBBIP|
20230325: 082958     DEBUG  4101[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@61064425
20230325: 082958     DEBUG  4174[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: MBBIP
String netId: M1   
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 082958     DEBUG  4174[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: MBBIP
20230325: 082958     DEBUG  4179[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082958     DEBUG  4180[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getChgChargesDAC(BaseAbstractDACFactory.java:578) - getChgChargesDAC()
20230325: 082958     DEBUG  4194[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.ChgChargesDACImpl com.eppixcomm.eppix.base.dml.ChgChargesDMLFactory@2e5c649
20230325: 082958     DEBUG  4194[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.ChgChargesDACImpl
20230325: 082958     DEBUG  4198[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 082958     DEBUG  4199[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.ChgChargesDACImpl TO MAP
20230325: 082958     DEBUG  4199[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 082958     DEBUG  4200[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 082958     DEBUG  4200[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 082958     DEBUG  4329[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |MBBIP|M1   |2023-03-25|F|
20230325: 082959     DEBUG  4365[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2022-08-10
20230325: 082959     DEBUG  4366[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2022-08-10
20230325: 082959     DEBUG  4367[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 082959     DEBUG  4368[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 082959     DEBUG  4368[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 082959     DEBUG  4369[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 082959     DEBUG  4493[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |MBBIP|M1   |2022-08-10|F|
20230325: 082959     DEBUG  4497[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2ff5659e
20230325: 082959     DEBUG  4567[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@161cd475
20230325: 082959     DEBUG  4567[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 082959     DEBUG  4567[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 082959     DEBUG  4567[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 082959     DEBUG  4568[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 082959     DEBUG  4604[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|PENB|
20230325: 082959     ERROR  4673[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: PENB
20230325: 082959     DEBUG  4674[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 082959     DEBUG  4675[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 082959     DEBUG  4715[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |PENB|1003411985|
20230325: 082959     DEBUG  4717[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@27ddd392
20230325: 082959     DEBUG  4793[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7cef4e59
20230325: 082959     DEBUG  4794[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 082959     DEBUG  4795[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 082959     DEBUG  4795[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 082959     DEBUG  4796[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 082959     DEBUG  4841[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|SPUL|
20230325: 082959     ERROR  4917[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: SPUL
20230325: 082959     DEBUG  4918[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 082959     DEBUG  4918[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 082959     DEBUG  4956[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |SPUL|1003411985|
20230325: 082959     DEBUG  4957[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@16b4a017
20230325: 082959     DEBUG  5028[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2a3046da
20230325: 082959     DEBUG  5029[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 082959     DEBUG  5030[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 082959     DEBUG  5030[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 082959     DEBUG  5031[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 082959     DEBUG  5090[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|SUB |
20230325: 082959     ERROR  5164[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: SUB 
20230325: 082959     DEBUG  5165[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 082959     DEBUG  5165[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 082959     DEBUG  5203[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |SUB |1003411985|
20230325: 082959     DEBUG  5204[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@59690aa4
20230325: 082959     DEBUG  5283[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@574caa3f
20230325: 082959     DEBUG  5319[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 082959     DEBUG  5320[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 082959     DEBUG  5321[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 082959     DEBUG  5322[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 083000     DEBUG  5357[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|VPNA|
20230325: 083000     ERROR  5430[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1238) - Failed to get TT for group: ADHC_BUNDL and type: VPNA
20230325: 083000     DEBUG  5430[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 083000     DEBUG  5430[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 083000     DEBUG  5466[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |VPNA|1003411985|
20230325: 083000     DEBUG  5466[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2280cdac
20230325: 083000     DEBUG  5610[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BlhBillLimitHd )
20230325: 083000     DEBUG  5615[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getBlhBillLimitHdDAC(BaseAbstractDACFactory.java:930) - getBlhBillLimitHdDAC()
20230325: 083000     DEBUG  5636[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl com.eppixcomm.eppix.base.dml.BlhBillLimitHdDMLFactory@60215eee
20230325: 083000     DEBUG  5637[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl
20230325: 083000     DEBUG  5643[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083000     DEBUG  5644[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl TO MAP
20230325: 083000     DEBUG  5645[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractBLO.get(BlhBillLimitHdAbstractBLO.java:264) - get( filter )
20230325: 083000     DEBUG  5646[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractDACImpl.get(BlhBillLimitHdAbstractDACImpl.java:98) - get( filter )
20230325: 083000     DEBUG  5650[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BlhBillLimitHd|0|equalBlhSubscriberId+equalBlhServiceCode|

20230325: 083000     DEBUG  5768[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BlhBillLimitHd
Execute SQL Statement: SELECT BLH_SUBSCRIBER_ID, BLH_SERVICE_CODE, BLH_BILL_LIMIT_VAL, BLH_LEVEL,BLH_TYPE, BLH_VAT_IND, BLH_UNBILL_USAGE, BLH_UNBILL_CHARGES, BLH_DIFF,BLH_USER_STATUS, BLH_NEXT_THRESHOLD, BLH_PREV_THRESHOLD, BLH_NEXT_ACN_ID,BLH_PREV_ACN_ID, BLH_NETWORK_ACN, BLH_TRIG_FLAG, BLH_LAST_UPDATE
FROM BLH_BILL_LIMIT_HD
WHERE BLH_SUBSCRIBER_ID = ? AND BLH_SERVICE_CODE = ?
Argument(s): |1003411985|SPUL|
20230325: 083000     DEBUG  5769[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5479e3f
20230325: 083000     DEBUG  5844[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BlhBillLimitHd )
20230325: 083000     DEBUG  5844[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractBLO.get(BlhBillLimitHdAbstractBLO.java:264) - get( filter )
20230325: 083000     DEBUG  5844[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractDACImpl.get(BlhBillLimitHdAbstractDACImpl.java:98) - get( filter )
20230325: 083000     DEBUG  5845[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BlhBillLimitHd|0|equalBlhSubscriberId+equalBlhServiceCode|

20230325: 083000     DEBUG  5879[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BlhBillLimitHd
Execute SQL Statement: SELECT BLH_SUBSCRIBER_ID, BLH_SERVICE_CODE, BLH_BILL_LIMIT_VAL, BLH_LEVEL,BLH_TYPE, BLH_VAT_IND, BLH_UNBILL_USAGE, BLH_UNBILL_CHARGES, BLH_DIFF,BLH_USER_STATUS, BLH_NEXT_THRESHOLD, BLH_PREV_THRESHOLD, BLH_NEXT_ACN_ID,BLH_PREV_ACN_ID, BLH_NETWORK_ACN, BLH_TRIG_FLAG, BLH_LAST_UPDATE
FROM BLH_BILL_LIMIT_HD
WHERE BLH_SUBSCRIBER_ID = ? AND BLH_SERVICE_CODE = ?
Argument(s): |1003411985|SUL|
20230325: 083000     ERROR  5949[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5888) - Failed to get Bill Limits for subscriber: 1003411985 and service code: SUL
20230325: 083000     ERROR  5951[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5904) - Exception getting Bill Limits for subscriber: 1003411985 and service code: SUL EXCEPTION: com.eppixcomm.eppix.base.error.EPPIXSeriousException: Failed to get Bill Limits for subscriber: 1003411985 and service code: SUL
20230325: 083000     ERROR  5952[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1007) - Exception getting Bill Limits for subscriber: 1003411985 and service code: SUL EXCEPTION: com.eppixcomm.eppix.base.error.EPPIXSeriousException: Failed to get Bill Limits for subscriber: 1003411985 and service code: SUL
20230325: 083000     ERROR  5952[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1030) - 
CREDIT LIMIT: 578437.20
TOTAL CHARGES: 46169.73
TOTAL SUL320.00
20230325: 083000     ERROR  5953[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1054) - 
TOTAL SUL WITHOUT CURRENT SUL: 320.00
AFTER CREDIT LIMIT: 578437.20
TOTAL CHARGES: 46169.73TOTAL SUL: 320.00
PARAM CHARGES: 0.00
20230325: 083000     DEBUG  5958[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SksKeySetting )
20230325: 083000     DEBUG  5959[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSksKeySettingDAC(BaseAbstractDACFactory.java:314) - getSksKeySettingDAC()
20230325: 083000     DEBUG  5969[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl com.eppixcomm.eppix.base.dml.SksKeySettingAbstractDMLFactory@4f4a7090
20230325: 083000     DEBUG  5970[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl
20230325: 083000     DEBUG  5974[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083000     DEBUG  5974[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl TO MAP
20230325: 083000     DEBUG  5975[main] - com.eppixcomm.eppix.base.blo.SksKeySettingAbstractBLO.get(SksKeySettingAbstractBLO.java:500) - get( filter )
20230325: 083000     DEBUG  5975[main] - com.eppixcomm.eppix.base.blo.SksKeySettingAbstractDACImpl.get(SksKeySettingAbstractDACImpl.java:420) - get( filter )
20230325: 083000     DEBUG  5977[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
SksKeySetting|0|equalSksKeyCode|

20230325: 083000     DEBUG  6106[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SksKeySetting
Execute SQL Statement: SELECT SKS_KEY_CODE, SKS_VALUE, SKS_COMMENT, SKS_TIMESTAMP
FROM SKS_KEY_SETTING
WHERE (SKS_KEY_CODE) = ?
Argument(s): |ALFTURNONO|
20230325: 083000     DEBUG  6108[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1ef7fe8e
20230325: 083000     DEBUG  6185[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.Sysdirm )
20230325: 083000     DEBUG  6186[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSysdirmDAC(BaseAbstractDACFactory.java:327) - getSysdirmDAC()
20230325: 083000     DEBUG  6199[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SysdirmDACImpl com.eppixcomm.eppix.base.dml.SysdirmAbstractDMLFactory@2471cca7
20230325: 083000     DEBUG  6201[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SysdirmDACImpl
20230325: 083000     DEBUG  6206[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083000     DEBUG  6207[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SysdirmDACImpl TO MAP
20230325: 083000     DEBUG  6208[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractBLO.get(SysdirmAbstractBLO.java:501) - get( filter )
20230325: 083000     DEBUG  6209[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractDACImpl.get(SysdirmAbstractDACImpl.java:435) - get( filter )
20230325: 083000     DEBUG  6210[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
Sysdirm|0|equalSystemKey|

20230325: 083001     DEBUG  6363[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: Sysdirm
Execute SQL Statement: SELECT SYSTEM_KEY, KEY_VALUE, DESCRIPTION
FROM SYSDIRM
WHERE (SYSTEM_KEY) = ?
Argument(s): |OPVATCODE|
20230325: 083001     DEBUG  6365[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@31b7dea0
20230325: 083001     DEBUG  6438[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVatPercentageByCode
20230325: 083001     DEBUG  6439[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVatPercentageByCode|0||

20230325: 083001     DEBUG  6571[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVatPercentageByCode
Execute SQL Statement: SELECT percentage FROM cevatm WHERE vat_code = ? 
Argument(s): |VST|
20230325: 083001     DEBUG  6572[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3930015a
20230325: 083001     DEBUG  6651[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BcyBillingCycle )
20230325: 083001     DEBUG  6652[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getBcyBillingCycleDAC(BaseAbstractDACFactory.java:550) - getBcyBillingCycleDAC()
20230325: 083001     DEBUG  6661[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.BcyBillingCycleDACImpl com.eppixcomm.eppix.base.dml.BcyBillingCycleDMLFactory@387c703b
20230325: 083001     DEBUG  6662[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.BcyBillingCycleDACImpl
20230325: 083001     DEBUG  6665[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083001     DEBUG  6665[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.BcyBillingCycleDACImpl TO MAP
20230325: 083001     DEBUG  6666[main] - com.eppixcomm.eppix.base.blo.BcyBillingCycleAbstractBLO.get(BcyBillingCycleAbstractBLO.java:587) - get( filter )
20230325: 083001     DEBUG  6666[main] - com.eppixcomm.eppix.base.blo.BcyBillingCycleAbstractDACImpl.get(BcyBillingCycleAbstractDACImpl.java:492) - get( filter )
20230325: 083001     DEBUG  6668[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BcyBillingCycle|0|equalBcyBillCycle|

20230325: 083001     DEBUG  6823[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BcyBillingCycle
Execute SQL Statement: SELECT BCY_BILL_CYCLE, BCY_DESCRIPTION, BCY_PERIOD, BCY_FREQUENCY, BCY_DAY_OF_RUN, BCY_NEXT_RUN, BCY_SUSPENDED, BCY_USE_STATUS, BCY_NEXT_CALL_RUN, BCY_IN_ADVANCE
FROM BCY_BILLING_CYCLE
WHERE BCY_BILL_CYCLE = ?
Argument(s): |CYC95|
20230325: 083001     DEBUG  6824[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@282ba1e
20230325: 083001     DEBUG  6897[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10040) - 
billTable=bill_CYC9520230205
20230325: 083001     DEBUG  6902[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.CrbaCustRiskAux )
20230325: 083001     DEBUG  6903[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getCrbaCustRiskAuxDAC(BaseAbstractDACFactory.java:1601) - getCrbaCustRiskAuxDAC()
20230325: 083001     DEBUG  6916[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxDACImpl com.eppixcomm.eppix.base.dml.CrbaCustRiskAuxDMLFactory@3ecf72fd
20230325: 083001     DEBUG  6916[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxDACImpl
20230325: 083001     DEBUG  6923[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083001     DEBUG  6924[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxDACImpl TO MAP
20230325: 083001     DEBUG  6925[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractBLO.get(CrbaCustRiskAuxAbstractBLO.java:270) - get( filter )
20230325: 083001     DEBUG  6925[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractDACImpl.get(CrbaCustRiskAuxAbstractDACImpl.java:322) - get( filter )
20230325: 083001     DEBUG  6927[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
CrbaCustRiskAux|0|equalcrbaBillAcNo|

20230325: 083001     DEBUG  7083[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: CrbaCustRiskAux
Execute SQL Statement: SELECT CRBA_BILL_AC_NO, CRBA_ACC_DISC_VAL, CRBA_AUX_FLOAT_1, CRBA_AUX_FLOAT_2, CRBA_AUX_FLOAT_3, CRBA_AUX_INT_1, CRBA_AUX_INT_2, CRBA_AUX_INT_3, CRBA_AUX_CHAR_1, CRBA_AUX_CHAR_2, CRBA_AUX_CHAR_3, CRBA_AUX_DATE_1, CRBA_AUX_DATE_2, CRBA_AUX_DATE_3
FROM crba_cust_risk_aux
WHERE CRBA_BILL_AC_NO = ? 
Argument(s): |A5085810|
20230325: 083001     DEBUG  7085[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4b6995df
20230325: 083001     DEBUG  7189[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.CrbCustRiskBal )
20230325: 083001     DEBUG  7190[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getCrbCustRiskBalDAC(BaseAbstractDACFactory.java:943) - getCrbCustRiskBalDAC()
20230325: 083001     DEBUG  7198[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.CrbCustRiskBalDACImpl com.eppixcomm.eppix.base.dml.CrbCustRiskBalDMLFactory@61443d8f
20230325: 083001     DEBUG  7198[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbCustRiskBalDACImpl
20230325: 083001     DEBUG  7201[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083001     DEBUG  7201[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbCustRiskBalDACImpl TO MAP
20230325: 083001     DEBUG  7201[main] - com.eppixcomm.eppix.base.blo.CrbCustRiskBalAbstractBLO.get(CrbCustRiskBalAbstractBLO.java:256) - get( filter )
20230325: 083001     DEBUG  7202[main] - com.eppixcomm.eppix.base.blo.CrbCustRiskBalAbstractDACImpl.get(CrbCustRiskBalAbstractDACImpl.java:96) - get( filter )
20230325: 083001     DEBUG  7203[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
crbCustRiskBal|0|equalCrbBillAcNo|

20230325: 083002     DEBUG  7405[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: crbCustRiskBal
Execute SQL Statement: SELECT CRB_BILL_AC_NO, CRB_ACCOUNT_TYPE, CRB_CREDIT_LIMIT, CRB_ACC_BAL, CRB_UNBILL_CHARGES, CRB_UNBILL_CALLS, CRB_DIFF, CRB_NEXT_THRESHOLD, CRB_PREV_THRESHOLD, CRB_COLL_PLAN, CRB_MIN_THRESHOLD, CRB_ACTIVATE_FLAG, CRB_EAP_FLAG, CRB_BL_STATUS, CRB_BL_TYPE, CRB_BL_LIMIT, CRB_BL_DIFF, CRB_BL_NEXT_THRESH, CRB_BL_PREV_THRESH, CRB_BL_NEXT_ACN_ID, CRB_BL_PREV_ACN_ID, CRB_BL_TRIG_FLAG, CRB_BL_LAST_UPDATE
FROM CRB_CUST_RISK_BAL
WHERE CRB_BILL_AC_NO = ?
Argument(s): |A5085810|
20230325: 083002     DEBUG  7409[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3aa9e816
20230325: 083002     DEBUG  7495[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10087) - 
Select sbd_subscriber_id, start_period, sparech, chaserv, charge from sbd_sub_dets, vam_active_msisdn, bill_CYC9520230205 WHERE subscriber_id = sbd_subscriber_id AND subscriber_id =  vam_subscriber_id  AND handset =  vam_msisdn_no  AND sparech[1,3] != 'CCC'  AND charge > 0   AND sbd_bill_ac_no = 'A5085810'
20230325: 083002     DEBUG  7586[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31060221
chaserv: OTGR
charge: 17.3900000000000005684341886080801486968994140625
20230325: 083002     DEBUG  7586[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083002     DEBUG  7588[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083002     DEBUG  7588[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083002     DEBUG  7593[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083002     DEBUG  7595[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getVcfVrbleChrgFeeDAC(BaseAbstractDACFactory.java:1477) - getVcfVrbleChrgFeeDAC()
20230325: 083002     DEBUG  7610[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeDACImpl com.eppixcomm.eppix.base.dml.VcfVrbleChrgFeeDMLFactory@7907ec20
20230325: 083002     DEBUG  7610[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeDACImpl
20230325: 083002     DEBUG  7615[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083002     DEBUG  7616[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeDACImpl TO MAP
20230325: 083002     DEBUG  7616[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083002     DEBUG  7617[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083002     DEBUG  7618[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083002     DEBUG  7825[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230325: 083002     DEBUG  7874[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230325: 083002     DEBUG  7875[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31060267
chaserv: OTGR
charge: 117.3900000000000005684341886080801486968994140625
20230325: 083002     DEBUG  7875[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083002     DEBUG  7876[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083002     DEBUG  7876[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083002     DEBUG  7876[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083002     DEBUG  7877[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083002     DEBUG  7877[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083002     DEBUG  7877[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083002     DEBUG  7928[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230325: 083002     DEBUG  7967[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230325: 083002     DEBUG  7969[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31064291
chaserv: OTGR
charge: 33.909999999999996589394868351519107818603515625
20230325: 083002     DEBUG  7969[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083002     DEBUG  7969[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083002     DEBUG  7970[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083002     DEBUG  7970[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083002     DEBUG  7971[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083002     DEBUG  7973[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083002     DEBUG  7973[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083002     DEBUG  8029[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230325: 083002     DEBUG  8078[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230325: 083002     DEBUG  8079[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31064292
chaserv: OTGR
charge: 33.909999999999996589394868351519107818603515625
20230325: 083002     DEBUG  8079[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083002     DEBUG  8080[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083002     DEBUG  8080[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083002     DEBUG  8081[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083002     DEBUG  8081[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083002     DEBUG  8081[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083002     DEBUG  8082[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083002     DEBUG  8124[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230325: 083002     DEBUG  8160[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230325: 083002     DEBUG  8161[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000287625
start_period: 2023-01-09
sparech: CFF             BSWA      VS1R
chaserv: EVS5R
charge: 120.4200000000000017053025658242404460906982421875
20230325: 083002     DEBUG  8162[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFF
20230325: 083002     DEBUG  8163[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-09 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083002     DEBUG  8163[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFF
20230325: 083002     DEBUG  8164[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083002     DEBUG  8165[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083002     DEBUG  8165[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083002     DEBUG  8166[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083002     DEBUG  8228[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |EVS5R|1000287625|A5085810|A|
20230325: 083002     DEBUG  8283[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR EVS5R COUNT:  0
20230325: 083002     DEBUG  8284[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 120.4200000000000017053025658242404460906982421875
20230325: 083002     DEBUG  8286[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA CUGCHG           619420822
chaserv: ESMCC
charge: 48.59999847412109375
20230325: 083002     DEBUG  8286[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083002     DEBUG  8287[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083002     DEBUG  8287[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083002     DEBUG  8288[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083002     DEBUG  8289[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083002     DEBUG  8289[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083002     DEBUG  8291[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083003     DEBUG  8352[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCC|1000740188|A5085810|A|
20230325: 083003     DEBUG  8388[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCC COUNT:  0
20230325: 083003     DEBUG  8388[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 48.59999847412109375
20230325: 083003     DEBUG  8389[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA DATACHG           61942082
chaserv: ESMCD
charge: 25.5
20230325: 083003     DEBUG  8389[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083003     DEBUG  8390[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083003     DEBUG  8390[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083003     DEBUG  8390[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083003     DEBUG  8390[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083003     DEBUG  8390[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083003     DEBUG  8391[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083003     DEBUG  8430[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCD|1000740188|A5085810|A|
20230325: 083003     DEBUG  8472[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCD COUNT:  0
20230325: 083003     DEBUG  8472[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 25.5
20230325: 083003     DEBUG  8473[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA SMSCHG           -49820895
chaserv: ESMCS
charge: 34.5
20230325: 083003     DEBUG  8473[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083003     DEBUG  8474[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083003     DEBUG  8474[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083003     DEBUG  8474[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083003     DEBUG  8474[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083003     DEBUG  8474[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083003     DEBUG  8475[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083003     DEBUG  8512[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCS|1000740188|A5085810|A|
20230325: 083003     DEBUG  8551[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCS COUNT:  0
20230325: 083003     DEBUG  8552[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 34.5
20230325: 083003     DEBUG  8552[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA VOICECHG           6194208
chaserv: ESMCV
charge: 243
20230325: 083003     DEBUG  8552[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083003     DEBUG  8552[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083003     DEBUG  8552[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083003     DEBUG  8553[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083003     DEBUG  8553[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083003     DEBUG  8553[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083003     DEBUG  8553[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083003     DEBUG  8597[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCV|1000740188|A5085810|A|
20230325: 083003     DEBUG  8638[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCV COUNT:  0
20230325: 083003     DEBUG  8638[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 243
20230325: 083003     DEBUG  8639[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA ESPRCHG           61942082
chaserv: ESOBD
charge: 7750.81005859375
20230325: 083003     DEBUG  8639[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083003     DEBUG  8639[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083003     DEBUG  8639[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083003     DEBUG  8639[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083003     DEBUG  8639[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083003     DEBUG  8639[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083003     DEBUG  8639[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083003     DEBUG  8683[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESOBD|1000740188|A5085810|A|
20230325: 083003     DEBUG  8733[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESOBD COUNT:  0
20230325: 083003     DEBUG  8733[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 7750.81005859375
20230325: 083003     DEBUG  8733[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA ESPRCHG           61942082
chaserv: ESOBV
charge: 632.6099853515625
20230325: 083003     DEBUG  8734[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083003     DEBUG  8734[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083003     DEBUG  8734[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083003     DEBUG  8734[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083003     DEBUG  8734[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083003     DEBUG  8734[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083003     DEBUG  8734[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083003     DEBUG  8786[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESOBV|1000740188|A5085810|A|
20230325: 083003     DEBUG  8840[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESOBV COUNT:  0
20230325: 083003     DEBUG  8840[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 632.6099853515625
20230325: 083003     DEBUG  8840[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1001769643
start_period: 2023-02-05
sparech: CFA SVRCHG         31064290
chaserv: OTGR
charge: 51.2999999999999971578290569595992565155029296875
20230325: 083003     DEBUG  8840[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083003     DEBUG  8841[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083003     DEBUG  8841[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083003     DEBUG  8841[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083003     DEBUG  8841[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083003     DEBUG  8841[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083003     DEBUG  8841[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083003     DEBUG  8883[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|1001769643|A5085810|A|
20230325: 083003     DEBUG  8933[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  1
20230325: 083003     DEBUG  8933[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1003400281
start_period: 2023-01-20
sparech: CFF             BUDA      UCWD
chaserv: UCPWD
charge: 122.0799999999999982946974341757595539093017578125
20230325: 083003     DEBUG  8933[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFF
20230325: 083003     DEBUG  8933[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-20 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083003     DEBUG  8934[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFF
20230325: 083003     DEBUG  8934[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083003     DEBUG  8934[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083003     DEBUG  8934[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083003     DEBUG  8934[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083003     DEBUG  8989[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |UCPWD|1003400281|A5085810|A|
20230325: 083003     DEBUG  9057[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR UCPWD COUNT:  0
20230325: 083003     DEBUG  9058[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 122.0799999999999982946974341757595539093017578125
20230325: 083003     DEBUG  9116[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10193) - 
otherCharges: 8977.5200424194335937500000000000000000000000000000
20230325: 083003     DEBUG  9117[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10197) - 
Before VAT unbilledCharges: 35617.1099575805637869052588939666748046875000000000
20230325: 083003     DEBUG  9118[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10201) - 
UNBILLED CHARGES + VAT: 40959.676451217648354941047728061676025390625000000000
20230325: 083003     DEBUG  9122[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1106) - 
TOTAL MAX ALLOWED: 537477.52
20230325: 083003     DEBUG  9122[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSpulByAccount
20230325: 083003     DEBUG  9122[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSpulByAccount|0||

20230325: 083004     DEBUG  9342[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSpulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SPUL' AND sbd_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 083004     DEBUG  9343[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4e04a765
20230325: 083004     DEBUG  9427[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.CrbaCustRiskAux )
20230325: 083004     DEBUG  9428[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractBLO.get(CrbaCustRiskAuxAbstractBLO.java:270) - get( filter )
20230325: 083004     DEBUG  9428[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractDACImpl.get(CrbaCustRiskAuxAbstractDACImpl.java:322) - get( filter )
20230325: 083004     DEBUG  9429[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
CrbaCustRiskAux|0|equalcrbaBillAcNo|

20230325: 083004     DEBUG  9477[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: CrbaCustRiskAux
Execute SQL Statement: SELECT CRBA_BILL_AC_NO, CRBA_ACC_DISC_VAL, CRBA_AUX_FLOAT_1, CRBA_AUX_FLOAT_2, CRBA_AUX_FLOAT_3, CRBA_AUX_INT_1, CRBA_AUX_INT_2, CRBA_AUX_INT_3, CRBA_AUX_CHAR_1, CRBA_AUX_CHAR_2, CRBA_AUX_CHAR_3, CRBA_AUX_DATE_1, CRBA_AUX_DATE_2, CRBA_AUX_DATE_3
FROM crba_cust_risk_aux
WHERE CRBA_BILL_AC_NO = ? 
Argument(s): |A5085810|
20230325: 083004     DEBUG  9479[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@246ae04d
20230325: 083004     DEBUG  9588[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSulByAccount
20230325: 083004     DEBUG  9589[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSulByAccount|0||

20230325: 083004     DEBUG  9673[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SUL' AND sbd_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 083004     DEBUG  9674[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1e67b872
20230325: 083004     DEBUG  9793[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getTsServiceBySubscriber|0|NONE|

20230325: 083004     DEBUG  9961[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getTsServiceBySubscriber
Execute SQL Statement:  select * from ts_tariff_service  where ts_service_code  in  (select vas_service_code from vas_active_service  where vas_subscriber_id in   (select sbd_subscriber_id from sbd_sub_dets  where sbd_bill_ac_no = ?))  and ts_package_code =  ?  and ts_internal_tariff = ?  and (ts_sub_charge1 <> '' ) 
Argument(s): |A5085810|M4BDS|YT_34|
20230325: 083004     DEBUG  9963[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6fb554cc
20230325: 083004     DEBUG  9964[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: AR100
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083004     DEBUG  9964[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: AR100
20230325: 083004     DEBUG  9965[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083004     DEBUG  9965[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083004     DEBUG  9965[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083004     DEBUG  9966[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083004     DEBUG 10030[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |AR100|M1|2023-03-25|F|
20230325: 083004     DEBUG 10078[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-04-04
20230325: 083004     DEBUG 10078[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-04-04
20230325: 083004     DEBUG 10080[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083004     DEBUG 10080[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083004     DEBUG 10080[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083004     DEBUG 10081[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083004     DEBUG 10135[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |AR100|M1|2018-04-04|F|
20230325: 083004     DEBUG 10137[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3a03464
20230325: 083004     DEBUG 10231[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@617c74e5
20230325: 083004     DEBUG 10233[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: AR50
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083004     DEBUG 10233[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: AR50
20230325: 083004     DEBUG 10234[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083004     DEBUG 10234[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083004     DEBUG 10234[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083004     DEBUG 10235[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083004     DEBUG 10288[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |AR50|M1|2023-03-25|F|
20230325: 083005     DEBUG 10344[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-07-26
20230325: 083005     DEBUG 10344[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-07-26
20230325: 083005     DEBUG 10345[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083005     DEBUG 10345[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083005     DEBUG 10345[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083005     DEBUG 10346[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083005     DEBUG 10435[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |AR50|M1|2018-07-26|F|
20230325: 083005     DEBUG 10436[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2c9f9fb0
20230325: 083005     DEBUG 10534[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@9f70c54
20230325: 083005     DEBUG 10535[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: AR500
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083005     DEBUG 10535[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: AR500
20230325: 083005     DEBUG 10536[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083005     DEBUG 10536[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083005     DEBUG 10537[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083005     DEBUG 10537[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083005     DEBUG 10596[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |AR500|M1|2023-03-25|F|
20230325: 083005     DEBUG 10645[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-04-04
20230325: 083005     DEBUG 10646[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-04-04
20230325: 083005     DEBUG 10646[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083005     DEBUG 10647[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083005     DEBUG 10647[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083005     DEBUG 10647[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083005     DEBUG 10723[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |AR500|M1|2018-04-04|F|
20230325: 083005     DEBUG 10725[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@337d0578
20230325: 083005     DEBUG 10807[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@61a485d2
20230325: 083005     DEBUG 10808[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: BDB01
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083005     DEBUG 10808[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: BDB01
20230325: 083005     DEBUG 10810[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083005     DEBUG 10811[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083005     DEBUG 10811[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083005     DEBUG 10812[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083005     DEBUG 10879[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |BDB01|M1|2023-03-25|F|
20230325: 083005     DEBUG 10926[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-15
20230325: 083005     DEBUG 10927[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-15
20230325: 083005     DEBUG 10928[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083005     DEBUG 10928[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083005     DEBUG 10928[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083005     DEBUG 10929[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083005     DEBUG 10986[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |BDB01|M1|2018-05-15|F|
20230325: 083005     DEBUG 10988[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6a024a67
20230325: 083005     DEBUG 11073[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@174d20a
20230325: 083005     DEBUG 11073[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: M4BDS
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083005     DEBUG 11074[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: M4BDS
20230325: 083005     DEBUG 11074[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083005     DEBUG 11074[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083005     DEBUG 11074[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083005     DEBUG 11075[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083005     DEBUG 11123[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |M4BDS|M1|2023-03-25|F|
20230325: 083005     DEBUG 11167[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2021-11-22
20230325: 083005     DEBUG 11167[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2021-11-22
20230325: 083005     DEBUG 11168[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083005     DEBUG 11168[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083005     DEBUG 11168[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083005     DEBUG 11168[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083005     DEBUG 11215[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |M4BDS|M1|2021-11-22|F|
20230325: 083005     DEBUG 11215[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5f375618
20230325: 083005     DEBUG 11317[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@32d992b2
20230325: 083005     DEBUG 11318[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: BVB02
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083005     DEBUG 11318[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: BVB02
20230325: 083005     DEBUG 11318[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083005     DEBUG 11318[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083005     DEBUG 11319[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083005     DEBUG 11319[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083006     DEBUG 11390[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |BVB02|M1|2023-03-25|F|
20230325: 083006     DEBUG 11442[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-15
20230325: 083006     DEBUG 11444[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-15
20230325: 083006     DEBUG 11444[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083006     DEBUG 11444[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083006     DEBUG 11445[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083006     DEBUG 11445[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083006     DEBUG 11498[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |BVB02|M1|2018-05-15|F|
20230325: 083006     DEBUG 11501[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@51081592
20230325: 083006     DEBUG 11627[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@9629756
20230325: 083006     DEBUG 11628[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: C20G
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083006     DEBUG 11628[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: C20G
20230325: 083006     DEBUG 11628[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083006     DEBUG 11629[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083006     DEBUG 11629[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083006     DEBUG 11629[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083006     DEBUG 11697[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |C20G|M1|2023-03-25|F|
20230325: 083006     DEBUG 11749[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-11
20230325: 083006     DEBUG 11750[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-11
20230325: 083006     DEBUG 11750[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083006     DEBUG 11751[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083006     DEBUG 11751[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083006     DEBUG 11751[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083006     DEBUG 11813[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |C20G|M1|2018-05-11|F|
20230325: 083006     DEBUG 11815[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@28feb3fa
20230325: 083006     DEBUG 11912[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@51565ec2
20230325: 083006     DEBUG 11912[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: CL
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083006     DEBUG 11913[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: CL
20230325: 083006     DEBUG 11913[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083006     DEBUG 11914[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083006     DEBUG 11914[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083006     DEBUG 11914[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083006     DEBUG 11970[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |CL|M1|2023-03-25|F|
20230325: 083006     DEBUG 12006[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2019-05-25
20230325: 083006     DEBUG 12006[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2019-05-25
20230325: 083006     DEBUG 12007[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083006     DEBUG 12007[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083006     DEBUG 12007[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083006     DEBUG 12008[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083006     DEBUG 12044[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |CL|M1|2019-05-25|F|
20230325: 083006     DEBUG 12045[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@8bd1b6a
20230325: 083007     DEBUG 12474[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@cb5822
20230325: 083007     DEBUG 12474[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: CUGR6
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083007     DEBUG 12475[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: CUGR6
20230325: 083007     DEBUG 12476[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083007     DEBUG 12476[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083007     DEBUG 12476[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083007     DEBUG 12477[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083007     DEBUG 12530[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |CUGR6|M1|2023-03-25|F|
20230325: 083007     DEBUG 12569[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2019-04-29
20230325: 083007     DEBUG 12569[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2019-04-29
20230325: 083007     DEBUG 12569[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083007     DEBUG 12569[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083007     DEBUG 12569[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083007     DEBUG 12569[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083007     DEBUG 12613[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |CUGR6|M1|2019-04-29|F|
20230325: 083007     DEBUG 12614[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@61832929
20230325: 083007     DEBUG 12712[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3ffc5af1
20230325: 083007     DEBUG 12713[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: DBR
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083007     DEBUG 12713[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: DBR
20230325: 083007     DEBUG 12713[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083007     DEBUG 12714[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083007     DEBUG 12714[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083007     DEBUG 12714[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083007     DEBUG 12763[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |DBR|M1|2023-03-25|F|
20230325: 083007     DEBUG 12816[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-10-14
20230325: 083007     DEBUG 12816[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-10-14
20230325: 083007     DEBUG 12817[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083007     DEBUG 12817[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083007     DEBUG 12818[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083007     DEBUG 12818[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083007     DEBUG 12866[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |DBR|M1|2018-10-14|F|
20230325: 083007     DEBUG 12867[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1bce4f0a
20230325: 083007     DEBUG 12963[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5c3bd550
20230325: 083007     DEBUG 12964[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: DBR1
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083007     DEBUG 12964[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: DBR1
20230325: 083007     DEBUG 12964[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083007     DEBUG 12965[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083007     DEBUG 12965[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083007     DEBUG 12965[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083007     DEBUG 13007[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |DBR1|M1|2023-03-25|F|
20230325: 083007     DEBUG 13048[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-11
20230325: 083007     DEBUG 13048[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-11
20230325: 083007     DEBUG 13049[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083007     DEBUG 13049[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083007     DEBUG 13049[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083007     DEBUG 13050[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083007     DEBUG 13088[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |DBR1|M1|2018-05-11|F|
20230325: 083007     DEBUG 13091[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@343f4d3d
20230325: 083007     DEBUG 13172[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5442a311
20230325: 083007     DEBUG 13173[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: DR5M
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083007     DEBUG 13174[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: DR5M
20230325: 083007     DEBUG 13175[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083007     DEBUG 13175[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083007     DEBUG 13175[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083007     DEBUG 13175[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083007     DEBUG 13212[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |DR5M|M1|2023-03-25|F|
20230325: 083007     DEBUG 13248[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-15
20230325: 083007     DEBUG 13248[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-15
20230325: 083007     DEBUG 13249[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083007     DEBUG 13249[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083007     DEBUG 13249[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083007     DEBUG 13249[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083007     DEBUG 13288[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |DR5M|M1|2018-05-15|F|
20230325: 083007     DEBUG 13289[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@57fffcd7
20230325: 083008     DEBUG 13362[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@598067a5
20230325: 083008     DEBUG 13363[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: ERR
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083008     DEBUG 13363[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: ERR
20230325: 083008     DEBUG 13363[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083008     DEBUG 13364[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083008     DEBUG 13364[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083008     DEBUG 13364[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083008     DEBUG 13407[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |ERR|M1|2023-03-25|F|
20230325: 083008     DEBUG 13442[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2020-12-14
20230325: 083008     DEBUG 13443[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2020-12-14
20230325: 083008     DEBUG 13444[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083008     DEBUG 13444[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083008     DEBUG 13444[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083008     DEBUG 13444[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083008     DEBUG 13483[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |ERR|M1|2020-12-14|F|
20230325: 083008     DEBUG 13484[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7085bdee
20230325: 083008     DEBUG 13558[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5700d6b1
20230325: 083008     DEBUG 13558[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: LTE
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083008     DEBUG 13559[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: LTE
20230325: 083008     DEBUG 13559[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083008     DEBUG 13559[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083008     DEBUG 13559[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083008     DEBUG 13559[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083008     DEBUG 13594[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |LTE|M1|2023-03-25|F|
20230325: 083008     DEBUG 13629[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2013-05-16
20230325: 083008     DEBUG 13629[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2013-05-16
20230325: 083008     DEBUG 13630[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083008     DEBUG 13630[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083008     DEBUG 13630[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083008     DEBUG 13630[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083008     DEBUG 13674[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |LTE|M1|2013-05-16|F|
20230325: 083008     DEBUG 13674[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@cb644e
20230325: 083008     DEBUG 13750[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@56ef9176
20230325: 083008     DEBUG 13750[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: MBBIP
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083008     DEBUG 13750[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: MBBIP
20230325: 083008     DEBUG 13750[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083008     DEBUG 13751[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083008     DEBUG 13751[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083008     DEBUG 13751[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083008     DEBUG 13803[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |MBBIP|M1|2023-03-25|F|
20230325: 083008     DEBUG 13838[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2022-08-10
20230325: 083008     DEBUG 13839[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2022-08-10
20230325: 083008     DEBUG 13839[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083008     DEBUG 13840[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083008     DEBUG 13840[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083008     DEBUG 13840[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083008     DEBUG 13879[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |MBBIP|M1|2022-08-10|F|
20230325: 083008     DEBUG 13882[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@20322d26
20230325: 083008     DEBUG 13957[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@64bf3bbf
20230325: 083008     DEBUG 13957[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: OA25
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083008     DEBUG 13958[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: OA25
20230325: 083008     DEBUG 13958[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083008     DEBUG 13958[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083008     DEBUG 13958[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083008     DEBUG 13960[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083008     DEBUG 14000[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |OA25|M1|2023-03-25|F|
20230325: 083008     DEBUG 14041[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2016-05-27
20230325: 083008     DEBUG 14042[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2016-05-27
20230325: 083008     DEBUG 14044[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083008     DEBUG 14044[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083008     DEBUG 14044[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083008     DEBUG 14045[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083008     DEBUG 14084[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |OA25|M1|2016-05-27|F|
20230325: 083008     DEBUG 14085[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@21213b92
20230325: 083008     DEBUG 14156[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3327bd23
20230325: 083008     DEBUG 14157[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: OR50
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083008     DEBUG 14157[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: OR50
20230325: 083008     DEBUG 14158[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083008     DEBUG 14158[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083008     DEBUG 14158[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083008     DEBUG 14158[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083008     DEBUG 14202[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |OR50|M1|2023-03-25|F|
20230325: 083008     DEBUG 14240[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-04-04
20230325: 083008     DEBUG 14241[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-04-04
20230325: 083008     DEBUG 14241[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083008     DEBUG 14242[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083008     DEBUG 14242[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083008     DEBUG 14243[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083008     DEBUG 14296[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |OR50|M1|2018-04-04|F|
20230325: 083008     DEBUG 14297[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2286778
20230325: 083009     DEBUG 14367[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6d7b4f4c
20230325: 083009     DEBUG 14368[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: PASS
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083009     DEBUG 14368[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: PASS
20230325: 083009     DEBUG 14369[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083009     DEBUG 14369[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083009     DEBUG 14370[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083009     DEBUG 14370[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083009     DEBUG 14406[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |PASS|M1|2023-03-25|F|
20230325: 083009     DEBUG 14444[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2020-01-23
20230325: 083009     DEBUG 14445[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2020-01-23
20230325: 083009     DEBUG 14445[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083009     DEBUG 14446[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083009     DEBUG 14446[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083009     DEBUG 14447[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083009     DEBUG 14484[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |PASS|M1|2020-01-23|F|
20230325: 083009     DEBUG 14484[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@335eadca
20230325: 083009     DEBUG 14559[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@eec5a4a
20230325: 083009     DEBUG 14560[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: R750
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083009     DEBUG 14560[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: R750
20230325: 083009     DEBUG 14561[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083009     DEBUG 14562[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083009     DEBUG 14563[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083009     DEBUG 14564[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083009     DEBUG 14615[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |R750|M1|2023-03-25|F|
20230325: 083009     DEBUG 14651[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2021-08-04
20230325: 083009     DEBUG 14652[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2021-08-04
20230325: 083009     DEBUG 14652[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083009     DEBUG 14653[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083009     DEBUG 14653[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083009     DEBUG 14653[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083009     DEBUG 14691[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |R750|M1|2021-08-04|F|
20230325: 083009     DEBUG 14692[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2b9627bc
20230325: 083009     DEBUG 14777[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4f970963
20230325: 083009     DEBUG 14777[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: SMR3
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083009     DEBUG 14778[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: SMR3
20230325: 083009     DEBUG 14779[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083009     DEBUG 14780[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083009     DEBUG 14780[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083009     DEBUG 14781[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083009     DEBUG 14824[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |SMR3|M1|2023-03-25|F|
20230325: 083009     DEBUG 14860[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-08-08
20230325: 083009     DEBUG 14860[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-08-08
20230325: 083009     DEBUG 14861[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083009     DEBUG 14861[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083009     DEBUG 14861[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083009     DEBUG 14861[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083009     DEBUG 14906[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |SMR3|M1|2018-08-08|F|
20230325: 083009     DEBUG 14907[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@627551fb
20230325: 083009     DEBUG 14990[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2758fe70
20230325: 083009     DEBUG 14990[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: SMR30
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083009     DEBUG 14990[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: SMR30
20230325: 083009     DEBUG 14990[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083009     DEBUG 14990[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083009     DEBUG 14991[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083009     DEBUG 14991[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083009     DEBUG 15028[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |SMR30|M1|2023-03-25|F|
20230325: 083009     DEBUG 15072[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-04-04
20230325: 083009     DEBUG 15072[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-04-04
20230325: 083009     DEBUG 15073[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083009     DEBUG 15073[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083009     DEBUG 15073[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083009     DEBUG 15073[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083009     DEBUG 15108[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |SMR30|M1|2018-04-04|F|
20230325: 083009     DEBUG 15108[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6321e813
20230325: 083009     DEBUG 15183[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@22a67b4
20230325: 083009     DEBUG 15183[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: UCMS
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083009     DEBUG 15184[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: UCMS
20230325: 083009     DEBUG 15184[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083009     DEBUG 15184[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083009     DEBUG 15184[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083009     DEBUG 15184[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083009     DEBUG 15220[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |UCMS|M1|2023-03-25|F|
20230325: 083009     DEBUG 15256[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2021-07-20
20230325: 083009     DEBUG 15257[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2021-07-20
20230325: 083009     DEBUG 15257[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083009     DEBUG 15257[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083009     DEBUG 15258[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083009     DEBUG 15258[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083009     DEBUG 15294[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |UCMS|M1|2021-07-20|F|
20230325: 083009     DEBUG 15294[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6c49835d
20230325: 083010     DEBUG 15363[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@67205a84
20230325: 083010     DEBUG 15363[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: UCMV
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083010     DEBUG 15363[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: UCMV
20230325: 083010     DEBUG 15364[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083010     DEBUG 15365[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083010     DEBUG 15365[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083010     DEBUG 15365[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083010     DEBUG 15401[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |UCMV|M1|2023-03-25|F|
20230325: 083010     DEBUG 15437[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2021-07-20
20230325: 083010     DEBUG 15438[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2021-07-20
20230325: 083010     DEBUG 15438[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083010     DEBUG 15439[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083010     DEBUG 15439[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083010     DEBUG 15439[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083010     DEBUG 15476[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |UCMV|M1|2021-07-20|F|
20230325: 083010     DEBUG 15477[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7f13d6e
20230325: 083010     DEBUG 15558[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@d44fc21
20230325: 083010     DEBUG 15559[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: EVS5R
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083010     DEBUG 15559[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: EVS5R
20230325: 083010     DEBUG 15559[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083010     DEBUG 15559[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083010     DEBUG 15559[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083010     DEBUG 15559[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083010     DEBUG 15595[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |EVS5R|M1|2023-03-25|F|
20230325: 083010     DEBUG 15633[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2022-11-13
20230325: 083010     DEBUG 15633[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2022-11-13
20230325: 083010     DEBUG 15633[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083010     DEBUG 15633[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083010     DEBUG 15633[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083010     DEBUG 15633[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083010     DEBUG 15668[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |EVS5R|M1|2022-11-13|F|
20230325: 083010     DEBUG 15668[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5f282abb
20230325: 083010     DEBUG 15747[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1e965684
20230325: 083010     DEBUG 15748[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: WABR
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083010     DEBUG 15748[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: WABR
20230325: 083010     DEBUG 15748[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083010     DEBUG 15748[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083010     DEBUG 15748[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083010     DEBUG 15748[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083010     DEBUG 15783[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |WABR|M1|2023-03-25|F|
20230325: 083010     DEBUG 15817[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2020-09-28
20230325: 083010     DEBUG 15818[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2020-09-28
20230325: 083010     DEBUG 15818[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083010     DEBUG 15818[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083010     DEBUG 15818[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083010     DEBUG 15818[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083010     DEBUG 15862[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |WABR|M1|2020-09-28|F|
20230325: 083010     DEBUG 15863[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1b68ddbd
20230325: 083010     DEBUG 15932[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@59e5ddf
20230325: 083010     DEBUG 15968[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: ZRDB
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083010     DEBUG 15968[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: ZRDB
20230325: 083010     DEBUG 15969[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083010     DEBUG 15969[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083010     DEBUG 15970[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083010     DEBUG 15970[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083010     DEBUG 16006[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |ZRDB|M1|2023-03-25|F|
20230325: 083010     DEBUG 16046[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-03-29
20230325: 083010     DEBUG 16047[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-03-29
20230325: 083010     DEBUG 16048[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083010     DEBUG 16048[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083010     DEBUG 16048[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083010     DEBUG 16049[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083010     DEBUG 16085[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |ZRDB|M1|2018-03-29|F|
20230325: 083010     DEBUG 16086[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7a1ebcd8
20230325: 083028     DEBUG     0[main] - com.eppixcomm.eppix.base.test.TestIdcAccSubServ.loadproperties(TestIdcAccSubServ.java:171) - loading appProperties
20230325: 083028     DEBUG     8[main] - com.eppixcomm.eppix.base.test.TestIdcAccSubServ.loadproperties(TestIdcAccSubServ.java:178) - appProperties loaded : {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230325: 083028     DEBUG     8[main] - com.eppixcomm.eppix.base.test.TestIdcAccSubServ.dbConnectionInit(TestIdcAccSubServ.java:191) - DB Connection start
20230325: 083028     DEBUG     8[main] - com.eppixcomm.eppix.base.test.TestIdcAccSubServ.dbConnectionInit(TestIdcAccSubServ.java:194) - {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230325: 083028     DEBUG   647[main] - com.eppixcomm.eppix.common.data.DACFactory.<init>(DACFactory.java:95) - constructor( connection, thrower )
20230325: 083028     DEBUG   649[main] - com.eppixcomm.eppix.common.data.ConnectionContext.connect(ConnectionContext.java:100) - connect( connection )
20230325: 083028     DEBUG   649[main] - com.eppixcomm.eppix.common.data.ConnectionContext.get(ConnectionContext.java:82) - get()
20230325: 083028     DEBUG   656[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.IDAccSubServList )
20230325: 083028     DEBUG   692[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getIDAccSubServListDAC(BaseDACFactory.java:571) - getIDAccSubServListDAC
20230325: 083028     DEBUG   698[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.IDAccSubServListDACImpl com.eppixcomm.eppix.base.dml.IDAccSubServListDML@6d21714c
20230325: 083028     DEBUG   698[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.IDAccSubServListDACImpl
20230325: 083028     DEBUG   720[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083028     DEBUG   720[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.IDAccSubServListDACImpl TO MAP
20230325: 083028     DEBUG   721[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowed )
20230325: 083028     DEBUG   724[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetSULMaxUsageAllowedDAC(BaseDACFactory.java:532) - getGetSULMaxUsageAllowedDAC
20230325: 083028     DEBUG   727[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl com.eppixcomm.eppix.base.dml.GetSULMaxUsageAllowedDML@619a5dff
20230325: 083028     DEBUG   727[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl
20230325: 083028     DEBUG   727[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083028     DEBUG   728[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl TO MAP
20230325: 083028     DEBUG   730[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230325: 083028     DEBUG   732[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetServiceDiscountDAC(BaseDACFactory.java:426) - getGetServiceDiscountDAC()
20230325: 083028     DEBUG   735[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl com.eppixcomm.eppix.base.dml.GetServiceDiscountDML@6438a396
20230325: 083028     DEBUG   735[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl
20230325: 083028     DEBUG   736[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083028     DEBUG   736[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl TO MAP
20230325: 083028     DEBUG   745[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230325: 083028     DEBUG   826[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberUpgradeMigradeDAC(BaseDACFactory.java:519) - getSubscriberUpgradeMigradeDAC
20230325: 083028     DEBUG   832[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl com.eppixcomm.eppix.base.dml.SubscriberUpgradeMigradeDML@7506e922
20230325: 083028     DEBUG   832[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl
20230325: 083028     DEBUG   835[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083028     DEBUG   835[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl TO MAP
20230325: 083028     DEBUG   835[main] - com.eppixcomm.eppix.base.test.TestIdcAccSubServ.dbConnectionInit(TestIdcAccSubServ.java:218) - DB Connection successfull
20230325: 083028     DEBUG   838[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSulByAccount
20230325: 083028     DEBUG   839[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSulByAccount|0||

20230325: 083029     DEBUG   985[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SUL' AND sbd_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 083029     DEBUG   987[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@f2a0b8e
20230325: 083029     DEBUG  1059[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getCrbUnbillCharges
20230325: 083029     DEBUG  1059[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getCrbUnbillCharges|0||

20230325: 083029     DEBUG  1177[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getCrbUnbillCharges
Execute SQL Statement: SELECT NVL((crb_unbill_charges + crb_unbill_calls), 0) FROM crb_cust_risk_bal WHERE crb_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 083029     DEBUG  1178[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2530c12
20230325: 083029     DEBUG  1266[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getAccountCreditLimit
20230325: 083029     DEBUG  1266[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getAccountCreditLimit|0||

20230325: 083029     DEBUG  1428[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getAccountCreditLimit
Execute SQL Statement: SELECT credit_limit FROM slcustm WHERE customer = ? 
Argument(s): |A5085810|
20230325: 083029     DEBUG  1429[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3b95a09c
20230325: 083029     DEBUG  1501[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSubscriberVasServices|0|NONE|

20230325: 083029     DEBUG  1641[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getSubscriberVasServices
Execute SQL Statement: SELECT vas_service_code FROM vas_active_service WHERE vas_subscriber_id = ? AND vas_service_code NOT IN (SELECT tt_type FROM tt_type_text WHERE tt_group = 'IDACCSRVEX');
Argument(s): |140978|
20230325: 083029     DEBUG  1737[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BlhBillLimitHd )
20230325: 083030     DEBUG  1913[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getBlhBillLimitHdDAC(BaseAbstractDACFactory.java:930) - getBlhBillLimitHdDAC()
20230325: 083030     DEBUG  1922[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl com.eppixcomm.eppix.base.dml.BlhBillLimitHdDMLFactory@17d10166
20230325: 083030     DEBUG  1922[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl
20230325: 083030     DEBUG  1924[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083030     DEBUG  1924[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl TO MAP
20230325: 083030     DEBUG  1925[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractBLO.get(BlhBillLimitHdAbstractBLO.java:264) - get( filter )
20230325: 083030     DEBUG  1925[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractDACImpl.get(BlhBillLimitHdAbstractDACImpl.java:98) - get( filter )
20230325: 083030     DEBUG  1926[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BlhBillLimitHd|0|equalBlhSubscriberId+equalBlhServiceCode|

20230325: 083030     DEBUG  2062[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BlhBillLimitHd
Execute SQL Statement: SELECT BLH_SUBSCRIBER_ID, BLH_SERVICE_CODE, BLH_BILL_LIMIT_VAL, BLH_LEVEL,BLH_TYPE, BLH_VAT_IND, BLH_UNBILL_USAGE, BLH_UNBILL_CHARGES, BLH_DIFF,BLH_USER_STATUS, BLH_NEXT_THRESHOLD, BLH_PREV_THRESHOLD, BLH_NEXT_ACN_ID,BLH_PREV_ACN_ID, BLH_NETWORK_ACN, BLH_TRIG_FLAG, BLH_LAST_UPDATE
FROM BLH_BILL_LIMIT_HD
WHERE BLH_SUBSCRIBER_ID = ? AND BLH_SERVICE_CODE = ?
Argument(s): |140978|SPUL|
20230325: 083030     ERROR  2135[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5888) - Failed to get Bill Limits for subscriber: 140978 and service code: SPUL
20230325: 083030     ERROR  2137[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5904) - Exception getting Bill Limits for subscriber: 140978 and service code: SPUL EXCEPTION: com.eppixcomm.eppix.base.error.EPPIXSeriousException: Failed to get Bill Limits for subscriber: 140978 and service code: SPUL
20230325: 083247     DEBUG     0[main] - com.eppixcomm.eppix.base.test.TestIdcAccSubServ.loadproperties(TestIdcAccSubServ.java:171) - loading appProperties
20230325: 083247     DEBUG     4[main] - com.eppixcomm.eppix.base.test.TestIdcAccSubServ.loadproperties(TestIdcAccSubServ.java:178) - appProperties loaded : {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230325: 083247     DEBUG     4[main] - com.eppixcomm.eppix.base.test.TestIdcAccSubServ.dbConnectionInit(TestIdcAccSubServ.java:191) - DB Connection start
20230325: 083247     DEBUG     5[main] - com.eppixcomm.eppix.base.test.TestIdcAccSubServ.dbConnectionInit(TestIdcAccSubServ.java:194) - {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230325: 083247     DEBUG   638[main] - com.eppixcomm.eppix.common.data.DACFactory.<init>(DACFactory.java:95) - constructor( connection, thrower )
20230325: 083247     DEBUG   640[main] - com.eppixcomm.eppix.common.data.ConnectionContext.connect(ConnectionContext.java:100) - connect( connection )
20230325: 083247     DEBUG   640[main] - com.eppixcomm.eppix.common.data.ConnectionContext.get(ConnectionContext.java:82) - get()
20230325: 083247     DEBUG   646[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.IDAccSubServList )
20230325: 083247     DEBUG   684[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getIDAccSubServListDAC(BaseDACFactory.java:571) - getIDAccSubServListDAC
20230325: 083247     DEBUG   693[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.IDAccSubServListDACImpl com.eppixcomm.eppix.base.dml.IDAccSubServListDML@6d21714c
20230325: 083247     DEBUG   693[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.IDAccSubServListDACImpl
20230325: 083247     DEBUG   726[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083247     DEBUG   727[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.IDAccSubServListDACImpl TO MAP
20230325: 083247     DEBUG   729[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowed )
20230325: 083247     DEBUG   733[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetSULMaxUsageAllowedDAC(BaseDACFactory.java:532) - getGetSULMaxUsageAllowedDAC
20230325: 083247     DEBUG   736[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl com.eppixcomm.eppix.base.dml.GetSULMaxUsageAllowedDML@619a5dff
20230325: 083247     DEBUG   737[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl
20230325: 083247     DEBUG   737[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083247     DEBUG   738[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl TO MAP
20230325: 083247     DEBUG   739[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230325: 083247     DEBUG   742[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetServiceDiscountDAC(BaseDACFactory.java:426) - getGetServiceDiscountDAC()
20230325: 083247     DEBUG   746[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl com.eppixcomm.eppix.base.dml.GetServiceDiscountDML@6438a396
20230325: 083247     DEBUG   746[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl
20230325: 083247     DEBUG   747[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083247     DEBUG   747[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl TO MAP
20230325: 083247     DEBUG   758[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230325: 083248     DEBUG   856[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberUpgradeMigradeDAC(BaseDACFactory.java:519) - getSubscriberUpgradeMigradeDAC
20230325: 083248     DEBUG   862[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl com.eppixcomm.eppix.base.dml.SubscriberUpgradeMigradeDML@7506e922
20230325: 083248     DEBUG   862[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl
20230325: 083248     DEBUG   865[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083248     DEBUG   865[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl TO MAP
20230325: 083248     DEBUG   865[main] - com.eppixcomm.eppix.base.test.TestIdcAccSubServ.dbConnectionInit(TestIdcAccSubServ.java:218) - DB Connection successfull
20230325: 083248     DEBUG   869[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSulByAccount
20230325: 083248     DEBUG   870[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSulByAccount|0||

20230325: 083248     DEBUG  1014[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SUL' AND sbd_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 083248     DEBUG  1017[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@f2a0b8e
20230325: 083248     DEBUG  1088[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getCrbUnbillCharges
20230325: 083248     DEBUG  1088[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getCrbUnbillCharges|0||

20230325: 083248     DEBUG  1205[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getCrbUnbillCharges
Execute SQL Statement: SELECT NVL((crb_unbill_charges + crb_unbill_calls), 0) FROM crb_cust_risk_bal WHERE crb_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 083248     DEBUG  1205[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2530c12
20230325: 083248     DEBUG  1277[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getAccountCreditLimit
20230325: 083248     DEBUG  1277[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getAccountCreditLimit|0||

20230325: 083248     DEBUG  1386[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getAccountCreditLimit
Execute SQL Statement: SELECT credit_limit FROM slcustm WHERE customer = ? 
Argument(s): |A5085810|
20230325: 083248     DEBUG  1387[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3b95a09c
20230325: 083248     DEBUG  1464[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSubscriberVasServices|0|NONE|

20230325: 083248     DEBUG  1578[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getSubscriberVasServices
Execute SQL Statement: SELECT vas_service_code FROM vas_active_service WHERE vas_subscriber_id = ? AND vas_service_code NOT IN (SELECT tt_type FROM tt_type_text WHERE tt_group = 'IDACCSRVEX');
Argument(s): |140978|
20230325: 083248     DEBUG  1654[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BlhBillLimitHd )
20230325: 083249     DEBUG  1849[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getBlhBillLimitHdDAC(BaseAbstractDACFactory.java:930) - getBlhBillLimitHdDAC()
20230325: 083249     DEBUG  1864[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl com.eppixcomm.eppix.base.dml.BlhBillLimitHdDMLFactory@17d10166
20230325: 083249     DEBUG  1864[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl
20230325: 083249     DEBUG  1865[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083249     DEBUG  1866[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl TO MAP
20230325: 083249     DEBUG  1866[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractBLO.get(BlhBillLimitHdAbstractBLO.java:264) - get( filter )
20230325: 083249     DEBUG  1866[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractDACImpl.get(BlhBillLimitHdAbstractDACImpl.java:98) - get( filter )
20230325: 083249     DEBUG  1869[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BlhBillLimitHd|0|equalBlhSubscriberId+equalBlhServiceCode|

20230325: 083249     DEBUG  2009[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BlhBillLimitHd
Execute SQL Statement: SELECT BLH_SUBSCRIBER_ID, BLH_SERVICE_CODE, BLH_BILL_LIMIT_VAL, BLH_LEVEL,BLH_TYPE, BLH_VAT_IND, BLH_UNBILL_USAGE, BLH_UNBILL_CHARGES, BLH_DIFF,BLH_USER_STATUS, BLH_NEXT_THRESHOLD, BLH_PREV_THRESHOLD, BLH_NEXT_ACN_ID,BLH_PREV_ACN_ID, BLH_NETWORK_ACN, BLH_TRIG_FLAG, BLH_LAST_UPDATE
FROM BLH_BILL_LIMIT_HD
WHERE BLH_SUBSCRIBER_ID = ? AND BLH_SERVICE_CODE = ?
Argument(s): |140978|SPUL|
20230325: 083249     ERROR  2091[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5888) - Failed to get Bill Limits for subscriber: 140978 and service code: SPUL
20230325: 083249     ERROR  2092[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5904) - Exception getting Bill Limits for subscriber: 140978 and service code: SPUL EXCEPTION: com.eppixcomm.eppix.base.error.EPPIXSeriousException: Failed to get Bill Limits for subscriber: 140978 and service code: SPUL
20230325: 083249     ERROR  2092[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:983) - Exception getting Bill Limits for subscriber: 140978 and service code: SPUL EXCEPTION: com.eppixcomm.eppix.base.error.EPPIXSeriousException: Failed to get Bill Limits for subscriber: 140978 and service code: SPUL
20230325: 083249     DEBUG  2093[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BlhBillLimitHd )
20230325: 083249     DEBUG  2093[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractBLO.get(BlhBillLimitHdAbstractBLO.java:264) - get( filter )
20230325: 083249     DEBUG  2093[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractDACImpl.get(BlhBillLimitHdAbstractDACImpl.java:98) - get( filter )
20230325: 083249     DEBUG  2093[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BlhBillLimitHd|0|equalBlhSubscriberId+equalBlhServiceCode|

20230325: 083249     DEBUG  2138[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BlhBillLimitHd
Execute SQL Statement: SELECT BLH_SUBSCRIBER_ID, BLH_SERVICE_CODE, BLH_BILL_LIMIT_VAL, BLH_LEVEL,BLH_TYPE, BLH_VAT_IND, BLH_UNBILL_USAGE, BLH_UNBILL_CHARGES, BLH_DIFF,BLH_USER_STATUS, BLH_NEXT_THRESHOLD, BLH_PREV_THRESHOLD, BLH_NEXT_ACN_ID,BLH_PREV_ACN_ID, BLH_NETWORK_ACN, BLH_TRIG_FLAG, BLH_LAST_UPDATE
FROM BLH_BILL_LIMIT_HD
WHERE BLH_SUBSCRIBER_ID = ? AND BLH_SERVICE_CODE = ?
Argument(s): |140978|SUL|
20230325: 083249     ERROR  2222[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5888) - Failed to get Bill Limits for subscriber: 140978 and service code: SUL
20230325: 083249     ERROR  2223[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5904) - Exception getting Bill Limits for subscriber: 140978 and service code: SUL EXCEPTION: com.eppixcomm.eppix.base.error.EPPIXSeriousException: Failed to get Bill Limits for subscriber: 140978 and service code: SUL
20230325: 083249     ERROR  2223[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1011) - Exception getting Bill Limits for subscriber: 140978 and service code: SUL EXCEPTION: com.eppixcomm.eppix.base.error.EPPIXSeriousException: Failed to get Bill Limits for subscriber: 140978 and service code: SUL
20230325: 083249     ERROR  2223[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1034) - 
CREDIT LIMIT: 578437.20
TOTAL CHARGES: 46169.73
TOTAL SUL320.00
20230325: 083249     ERROR  2224[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1058) - 
TOTAL SUL WITHOUT CURRENT SUL: 320.00
AFTER CREDIT LIMIT: 578437.20
TOTAL CHARGES: 46169.73TOTAL SUL: 320.00
PARAM CHARGES: 0.00
20230325: 083249     DEBUG  2225[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SksKeySetting )
20230325: 083249     DEBUG  2226[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSksKeySettingDAC(BaseAbstractDACFactory.java:314) - getSksKeySettingDAC()
20230325: 083249     DEBUG  2231[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl com.eppixcomm.eppix.base.dml.SksKeySettingAbstractDMLFactory@442d9b6e
20230325: 083249     DEBUG  2232[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl
20230325: 083249     DEBUG  2233[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083249     DEBUG  2234[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl TO MAP
20230325: 083249     DEBUG  2234[main] - com.eppixcomm.eppix.base.blo.SksKeySettingAbstractBLO.get(SksKeySettingAbstractBLO.java:500) - get( filter )
20230325: 083249     DEBUG  2234[main] - com.eppixcomm.eppix.base.blo.SksKeySettingAbstractDACImpl.get(SksKeySettingAbstractDACImpl.java:420) - get( filter )
20230325: 083249     DEBUG  2234[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
SksKeySetting|0|equalSksKeyCode|

20230325: 083249     DEBUG  2343[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SksKeySetting
Execute SQL Statement: SELECT SKS_KEY_CODE, SKS_VALUE, SKS_COMMENT, SKS_TIMESTAMP
FROM SKS_KEY_SETTING
WHERE (SKS_KEY_CODE) = ?
Argument(s): |ALFTURNONO|
20230325: 083249     DEBUG  2345[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@c2e1f26
20230325: 083249     DEBUG  2420[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.Sysdirm )
20230325: 083249     DEBUG  2421[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSysdirmDAC(BaseAbstractDACFactory.java:327) - getSysdirmDAC()
20230325: 083249     DEBUG  2425[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SysdirmDACImpl com.eppixcomm.eppix.base.dml.SysdirmAbstractDMLFactory@1ee0005
20230325: 083249     DEBUG  2425[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SysdirmDACImpl
20230325: 083249     DEBUG  2427[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083249     DEBUG  2427[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SysdirmDACImpl TO MAP
20230325: 083249     DEBUG  2427[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractBLO.get(SysdirmAbstractBLO.java:501) - get( filter )
20230325: 083249     DEBUG  2427[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractDACImpl.get(SysdirmAbstractDACImpl.java:435) - get( filter )
20230325: 083249     DEBUG  2428[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
Sysdirm|0|equalSystemKey|

20230325: 083249     DEBUG  2539[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: Sysdirm
Execute SQL Statement: SELECT SYSTEM_KEY, KEY_VALUE, DESCRIPTION
FROM SYSDIRM
WHERE (SYSTEM_KEY) = ?
Argument(s): |OPVATCODE|
20230325: 083249     DEBUG  2540[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1c4af82c
20230325: 083249     DEBUG  2610[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVatPercentageByCode
20230325: 083249     DEBUG  2611[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVatPercentageByCode|0||

20230325: 083249     DEBUG  2730[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVatPercentageByCode
Execute SQL Statement: SELECT percentage FROM cevatm WHERE vat_code = ? 
Argument(s): |VST|
20230325: 083249     DEBUG  2731[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@123a439b
20230325: 083249     DEBUG  2809[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BcyBillingCycle )
20230325: 083249     DEBUG  2811[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getBcyBillingCycleDAC(BaseAbstractDACFactory.java:550) - getBcyBillingCycleDAC()
20230325: 083250     DEBUG  2830[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.BcyBillingCycleDACImpl com.eppixcomm.eppix.base.dml.BcyBillingCycleDMLFactory@76ccd017
20230325: 083250     DEBUG  2831[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.BcyBillingCycleDACImpl
20230325: 083250     DEBUG  2836[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083250     DEBUG  2836[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.BcyBillingCycleDACImpl TO MAP
20230325: 083250     DEBUG  2837[main] - com.eppixcomm.eppix.base.blo.BcyBillingCycleAbstractBLO.get(BcyBillingCycleAbstractBLO.java:587) - get( filter )
20230325: 083250     DEBUG  2837[main] - com.eppixcomm.eppix.base.blo.BcyBillingCycleAbstractDACImpl.get(BcyBillingCycleAbstractDACImpl.java:492) - get( filter )
20230325: 083250     DEBUG  2839[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BcyBillingCycle|0|equalBcyBillCycle|

20230325: 083250     DEBUG  2966[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BcyBillingCycle
Execute SQL Statement: SELECT BCY_BILL_CYCLE, BCY_DESCRIPTION, BCY_PERIOD, BCY_FREQUENCY, BCY_DAY_OF_RUN, BCY_NEXT_RUN, BCY_SUSPENDED, BCY_USE_STATUS, BCY_NEXT_CALL_RUN, BCY_IN_ADVANCE
FROM BCY_BILLING_CYCLE
WHERE BCY_BILL_CYCLE = ?
Argument(s): |CYC95|
20230325: 083250     DEBUG  2972[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2d363fb3
20230325: 083250     DEBUG  3084[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10040) - 
billTable=bill_CYC9520230205
20230325: 083250     DEBUG  3087[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.CrbaCustRiskAux )
20230325: 083250     DEBUG  3088[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getCrbaCustRiskAuxDAC(BaseAbstractDACFactory.java:1601) - getCrbaCustRiskAuxDAC()
20230325: 083250     DEBUG  3099[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxDACImpl com.eppixcomm.eppix.base.dml.CrbaCustRiskAuxDMLFactory@69222c14
20230325: 083250     DEBUG  3099[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxDACImpl
20230325: 083250     DEBUG  3102[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083250     DEBUG  3102[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxDACImpl TO MAP
20230325: 083250     DEBUG  3102[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractBLO.get(CrbaCustRiskAuxAbstractBLO.java:270) - get( filter )
20230325: 083250     DEBUG  3103[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractDACImpl.get(CrbaCustRiskAuxAbstractDACImpl.java:322) - get( filter )
20230325: 083250     DEBUG  3103[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
CrbaCustRiskAux|0|equalcrbaBillAcNo|

20230325: 083250     DEBUG  3237[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: CrbaCustRiskAux
Execute SQL Statement: SELECT CRBA_BILL_AC_NO, CRBA_ACC_DISC_VAL, CRBA_AUX_FLOAT_1, CRBA_AUX_FLOAT_2, CRBA_AUX_FLOAT_3, CRBA_AUX_INT_1, CRBA_AUX_INT_2, CRBA_AUX_INT_3, CRBA_AUX_CHAR_1, CRBA_AUX_CHAR_2, CRBA_AUX_CHAR_3, CRBA_AUX_DATE_1, CRBA_AUX_DATE_2, CRBA_AUX_DATE_3
FROM crba_cust_risk_aux
WHERE CRBA_BILL_AC_NO = ? 
Argument(s): |A5085810|
20230325: 083250     DEBUG  3238[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@244038d0
20230325: 083250     DEBUG  3315[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.CrbCustRiskBal )
20230325: 083250     DEBUG  3316[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getCrbCustRiskBalDAC(BaseAbstractDACFactory.java:943) - getCrbCustRiskBalDAC()
20230325: 083250     DEBUG  3332[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.CrbCustRiskBalDACImpl com.eppixcomm.eppix.base.dml.CrbCustRiskBalDMLFactory@1e81f4dc
20230325: 083250     DEBUG  3333[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbCustRiskBalDACImpl
20230325: 083250     DEBUG  3338[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083250     DEBUG  3338[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbCustRiskBalDACImpl TO MAP
20230325: 083250     DEBUG  3339[main] - com.eppixcomm.eppix.base.blo.CrbCustRiskBalAbstractBLO.get(CrbCustRiskBalAbstractBLO.java:256) - get( filter )
20230325: 083250     DEBUG  3339[main] - com.eppixcomm.eppix.base.blo.CrbCustRiskBalAbstractDACImpl.get(CrbCustRiskBalAbstractDACImpl.java:96) - get( filter )
20230325: 083250     DEBUG  3342[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
crbCustRiskBal|0|equalCrbBillAcNo|

20230325: 083250     DEBUG  3480[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: crbCustRiskBal
Execute SQL Statement: SELECT CRB_BILL_AC_NO, CRB_ACCOUNT_TYPE, CRB_CREDIT_LIMIT, CRB_ACC_BAL, CRB_UNBILL_CHARGES, CRB_UNBILL_CALLS, CRB_DIFF, CRB_NEXT_THRESHOLD, CRB_PREV_THRESHOLD, CRB_COLL_PLAN, CRB_MIN_THRESHOLD, CRB_ACTIVATE_FLAG, CRB_EAP_FLAG, CRB_BL_STATUS, CRB_BL_TYPE, CRB_BL_LIMIT, CRB_BL_DIFF, CRB_BL_NEXT_THRESH, CRB_BL_PREV_THRESH, CRB_BL_NEXT_ACN_ID, CRB_BL_PREV_ACN_ID, CRB_BL_TRIG_FLAG, CRB_BL_LAST_UPDATE
FROM CRB_CUST_RISK_BAL
WHERE CRB_BILL_AC_NO = ?
Argument(s): |A5085810|
20230325: 083250     DEBUG  3495[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@77556fd
20230325: 083250     DEBUG  3580[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10087) - 
Select sbd_subscriber_id, start_period, sparech, chaserv, charge from sbd_sub_dets, vam_active_msisdn, bill_CYC9520230205 WHERE subscriber_id = sbd_subscriber_id AND subscriber_id =  vam_subscriber_id  AND handset =  vam_msisdn_no  AND sparech[1,3] != 'CCC'  AND charge > 0   AND sbd_bill_ac_no = 'A5085810'
20230325: 083250     DEBUG  3686[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31060221
chaserv: OTGR
charge: 17.3900000000000005684341886080801486968994140625
20230325: 083250     DEBUG  3686[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083250     DEBUG  3687[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083250     DEBUG  3688[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083250     DEBUG  3693[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083250     DEBUG  3695[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getVcfVrbleChrgFeeDAC(BaseAbstractDACFactory.java:1477) - getVcfVrbleChrgFeeDAC()
20230325: 083250     DEBUG  3717[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeDACImpl com.eppixcomm.eppix.base.dml.VcfVrbleChrgFeeDMLFactory@707f7052
20230325: 083250     DEBUG  3717[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeDACImpl
20230325: 083250     DEBUG  3720[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083250     DEBUG  3721[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeDACImpl TO MAP
20230325: 083250     DEBUG  3721[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083250     DEBUG  3722[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083250     DEBUG  3722[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083251     DEBUG  3860[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230325: 083251     DEBUG  3898[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230325: 083251     DEBUG  3899[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31060267
chaserv: OTGR
charge: 117.3900000000000005684341886080801486968994140625
20230325: 083251     DEBUG  3899[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083251     DEBUG  3900[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083251     DEBUG  3901[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083251     DEBUG  3901[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083251     DEBUG  3902[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083251     DEBUG  3903[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083251     DEBUG  3903[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083251     DEBUG  3956[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230325: 083251     DEBUG  4006[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230325: 083251     DEBUG  4007[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31064291
chaserv: OTGR
charge: 33.909999999999996589394868351519107818603515625
20230325: 083251     DEBUG  4008[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083251     DEBUG  4008[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083251     DEBUG  4009[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083251     DEBUG  4009[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083251     DEBUG  4010[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083251     DEBUG  4010[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083251     DEBUG  4012[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083251     DEBUG  4065[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230325: 083251     DEBUG  4101[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230325: 083251     DEBUG  4102[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31064292
chaserv: OTGR
charge: 33.909999999999996589394868351519107818603515625
20230325: 083251     DEBUG  4103[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083251     DEBUG  4104[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083251     DEBUG  4104[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083251     DEBUG  4105[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083251     DEBUG  4106[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083251     DEBUG  4106[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083251     DEBUG  4107[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083251     DEBUG  4174[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230325: 083251     DEBUG  4209[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230325: 083251     DEBUG  4211[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000287625
start_period: 2023-01-09
sparech: CFF             BSWA      VS1R
chaserv: EVS5R
charge: 120.4200000000000017053025658242404460906982421875
20230325: 083251     DEBUG  4211[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFF
20230325: 083251     DEBUG  4212[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-09 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083251     DEBUG  4214[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFF
20230325: 083251     DEBUG  4215[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083251     DEBUG  4215[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083251     DEBUG  4216[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083251     DEBUG  4216[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083251     DEBUG  4270[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |EVS5R|1000287625|A5085810|A|
20230325: 083251     DEBUG  4308[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR EVS5R COUNT:  0
20230325: 083251     DEBUG  4309[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 120.4200000000000017053025658242404460906982421875
20230325: 083251     DEBUG  4310[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA CUGCHG           619420822
chaserv: ESMCC
charge: 48.59999847412109375
20230325: 083251     DEBUG  4311[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083251     DEBUG  4311[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083251     DEBUG  4312[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083251     DEBUG  4314[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083251     DEBUG  4314[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083251     DEBUG  4314[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083251     DEBUG  4315[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083251     DEBUG  4367[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCC|1000740188|A5085810|A|
20230325: 083251     DEBUG  4402[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCC COUNT:  0
20230325: 083251     DEBUG  4403[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 48.59999847412109375
20230325: 083251     DEBUG  4405[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA DATACHG           61942082
chaserv: ESMCD
charge: 25.5
20230325: 083251     DEBUG  4405[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083251     DEBUG  4406[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083251     DEBUG  4406[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083251     DEBUG  4407[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083251     DEBUG  4408[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083251     DEBUG  4408[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083251     DEBUG  4409[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083251     DEBUG  4466[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCD|1000740188|A5085810|A|
20230325: 083251     DEBUG  4507[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCD COUNT:  0
20230325: 083251     DEBUG  4507[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 25.5
20230325: 083251     DEBUG  4508[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA SMSCHG           -49820895
chaserv: ESMCS
charge: 34.5
20230325: 083251     DEBUG  4509[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083251     DEBUG  4510[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083251     DEBUG  4510[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083251     DEBUG  4511[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083251     DEBUG  4511[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083251     DEBUG  4511[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083251     DEBUG  4512[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083251     DEBUG  4551[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCS|1000740188|A5085810|A|
20230325: 083251     DEBUG  4595[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCS COUNT:  0
20230325: 083251     DEBUG  4596[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 34.5
20230325: 083251     DEBUG  4598[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA VOICECHG           6194208
chaserv: ESMCV
charge: 243
20230325: 083251     DEBUG  4598[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083251     DEBUG  4599[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083251     DEBUG  4600[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083251     DEBUG  4602[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083251     DEBUG  4602[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083251     DEBUG  4602[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083251     DEBUG  4603[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083251     DEBUG  4640[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCV|1000740188|A5085810|A|
20230325: 083251     DEBUG  4686[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCV COUNT:  0
20230325: 083251     DEBUG  4687[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 243
20230325: 083251     DEBUG  4688[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA ESPRCHG           61942082
chaserv: ESOBD
charge: 7750.81005859375
20230325: 083251     DEBUG  4689[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083251     DEBUG  4689[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083251     DEBUG  4689[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083251     DEBUG  4690[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083251     DEBUG  4691[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083251     DEBUG  4691[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083251     DEBUG  4692[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083251     DEBUG  4743[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESOBD|1000740188|A5085810|A|
20230325: 083251     DEBUG  4778[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESOBD COUNT:  0
20230325: 083251     DEBUG  4778[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 7750.81005859375
20230325: 083251     DEBUG  4779[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA ESPRCHG           61942082
chaserv: ESOBV
charge: 632.6099853515625
20230325: 083251     DEBUG  4779[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083251     DEBUG  4779[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083251     DEBUG  4779[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083251     DEBUG  4779[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083251     DEBUG  4779[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083251     DEBUG  4779[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083251     DEBUG  4779[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083252     DEBUG  4816[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESOBV|1000740188|A5085810|A|
20230325: 083252     DEBUG  4850[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESOBV COUNT:  0
20230325: 083252     DEBUG  4851[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 632.6099853515625
20230325: 083252     DEBUG  4851[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1001769643
start_period: 2023-02-05
sparech: CFA SVRCHG         31064290
chaserv: OTGR
charge: 51.2999999999999971578290569595992565155029296875
20230325: 083252     DEBUG  4851[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083252     DEBUG  4852[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083252     DEBUG  4852[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083252     DEBUG  4852[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083252     DEBUG  4852[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083252     DEBUG  4852[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083252     DEBUG  4853[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083252     DEBUG  4897[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|1001769643|A5085810|A|
20230325: 083252     DEBUG  4933[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  1
20230325: 083252     DEBUG  4934[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1003400281
start_period: 2023-01-20
sparech: CFF             BUDA      UCWD
chaserv: UCPWD
charge: 122.0799999999999982946974341757595539093017578125
20230325: 083252     DEBUG  4935[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFF
20230325: 083252     DEBUG  4935[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-20 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083252     DEBUG  4936[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFF
20230325: 083252     DEBUG  4936[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083252     DEBUG  4937[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083252     DEBUG  4937[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083252     DEBUG  4937[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083252     DEBUG  4974[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |UCPWD|1003400281|A5085810|A|
20230325: 083252     DEBUG  5010[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR UCPWD COUNT:  0
20230325: 083252     DEBUG  5011[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 122.0799999999999982946974341757595539093017578125
20230325: 083252     DEBUG  5047[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10193) - 
otherCharges: 8977.5200424194335937500000000000000000000000000000
20230325: 083252     DEBUG  5049[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10197) - 
Before VAT unbilledCharges: 35617.1099575805637869052588939666748046875000000000
20230325: 083252     DEBUG  5050[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10201) - 
UNBILLED CHARGES + VAT: 40959.676451217648354941047728061676025390625000000000
20230325: 083252     DEBUG  5052[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1110) - 
TOTAL MAX ALLOWED: 537477.52
20230325: 083252     DEBUG  5052[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSpulByAccount
20230325: 083252     DEBUG  5053[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSpulByAccount|0||

20230325: 083252     DEBUG  5176[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSpulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SPUL' AND sbd_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 083252     DEBUG  5176[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@47d384ee
20230325: 083252     DEBUG  5250[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.CrbaCustRiskAux )
20230325: 083252     DEBUG  5250[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractBLO.get(CrbaCustRiskAuxAbstractBLO.java:270) - get( filter )
20230325: 083252     DEBUG  5251[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractDACImpl.get(CrbaCustRiskAuxAbstractDACImpl.java:322) - get( filter )
20230325: 083252     DEBUG  5251[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
CrbaCustRiskAux|0|equalcrbaBillAcNo|

20230325: 083252     DEBUG  5288[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: CrbaCustRiskAux
Execute SQL Statement: SELECT CRBA_BILL_AC_NO, CRBA_ACC_DISC_VAL, CRBA_AUX_FLOAT_1, CRBA_AUX_FLOAT_2, CRBA_AUX_FLOAT_3, CRBA_AUX_INT_1, CRBA_AUX_INT_2, CRBA_AUX_INT_3, CRBA_AUX_CHAR_1, CRBA_AUX_CHAR_2, CRBA_AUX_CHAR_3, CRBA_AUX_DATE_1, CRBA_AUX_DATE_2, CRBA_AUX_DATE_3
FROM crba_cust_risk_aux
WHERE CRBA_BILL_AC_NO = ? 
Argument(s): |A5085810|
20230325: 083252     DEBUG  5289[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@387c703b
20230325: 083440     DEBUG     0[main] - com.eppixcomm.eppix.base.test.TestIdcAccSubServ.loadproperties(TestIdcAccSubServ.java:171) - loading appProperties
20230325: 083440     DEBUG     7[main] - com.eppixcomm.eppix.base.test.TestIdcAccSubServ.loadproperties(TestIdcAccSubServ.java:178) - appProperties loaded : {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230325: 083440     DEBUG     8[main] - com.eppixcomm.eppix.base.test.TestIdcAccSubServ.dbConnectionInit(TestIdcAccSubServ.java:191) - DB Connection start
20230325: 083440     DEBUG     8[main] - com.eppixcomm.eppix.base.test.TestIdcAccSubServ.dbConnectionInit(TestIdcAccSubServ.java:194) - {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230325: 083440     DEBUG   631[main] - com.eppixcomm.eppix.common.data.DACFactory.<init>(DACFactory.java:95) - constructor( connection, thrower )
20230325: 083440     DEBUG   633[main] - com.eppixcomm.eppix.common.data.ConnectionContext.connect(ConnectionContext.java:100) - connect( connection )
20230325: 083440     DEBUG   633[main] - com.eppixcomm.eppix.common.data.ConnectionContext.get(ConnectionContext.java:82) - get()
20230325: 083440     DEBUG   637[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.IDAccSubServList )
20230325: 083440     DEBUG   667[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getIDAccSubServListDAC(BaseDACFactory.java:571) - getIDAccSubServListDAC
20230325: 083440     DEBUG   674[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.IDAccSubServListDACImpl com.eppixcomm.eppix.base.dml.IDAccSubServListDML@6d21714c
20230325: 083440     DEBUG   674[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.IDAccSubServListDACImpl
20230325: 083441     DEBUG   696[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083441     DEBUG   696[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.IDAccSubServListDACImpl TO MAP
20230325: 083441     DEBUG   697[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowed )
20230325: 083441     DEBUG   700[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetSULMaxUsageAllowedDAC(BaseDACFactory.java:532) - getGetSULMaxUsageAllowedDAC
20230325: 083441     DEBUG   702[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl com.eppixcomm.eppix.base.dml.GetSULMaxUsageAllowedDML@619a5dff
20230325: 083441     DEBUG   702[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl
20230325: 083441     DEBUG   703[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083441     DEBUG   703[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl TO MAP
20230325: 083441     DEBUG   704[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230325: 083441     DEBUG   706[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetServiceDiscountDAC(BaseDACFactory.java:426) - getGetServiceDiscountDAC()
20230325: 083441     DEBUG   709[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl com.eppixcomm.eppix.base.dml.GetServiceDiscountDML@6438a396
20230325: 083441     DEBUG   709[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl
20230325: 083441     DEBUG   710[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083441     DEBUG   710[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl TO MAP
20230325: 083441     DEBUG   718[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230325: 083441     DEBUG   798[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberUpgradeMigradeDAC(BaseDACFactory.java:519) - getSubscriberUpgradeMigradeDAC
20230325: 083441     DEBUG   805[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl com.eppixcomm.eppix.base.dml.SubscriberUpgradeMigradeDML@7506e922
20230325: 083441     DEBUG   805[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl
20230325: 083441     DEBUG   807[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083441     DEBUG   808[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl TO MAP
20230325: 083441     DEBUG   808[main] - com.eppixcomm.eppix.base.test.TestIdcAccSubServ.dbConnectionInit(TestIdcAccSubServ.java:218) - DB Connection successfull
20230325: 083441     DEBUG   812[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSulByAccount
20230325: 083441     DEBUG   813[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSulByAccount|0||

20230325: 083441     DEBUG   952[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SUL' AND sbd_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 083441     DEBUG   955[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@f2a0b8e
20230325: 083441     DEBUG  1038[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getCrbUnbillCharges
20230325: 083441     DEBUG  1039[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getCrbUnbillCharges|0||

20230325: 083441     DEBUG  1160[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getCrbUnbillCharges
Execute SQL Statement: SELECT NVL((crb_unbill_charges + crb_unbill_calls), 0) FROM crb_cust_risk_bal WHERE crb_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 083441     DEBUG  1160[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2530c12
20230325: 083441     DEBUG  1230[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getAccountCreditLimit
20230325: 083441     DEBUG  1230[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getAccountCreditLimit|0||

20230325: 083441     DEBUG  1341[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getAccountCreditLimit
Execute SQL Statement: SELECT credit_limit FROM slcustm WHERE customer = ? 
Argument(s): |A5085810|
20230325: 083441     DEBUG  1343[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3b95a09c
20230325: 083441     DEBUG  1417[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSubscriberVasServices|0|NONE|

20230325: 083441     DEBUG  1559[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getSubscriberVasServices
Execute SQL Statement: SELECT vas_service_code FROM vas_active_service WHERE vas_subscriber_id = ? AND vas_service_code NOT IN (SELECT tt_type FROM tt_type_text WHERE tt_group = 'IDACCSRVEX');
Argument(s): |140978|
20230325: 083441     DEBUG  1658[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BlhBillLimitHd )
20230325: 083442     DEBUG  1837[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getBlhBillLimitHdDAC(BaseAbstractDACFactory.java:930) - getBlhBillLimitHdDAC()
20230325: 083442     DEBUG  1847[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl com.eppixcomm.eppix.base.dml.BlhBillLimitHdDMLFactory@17d10166
20230325: 083442     DEBUG  1847[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl
20230325: 083442     DEBUG  1848[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083442     DEBUG  1848[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl TO MAP
20230325: 083442     DEBUG  1849[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractBLO.get(BlhBillLimitHdAbstractBLO.java:264) - get( filter )
20230325: 083442     DEBUG  1849[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractDACImpl.get(BlhBillLimitHdAbstractDACImpl.java:98) - get( filter )
20230325: 083442     DEBUG  1850[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BlhBillLimitHd|0|equalBlhSubscriberId+equalBlhServiceCode|

20230325: 083442     DEBUG  2029[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BlhBillLimitHd
Execute SQL Statement: SELECT BLH_SUBSCRIBER_ID, BLH_SERVICE_CODE, BLH_BILL_LIMIT_VAL, BLH_LEVEL,BLH_TYPE, BLH_VAT_IND, BLH_UNBILL_USAGE, BLH_UNBILL_CHARGES, BLH_DIFF,BLH_USER_STATUS, BLH_NEXT_THRESHOLD, BLH_PREV_THRESHOLD, BLH_NEXT_ACN_ID,BLH_PREV_ACN_ID, BLH_NETWORK_ACN, BLH_TRIG_FLAG, BLH_LAST_UPDATE
FROM BLH_BILL_LIMIT_HD
WHERE BLH_SUBSCRIBER_ID = ? AND BLH_SERVICE_CODE = ?
Argument(s): |140978|SPUL|
20230325: 083442     ERROR  2123[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5888) - Failed to get Bill Limits for subscriber: 140978 and service code: SPUL
20230325: 083442     ERROR  2124[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5904) - Exception getting Bill Limits for subscriber: 140978 and service code: SPUL EXCEPTION: com.eppixcomm.eppix.base.error.EPPIXSeriousException: Failed to get Bill Limits for subscriber: 140978 and service code: SPUL
20230325: 083442     ERROR  2124[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:983) - Exception getting Bill Limits for subscriber: 140978 and service code: SPUL EXCEPTION: com.eppixcomm.eppix.base.error.EPPIXSeriousException: Failed to get Bill Limits for subscriber: 140978 and service code: SPUL
20230325: 083442     DEBUG  2125[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BlhBillLimitHd )
20230325: 083442     DEBUG  2125[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractBLO.get(BlhBillLimitHdAbstractBLO.java:264) - get( filter )
20230325: 083442     DEBUG  2125[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractDACImpl.get(BlhBillLimitHdAbstractDACImpl.java:98) - get( filter )
20230325: 083442     DEBUG  2126[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BlhBillLimitHd|0|equalBlhSubscriberId+equalBlhServiceCode|

20230325: 083442     DEBUG  2162[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BlhBillLimitHd
Execute SQL Statement: SELECT BLH_SUBSCRIBER_ID, BLH_SERVICE_CODE, BLH_BILL_LIMIT_VAL, BLH_LEVEL,BLH_TYPE, BLH_VAT_IND, BLH_UNBILL_USAGE, BLH_UNBILL_CHARGES, BLH_DIFF,BLH_USER_STATUS, BLH_NEXT_THRESHOLD, BLH_PREV_THRESHOLD, BLH_NEXT_ACN_ID,BLH_PREV_ACN_ID, BLH_NETWORK_ACN, BLH_TRIG_FLAG, BLH_LAST_UPDATE
FROM BLH_BILL_LIMIT_HD
WHERE BLH_SUBSCRIBER_ID = ? AND BLH_SERVICE_CODE = ?
Argument(s): |140978|SUL|
20230325: 083442     ERROR  2249[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5888) - Failed to get Bill Limits for subscriber: 140978 and service code: SUL
20230325: 083442     ERROR  2249[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5904) - Exception getting Bill Limits for subscriber: 140978 and service code: SUL EXCEPTION: com.eppixcomm.eppix.base.error.EPPIXSeriousException: Failed to get Bill Limits for subscriber: 140978 and service code: SUL
20230325: 083442     ERROR  2250[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1011) - Exception getting Bill Limits for subscriber: 140978 and service code: SUL EXCEPTION: com.eppixcomm.eppix.base.error.EPPIXSeriousException: Failed to get Bill Limits for subscriber: 140978 and service code: SUL
20230325: 083442     ERROR  2250[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1034) - 
CREDIT LIMIT: 578437.20
TOTAL CHARGES: 46169.73
TOTAL SUL320.00
20230325: 083442     ERROR  2251[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1058) - 
TOTAL SUL WITHOUT CURRENT SUL: 320.00
AFTER CREDIT LIMIT: 578437.20
TOTAL CHARGES: 46169.73TOTAL SUL: 320.00
PARAM CHARGES: 0.00
20230325: 083442     DEBUG  2254[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SksKeySetting )
20230325: 083442     DEBUG  2255[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSksKeySettingDAC(BaseAbstractDACFactory.java:314) - getSksKeySettingDAC()
20230325: 083442     DEBUG  2261[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl com.eppixcomm.eppix.base.dml.SksKeySettingAbstractDMLFactory@442d9b6e
20230325: 083442     DEBUG  2262[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl
20230325: 083442     DEBUG  2263[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083442     DEBUG  2264[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl TO MAP
20230325: 083442     DEBUG  2264[main] - com.eppixcomm.eppix.base.blo.SksKeySettingAbstractBLO.get(SksKeySettingAbstractBLO.java:500) - get( filter )
20230325: 083442     DEBUG  2264[main] - com.eppixcomm.eppix.base.blo.SksKeySettingAbstractDACImpl.get(SksKeySettingAbstractDACImpl.java:420) - get( filter )
20230325: 083442     DEBUG  2265[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
SksKeySetting|0|equalSksKeyCode|

20230325: 083442     DEBUG  2386[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SksKeySetting
Execute SQL Statement: SELECT SKS_KEY_CODE, SKS_VALUE, SKS_COMMENT, SKS_TIMESTAMP
FROM SKS_KEY_SETTING
WHERE (SKS_KEY_CODE) = ?
Argument(s): |ALFTURNONO|
20230325: 083442     DEBUG  2391[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@c2e1f26
20230325: 083442     DEBUG  2484[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.Sysdirm )
20230325: 083442     DEBUG  2486[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSysdirmDAC(BaseAbstractDACFactory.java:327) - getSysdirmDAC()
20230325: 083442     DEBUG  2493[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SysdirmDACImpl com.eppixcomm.eppix.base.dml.SysdirmAbstractDMLFactory@1ee0005
20230325: 083442     DEBUG  2494[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SysdirmDACImpl
20230325: 083442     DEBUG  2497[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083442     DEBUG  2498[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SysdirmDACImpl TO MAP
20230325: 083442     DEBUG  2498[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractBLO.get(SysdirmAbstractBLO.java:501) - get( filter )
20230325: 083442     DEBUG  2499[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractDACImpl.get(SysdirmAbstractDACImpl.java:435) - get( filter )
20230325: 083442     DEBUG  2500[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
Sysdirm|0|equalSystemKey|

20230325: 083442     DEBUG  2630[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: Sysdirm
Execute SQL Statement: SELECT SYSTEM_KEY, KEY_VALUE, DESCRIPTION
FROM SYSDIRM
WHERE (SYSTEM_KEY) = ?
Argument(s): |OPVATCODE|
20230325: 083442     DEBUG  2631[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1c4af82c
20230325: 083443     DEBUG  2701[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVatPercentageByCode
20230325: 083443     DEBUG  2702[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVatPercentageByCode|0||

20230325: 083443     DEBUG  2822[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVatPercentageByCode
Execute SQL Statement: SELECT percentage FROM cevatm WHERE vat_code = ? 
Argument(s): |VST|
20230325: 083443     DEBUG  2823[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@123a439b
20230325: 083443     DEBUG  2897[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BcyBillingCycle )
20230325: 083443     DEBUG  2899[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getBcyBillingCycleDAC(BaseAbstractDACFactory.java:550) - getBcyBillingCycleDAC()
20230325: 083443     DEBUG  2911[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.BcyBillingCycleDACImpl com.eppixcomm.eppix.base.dml.BcyBillingCycleDMLFactory@76ccd017
20230325: 083443     DEBUG  2912[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.BcyBillingCycleDACImpl
20230325: 083443     DEBUG  2915[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083443     DEBUG  2916[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.BcyBillingCycleDACImpl TO MAP
20230325: 083443     DEBUG  2916[main] - com.eppixcomm.eppix.base.blo.BcyBillingCycleAbstractBLO.get(BcyBillingCycleAbstractBLO.java:587) - get( filter )
20230325: 083443     DEBUG  2916[main] - com.eppixcomm.eppix.base.blo.BcyBillingCycleAbstractDACImpl.get(BcyBillingCycleAbstractDACImpl.java:492) - get( filter )
20230325: 083443     DEBUG  2917[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BcyBillingCycle|0|equalBcyBillCycle|

20230325: 083443     DEBUG  3049[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BcyBillingCycle
Execute SQL Statement: SELECT BCY_BILL_CYCLE, BCY_DESCRIPTION, BCY_PERIOD, BCY_FREQUENCY, BCY_DAY_OF_RUN, BCY_NEXT_RUN, BCY_SUSPENDED, BCY_USE_STATUS, BCY_NEXT_CALL_RUN, BCY_IN_ADVANCE
FROM BCY_BILLING_CYCLE
WHERE BCY_BILL_CYCLE = ?
Argument(s): |CYC95|
20230325: 083443     DEBUG  3063[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2d363fb3
20230325: 083443     DEBUG  3141[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10040) - 
billTable=bill_CYC9520230205
20230325: 083443     DEBUG  3145[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.CrbaCustRiskAux )
20230325: 083443     DEBUG  3147[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getCrbaCustRiskAuxDAC(BaseAbstractDACFactory.java:1601) - getCrbaCustRiskAuxDAC()
20230325: 083443     DEBUG  3163[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxDACImpl com.eppixcomm.eppix.base.dml.CrbaCustRiskAuxDMLFactory@69222c14
20230325: 083443     DEBUG  3163[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxDACImpl
20230325: 083443     DEBUG  3167[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083443     DEBUG  3167[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxDACImpl TO MAP
20230325: 083443     DEBUG  3168[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractBLO.get(CrbaCustRiskAuxAbstractBLO.java:270) - get( filter )
20230325: 083443     DEBUG  3168[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractDACImpl.get(CrbaCustRiskAuxAbstractDACImpl.java:322) - get( filter )
20230325: 083443     DEBUG  3170[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
CrbaCustRiskAux|0|equalcrbaBillAcNo|

20230325: 083443     DEBUG  3310[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: CrbaCustRiskAux
Execute SQL Statement: SELECT CRBA_BILL_AC_NO, CRBA_ACC_DISC_VAL, CRBA_AUX_FLOAT_1, CRBA_AUX_FLOAT_2, CRBA_AUX_FLOAT_3, CRBA_AUX_INT_1, CRBA_AUX_INT_2, CRBA_AUX_INT_3, CRBA_AUX_CHAR_1, CRBA_AUX_CHAR_2, CRBA_AUX_CHAR_3, CRBA_AUX_DATE_1, CRBA_AUX_DATE_2, CRBA_AUX_DATE_3
FROM crba_cust_risk_aux
WHERE CRBA_BILL_AC_NO = ? 
Argument(s): |A5085810|
20230325: 083443     DEBUG  3312[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@244038d0
20230325: 083443     DEBUG  3395[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.CrbCustRiskBal )
20230325: 083443     DEBUG  3396[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getCrbCustRiskBalDAC(BaseAbstractDACFactory.java:943) - getCrbCustRiskBalDAC()
20230325: 083443     DEBUG  3417[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.CrbCustRiskBalDACImpl com.eppixcomm.eppix.base.dml.CrbCustRiskBalDMLFactory@1e81f4dc
20230325: 083443     DEBUG  3418[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbCustRiskBalDACImpl
20230325: 083443     DEBUG  3424[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083443     DEBUG  3426[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbCustRiskBalDACImpl TO MAP
20230325: 083443     DEBUG  3427[main] - com.eppixcomm.eppix.base.blo.CrbCustRiskBalAbstractBLO.get(CrbCustRiskBalAbstractBLO.java:256) - get( filter )
20230325: 083443     DEBUG  3427[main] - com.eppixcomm.eppix.base.blo.CrbCustRiskBalAbstractDACImpl.get(CrbCustRiskBalAbstractDACImpl.java:96) - get( filter )
20230325: 083443     DEBUG  3430[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
crbCustRiskBal|0|equalCrbBillAcNo|

20230325: 083443     DEBUG  3598[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: crbCustRiskBal
Execute SQL Statement: SELECT CRB_BILL_AC_NO, CRB_ACCOUNT_TYPE, CRB_CREDIT_LIMIT, CRB_ACC_BAL, CRB_UNBILL_CHARGES, CRB_UNBILL_CALLS, CRB_DIFF, CRB_NEXT_THRESHOLD, CRB_PREV_THRESHOLD, CRB_COLL_PLAN, CRB_MIN_THRESHOLD, CRB_ACTIVATE_FLAG, CRB_EAP_FLAG, CRB_BL_STATUS, CRB_BL_TYPE, CRB_BL_LIMIT, CRB_BL_DIFF, CRB_BL_NEXT_THRESH, CRB_BL_PREV_THRESH, CRB_BL_NEXT_ACN_ID, CRB_BL_PREV_ACN_ID, CRB_BL_TRIG_FLAG, CRB_BL_LAST_UPDATE
FROM CRB_CUST_RISK_BAL
WHERE CRB_BILL_AC_NO = ?
Argument(s): |A5085810|
20230325: 083443     DEBUG  3610[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@77556fd
20230325: 083444     DEBUG  3711[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10087) - 
Select sbd_subscriber_id, start_period, sparech, chaserv, charge from sbd_sub_dets, vam_active_msisdn, bill_CYC9520230205 WHERE subscriber_id = sbd_subscriber_id AND subscriber_id =  vam_subscriber_id  AND handset =  vam_msisdn_no  AND sparech[1,3] != 'CCC'  AND charge > 0   AND sbd_bill_ac_no = 'A5085810'
20230325: 083444     DEBUG  3816[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31060221
chaserv: OTGR
charge: 17.3900000000000005684341886080801486968994140625
20230325: 083444     DEBUG  3817[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083444     DEBUG  3817[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083444     DEBUG  3818[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083444     DEBUG  3823[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083444     DEBUG  3824[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getVcfVrbleChrgFeeDAC(BaseAbstractDACFactory.java:1477) - getVcfVrbleChrgFeeDAC()
20230325: 083444     DEBUG  3846[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeDACImpl com.eppixcomm.eppix.base.dml.VcfVrbleChrgFeeDMLFactory@707f7052
20230325: 083444     DEBUG  3847[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeDACImpl
20230325: 083444     DEBUG  3852[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083444     DEBUG  3853[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeDACImpl TO MAP
20230325: 083444     DEBUG  3853[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083444     DEBUG  3854[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083444     DEBUG  3854[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083444     DEBUG  4007[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230325: 083444     DEBUG  4043[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230325: 083444     DEBUG  4044[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31060267
chaserv: OTGR
charge: 117.3900000000000005684341886080801486968994140625
20230325: 083444     DEBUG  4044[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083444     DEBUG  4044[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083444     DEBUG  4045[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083444     DEBUG  4045[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083444     DEBUG  4046[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083444     DEBUG  4046[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083444     DEBUG  4047[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083444     DEBUG  4099[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230325: 083444     DEBUG  4135[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230325: 083444     DEBUG  4136[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31064291
chaserv: OTGR
charge: 33.909999999999996589394868351519107818603515625
20230325: 083444     DEBUG  4137[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083444     DEBUG  4137[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083444     DEBUG  4138[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083444     DEBUG  4138[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083444     DEBUG  4139[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083444     DEBUG  4139[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083444     DEBUG  4140[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083444     DEBUG  4188[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230325: 083444     DEBUG  4222[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230325: 083444     DEBUG  4223[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31064292
chaserv: OTGR
charge: 33.909999999999996589394868351519107818603515625
20230325: 083444     DEBUG  4224[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083444     DEBUG  4225[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083444     DEBUG  4225[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083444     DEBUG  4226[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083444     DEBUG  4228[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083444     DEBUG  4228[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083444     DEBUG  4229[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083444     DEBUG  4278[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230325: 083444     DEBUG  4315[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230325: 083444     DEBUG  4316[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000287625
start_period: 2023-01-09
sparech: CFF             BSWA      VS1R
chaserv: EVS5R
charge: 120.4200000000000017053025658242404460906982421875
20230325: 083444     DEBUG  4316[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFF
20230325: 083444     DEBUG  4317[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-09 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083444     DEBUG  4317[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFF
20230325: 083444     DEBUG  4318[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083444     DEBUG  4318[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083444     DEBUG  4319[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083444     DEBUG  4319[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083444     DEBUG  4375[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |EVS5R|1000287625|A5085810|A|
20230325: 083444     DEBUG  4416[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR EVS5R COUNT:  0
20230325: 083444     DEBUG  4417[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 120.4200000000000017053025658242404460906982421875
20230325: 083444     DEBUG  4418[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA CUGCHG           619420822
chaserv: ESMCC
charge: 48.59999847412109375
20230325: 083444     DEBUG  4418[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083444     DEBUG  4419[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083444     DEBUG  4420[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083444     DEBUG  4420[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083444     DEBUG  4421[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083444     DEBUG  4421[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083444     DEBUG  4422[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083444     DEBUG  4460[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCC|1000740188|A5085810|A|
20230325: 083444     DEBUG  4498[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCC COUNT:  0
20230325: 083444     DEBUG  4499[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 48.59999847412109375
20230325: 083444     DEBUG  4500[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA DATACHG           61942082
chaserv: ESMCD
charge: 25.5
20230325: 083444     DEBUG  4500[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083444     DEBUG  4500[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083444     DEBUG  4501[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083444     DEBUG  4503[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083444     DEBUG  4503[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083444     DEBUG  4503[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083444     DEBUG  4504[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083444     DEBUG  4556[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCD|1000740188|A5085810|A|
20230325: 083444     DEBUG  4592[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCD COUNT:  0
20230325: 083444     DEBUG  4593[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 25.5
20230325: 083444     DEBUG  4594[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA SMSCHG           -49820895
chaserv: ESMCS
charge: 34.5
20230325: 083444     DEBUG  4595[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083444     DEBUG  4596[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083444     DEBUG  4597[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083444     DEBUG  4597[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083444     DEBUG  4598[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083444     DEBUG  4599[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083444     DEBUG  4599[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083444     DEBUG  4649[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCS|1000740188|A5085810|A|
20230325: 083445     DEBUG  4699[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCS COUNT:  0
20230325: 083445     DEBUG  4700[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 34.5
20230325: 083445     DEBUG  4702[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA VOICECHG           6194208
chaserv: ESMCV
charge: 243
20230325: 083445     DEBUG  4702[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083445     DEBUG  4703[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083445     DEBUG  4704[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083445     DEBUG  4705[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083445     DEBUG  4706[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083445     DEBUG  4707[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083445     DEBUG  4707[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083445     DEBUG  4746[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCV|1000740188|A5085810|A|
20230325: 083445     DEBUG  4782[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCV COUNT:  0
20230325: 083445     DEBUG  4782[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 243
20230325: 083445     DEBUG  4782[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA ESPRCHG           61942082
chaserv: ESOBD
charge: 7750.81005859375
20230325: 083445     DEBUG  4783[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083445     DEBUG  4783[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083445     DEBUG  4783[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083445     DEBUG  4783[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083445     DEBUG  4783[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083445     DEBUG  4783[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083445     DEBUG  4783[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083445     DEBUG  4822[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESOBD|1000740188|A5085810|A|
20230325: 083445     DEBUG  4857[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESOBD COUNT:  0
20230325: 083445     DEBUG  4857[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 7750.81005859375
20230325: 083445     DEBUG  4858[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA ESPRCHG           61942082
chaserv: ESOBV
charge: 632.6099853515625
20230325: 083445     DEBUG  4858[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083445     DEBUG  4858[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083445     DEBUG  4858[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083445     DEBUG  4858[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083445     DEBUG  4858[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083445     DEBUG  4858[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083445     DEBUG  4859[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083445     DEBUG  4893[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESOBV|1000740188|A5085810|A|
20230325: 083445     DEBUG  4939[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESOBV COUNT:  0
20230325: 083445     DEBUG  4940[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 632.6099853515625
20230325: 083445     DEBUG  4941[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1001769643
start_period: 2023-02-05
sparech: CFA SVRCHG         31064290
chaserv: OTGR
charge: 51.2999999999999971578290569595992565155029296875
20230325: 083445     DEBUG  4942[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083445     DEBUG  4942[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083445     DEBUG  4943[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083445     DEBUG  4944[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083445     DEBUG  4944[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083445     DEBUG  4945[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083445     DEBUG  4945[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083445     DEBUG  4990[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|1001769643|A5085810|A|
20230325: 083445     DEBUG  5028[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  1
20230325: 083445     DEBUG  5030[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1003400281
start_period: 2023-01-20
sparech: CFF             BUDA      UCWD
chaserv: UCPWD
charge: 122.0799999999999982946974341757595539093017578125
20230325: 083445     DEBUG  5031[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFF
20230325: 083445     DEBUG  5032[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-20 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083445     DEBUG  5032[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFF
20230325: 083445     DEBUG  5033[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083445     DEBUG  5034[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083445     DEBUG  5034[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083445     DEBUG  5035[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083445     DEBUG  5096[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |UCPWD|1003400281|A5085810|A|
20230325: 083445     DEBUG  5133[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR UCPWD COUNT:  0
20230325: 083445     DEBUG  5134[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 122.0799999999999982946974341757595539093017578125
20230325: 083445     DEBUG  5170[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10193) - 
otherCharges: 8977.5200424194335937500000000000000000000000000000
20230325: 083445     DEBUG  5171[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10197) - 
Before VAT unbilledCharges: 35617.1099575805637869052588939666748046875000000000
20230325: 083445     DEBUG  5172[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10201) - 
UNBILLED CHARGES + VAT: 40959.676451217648354941047728061676025390625000000000
20230325: 083445     DEBUG  5174[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1110) - 
TOTAL MAX ALLOWED: 537477.52
20230325: 083445     DEBUG  5175[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSpulByAccount
20230325: 083445     DEBUG  5175[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSpulByAccount|0||

20230325: 083445     DEBUG  5311[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSpulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SPUL' AND sbd_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 083445     DEBUG  5312[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@47d384ee
20230325: 083445     DEBUG  5395[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.CrbaCustRiskAux )
20230325: 083445     DEBUG  5396[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractBLO.get(CrbaCustRiskAuxAbstractBLO.java:270) - get( filter )
20230325: 083445     DEBUG  5396[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractDACImpl.get(CrbaCustRiskAuxAbstractDACImpl.java:322) - get( filter )
20230325: 083445     DEBUG  5397[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
CrbaCustRiskAux|0|equalcrbaBillAcNo|

20230325: 083445     DEBUG  5443[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: CrbaCustRiskAux
Execute SQL Statement: SELECT CRBA_BILL_AC_NO, CRBA_ACC_DISC_VAL, CRBA_AUX_FLOAT_1, CRBA_AUX_FLOAT_2, CRBA_AUX_FLOAT_3, CRBA_AUX_INT_1, CRBA_AUX_INT_2, CRBA_AUX_INT_3, CRBA_AUX_CHAR_1, CRBA_AUX_CHAR_2, CRBA_AUX_CHAR_3, CRBA_AUX_DATE_1, CRBA_AUX_DATE_2, CRBA_AUX_DATE_3
FROM crba_cust_risk_aux
WHERE CRBA_BILL_AC_NO = ? 
Argument(s): |A5085810|
20230325: 083445     DEBUG  5444[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@387c703b
20230325: 083445     DEBUG  5519[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSulByAccount
20230325: 083445     DEBUG  5519[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSulByAccount|0||

20230325: 083445     DEBUG  5577[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SUL' AND sbd_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 083445     DEBUG  5578[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5f150435
20230325: 083445     DEBUG  5664[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getTsServiceBySubscriber|0|NONE|

20230325: 083446     DEBUG  5811[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getTsServiceBySubscriber
Execute SQL Statement:  select * from ts_tariff_service  where ts_service_code  in  (select vas_service_code from vas_active_service  where vas_subscriber_id in   (select sbd_subscriber_id from sbd_sub_dets  where sbd_bill_ac_no = ?))  and ts_package_code =  ?  and ts_internal_tariff = ?  and (ts_sub_charge1 <> '' ) 
Argument(s): |A5085810|||
20230325: 083511     DEBUG     0[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.loadproperties(TestSubscriberServices.java:280) - loading appProperties
20230325: 083511     DEBUG     6[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.loadproperties(TestSubscriberServices.java:287) - appProperties loaded : {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230325: 083511     DEBUG     7[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:300) - DB Connection start
20230325: 083511     DEBUG     7[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:303) - {jdbc_driver=com.informix.jdbc.IfxDriver, jdbc_user=compans, jdbc_pass=@Wsxcde34, jdbc_url=jdbc:informix-sqli:mtnx83:8302/eppix:INFORMIXSERVER=epx_83_dev_2}
20230325: 083512     DEBUG   648[main] - com.eppixcomm.eppix.common.data.DACFactory.<init>(DACFactory.java:95) - constructor( connection, thrower )
20230325: 083512     DEBUG   651[main] - com.eppixcomm.eppix.common.data.ConnectionContext.connect(ConnectionContext.java:100) - connect( connection )
20230325: 083512     DEBUG   651[main] - com.eppixcomm.eppix.common.data.ConnectionContext.get(ConnectionContext.java:82) - get()
20230325: 083512     DEBUG   651[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberActiveServices )
20230325: 083512     DEBUG   691[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberActiveServicesDAC(BaseDACFactory.java:506) - getSubscriberActiveServicesDAC
20230325: 083512     DEBUG   699[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl com.eppixcomm.eppix.base.dml.SubscriberActiveServicesDML@6d21714c
20230325: 083512     DEBUG   699[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl
20230325: 083512     DEBUG   753[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083512     DEBUG   753[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberActiveServicesDACImpl TO MAP
20230325: 083512     DEBUG   754[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230325: 083512     DEBUG   755[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetServiceDiscountDAC(BaseDACFactory.java:426) - getGetServiceDiscountDAC()
20230325: 083512     DEBUG   759[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl com.eppixcomm.eppix.base.dml.GetServiceDiscountDML@619a5dff
20230325: 083512     DEBUG   759[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl
20230325: 083512     DEBUG   760[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083512     DEBUG   760[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetServiceDiscountDACImpl TO MAP
20230325: 083512     DEBUG   763[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SimAPNServices )
20230325: 083512     DEBUG   767[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSimAPNServicesDAC(BaseDACFactory.java:467) - getSimAPNServicesDAC
20230325: 083512     DEBUG   769[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl com.eppixcomm.eppix.base.dml.SimAPNServicesDML@6438a396
20230325: 083512     DEBUG   769[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl
20230325: 083512     DEBUG   770[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083512     DEBUG   770[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SimAPNServicesDACImpl TO MAP
20230325: 083512     DEBUG   771[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowed )
20230325: 083512     DEBUG   774[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getGetSULMaxUsageAllowedDAC(BaseDACFactory.java:532) - getGetSULMaxUsageAllowedDAC
20230325: 083512     DEBUG   777[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl com.eppixcomm.eppix.base.dml.GetSULMaxUsageAllowedDML@7506e922
20230325: 083512     DEBUG   777[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl
20230325: 083512     DEBUG   778[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083512     DEBUG   778[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedDACImpl TO MAP
20230325: 083512     DEBUG   778[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230325: 083512     DEBUG   788[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230325: 083512     DEBUG   916[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getSubscriberUpgradeMigradeDAC(BaseDACFactory.java:519) - getSubscriberUpgradeMigradeDAC
20230325: 083512     DEBUG   922[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl com.eppixcomm.eppix.base.dml.SubscriberUpgradeMigradeDML@5d6f64b1
20230325: 083512     DEBUG   923[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl
20230325: 083512     DEBUG   926[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083512     DEBUG   926[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeDACImpl TO MAP
20230325: 083512     DEBUG   926[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230325: 083512     DEBUG   926[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowed )
20230325: 083512     DEBUG   927[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.GetServiceDiscount )
20230325: 083512     DEBUG   927[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230325: 083512     DEBUG   927[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigrade )
20230325: 083512     DEBUG   927[main] - com.eppixcomm.eppix.base.test.TestSubscriberServices.dbConnectionInit(TestSubscriberServices.java:336) - DB Connection successfull
20230325: 083512     DEBUG   931[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SbdSubDets )
20230325: 083512     DEBUG  1112[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSbdSubDetsDAC(BaseAbstractDACFactory.java:234) - getSbdSubDetsDAC()
20230325: 083512     DEBUG  1125[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl com.eppixcomm.eppix.base.dml.SbdSubDetsAbstractDMLFactory@f2a0b8e
20230325: 083512     DEBUG  1125[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl
20230325: 083512     DEBUG  1127[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083512     DEBUG  1128[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SbdSubDetsDACImpl TO MAP
20230325: 083512     DEBUG  1128[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractBLO.get(SbdSubDetsAbstractBLO.java:531) - get( filter )
20230325: 083512     DEBUG  1128[main] - com.eppixcomm.eppix.base.blo.SbdSubDetsAbstractDACImpl.get(SbdSubDetsAbstractDACImpl.java:556) - get( filter )
20230325: 083512     DEBUG  1135[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
SbdSubDets|0|equalSbdSubscriberId|

20230325: 083512     DEBUG  1271[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SbdSubDets
Execute SQL Statement: SELECT SBD_SUBSCRIBER_ID, SBD_DIALLING_NO, SBD_BILL_AC_NO, SBD_CONNECT_DATE, SBD_DCONNECT_DATE, SBD_TERM_DATE, SBD_TITLE, SBD_SURNAME, SBD_FIRSTNAME, SBD_GENDER, SBD_DOB, SBD_PASSWORD, SBD_LOCATION_CODE, SBD_BILL_CYCLE, SBD_PACKAGE_CODE, SBD_BILLED_UPTO, SBD_TARIFF_PLAN
FROM SBD_SUB_DETS
WHERE SBD_SUBSCRIBER_ID = ?
Argument(s): |1003411985|
20230325: 083512     DEBUG  1274[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3b764bce
20230325: 083512     DEBUG  1367[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSulByAccount
20230325: 083512     DEBUG  1368[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSulByAccount|0||

20230325: 083512     DEBUG  1483[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SUL' AND sbd_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 083512     DEBUG  1485[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6bf2d08e
20230325: 083513     DEBUG  1558[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getCrbUnbillCharges
20230325: 083513     DEBUG  1558[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getCrbUnbillCharges|0||

20230325: 083513     DEBUG  1669[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getCrbUnbillCharges
Execute SQL Statement: SELECT NVL((crb_unbill_charges + crb_unbill_calls), 0) FROM crb_cust_risk_bal WHERE crb_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 083513     DEBUG  1669[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7e774085
20230325: 083513     DEBUG  1743[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getAccountCreditLimit
20230325: 083513     DEBUG  1743[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getAccountCreditLimit|0||

20230325: 083513     DEBUG  1867[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getAccountCreditLimit
Execute SQL Statement: SELECT credit_limit FROM slcustm WHERE customer = ? 
Argument(s): |A5085810|
20230325: 083513     DEBUG  1868[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1b701da1
20230325: 083513     DEBUG  1941[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSubscriberVasServices|0|NONE|

20230325: 083513     DEBUG  2051[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getSubscriberVasServices
Execute SQL Statement: SELECT vas_service_code FROM vas_active_service WHERE vas_subscriber_id = ? AND vas_service_code NOT IN (SELECT tt_type FROM tt_type_text WHERE tt_group = 'IDACCSRVEX');
Argument(s): |1003411985|
20230325: 083513     DEBUG  2052[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@15615099
20230325: 083513     DEBUG  2053[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 083513     DEBUG  2054[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getTtTypeTextDAC(BaseAbstractDACFactory.java:144) - getTtTypeTextDAC()
20230325: 083513     DEBUG  2057[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.TtTypeTextDACImpl com.eppixcomm.eppix.base.dml.TtTypeTextAbstractDMLFactory@1963006a
20230325: 083513     DEBUG  2057[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.TtTypeTextDACImpl
20230325: 083513     DEBUG  2058[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083513     DEBUG  2058[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.TtTypeTextDACImpl TO MAP
20230325: 083513     DEBUG  2058[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 083513     DEBUG  2058[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 083513     DEBUG  2059[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 083513     DEBUG  2188[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|BSTL|
20230325: 083513     ERROR  2276[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1242) - Failed to get TT for group: ADHC_BUNDL and type: BSTL
20230325: 083513     DEBUG  2283[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 083513     DEBUG  2284[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 083513     DEBUG  2421[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |BSTL|1003411985|
20230325: 083513     DEBUG  2422[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5e91993f
20230325: 083513     DEBUG  2493[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@379619aa
20230325: 083513     DEBUG  2494[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 083513     DEBUG  2495[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 083513     DEBUG  2495[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 083513     DEBUG  2495[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 083514     DEBUG  2542[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|CSCP|
20230325: 083514     ERROR  2626[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1242) - Failed to get TT for group: ADHC_BUNDL and type: CSCP
20230325: 083514     DEBUG  2627[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 083514     DEBUG  2627[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 083514     DEBUG  2664[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |CSCP|1003411985|
20230325: 083514     DEBUG  2664[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4361bd48
20230325: 083514     DEBUG  2735[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2401f4c3
20230325: 083514     DEBUG  2736[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 083514     DEBUG  2736[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 083514     DEBUG  2736[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 083514     DEBUG  2737[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 083514     DEBUG  2773[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|EVE |
20230325: 083514     ERROR  2845[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1242) - Failed to get TT for group: ADHC_BUNDL and type: EVE 
20230325: 083514     DEBUG  2846[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 083514     DEBUG  2846[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 083514     DEBUG  2882[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |EVE |1003411985|
20230325: 083514     DEBUG  2883[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7d6f77cc
20230325: 083514     DEBUG  2955[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@73a28541
20230325: 083514     DEBUG  2956[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 083514     DEBUG  2957[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 083514     DEBUG  2957[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 083514     DEBUG  2958[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 083514     DEBUG  3002[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|ITBL|
20230325: 083514     ERROR  3089[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1242) - Failed to get TT for group: ADHC_BUNDL and type: ITBL
20230325: 083514     DEBUG  3089[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 083514     DEBUG  3090[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 083514     DEBUG  3163[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |ITBL|1003411985|
20230325: 083514     DEBUG  3164[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@244038d0
20230325: 083516     DEBUG  4615[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5fdef03a
20230325: 083516     DEBUG  4615[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 083516     DEBUG  4616[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 083516     DEBUG  4616[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 083516     DEBUG  4616[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 083516     DEBUG  4661[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|MBIP|
20230325: 083516     ERROR  4735[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1242) - Failed to get TT for group: ADHC_BUNDL and type: MBIP
20230325: 083516     DEBUG  4736[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 083516     DEBUG  4738[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 083516     DEBUG  4774[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |MBIP|1003411985|
20230325: 083516     DEBUG  4777[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5c8da962
20230325: 083516     DEBUG  4863[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.PshParamServHdr )
20230325: 083516     DEBUG  4866[main] - com.eppixcomm.eppix.base.blo.BaseDACFactory.getPshParamServHdrDAC(BaseDACFactory.java:199) - getPshParamServHdrDAC()
20230325: 083516     DEBUG  4882[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.PshParamServHdrDACImpl com.eppixcomm.eppix.base.dml.PshParamServHdrAbstractDMLFactory@368239c8
20230325: 083516     DEBUG  4890[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.PshParamServHdrDACImpl
20230325: 083516     DEBUG  4891[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083516     DEBUG  4892[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.PshParamServHdrDACImpl TO MAP
20230325: 083516     DEBUG  4892[main] - com.eppixcomm.eppix.base.blo.PshParamServHdrAbstractBLO.get(PshParamServHdrAbstractBLO.java:516) - get( filter )
20230325: 083516     DEBUG  4892[main] - com.eppixcomm.eppix.base.blo.PshParamServHdrAbstractDACImpl.get(PshParamServHdrAbstractDACImpl.java:448) - get( filter )
20230325: 083516     DEBUG  4893[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
PshParamServHdr|0|equalPshServiceCode+equalPshSubscriberId+equalPshArchived|

20230325: 083516     DEBUG  5047[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: PshParamServHdr
Execute SQL Statement: SELECT PSH_ID, PSH_SERVICE_CODE, PSH_SERVICE_TYPE, PSH_SUBSCRIBER_ID, PSH_SIM_NO, PSH_MSISDN_NO, PSH_ARCHIVED
FROM PSH_PARAM_SERV_HDR
WHERE (PSH_SERVICE_CODE) = ? AND PSH_SUBSCRIBER_ID = ? AND (PSH_ARCHIVED) = ?
Argument(s): |MBIP|1003411985|N|
20230325: 083516     DEBUG  5048[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@11028347
20230325: 083516     DEBUG  5123[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getPshPsdServices|0|NONE|

20230325: 083516     DEBUG  5231[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getPshPsdServices
Execute SQL Statement: SELECT * FROM psh_param_serv_hdr, psd_param_serv_det WHERE psd_psh_id = ? AND psh_id = psd_psh_id AND psd_param_active = 'Y' 
Argument(s): |23449756|
20230325: 083516     DEBUG  5233[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@77468bd9
20230325: 083516     DEBUG  5269[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 083516     DEBUG  5269[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 083516     DEBUG  5270[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 083516     DEBUG  5270[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 083516     DEBUG  5309[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |CHGVARPARM|MBSIP|
20230325: 083516     ERROR  5392[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1242) - Failed to get TT for group: CHGVARPARM and type: MBSIP
20230325: 083516     DEBUG  5392[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getChgNetId|0|NONE|

20230325: 083516     DEBUG  5506[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getChgNetId
Execute SQL Statement: SELECT chg_netid FROM chg_charges WHERE chg_code = ? ORDER BY chg_effective_date DESC
Argument(s): |MBBIP|
20230325: 083516     DEBUG  5507[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@61064425
20230325: 083517     DEBUG  5594[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: MBBIP
String netId: M1   
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083517     DEBUG  5594[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: MBBIP
20230325: 083517     DEBUG  5601[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083517     DEBUG  5603[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getChgChargesDAC(BaseAbstractDACFactory.java:578) - getChgChargesDAC()
20230325: 083517     DEBUG  5620[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.ChgChargesDACImpl com.eppixcomm.eppix.base.dml.ChgChargesDMLFactory@2e5c649
20230325: 083517     DEBUG  5621[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.ChgChargesDACImpl
20230325: 083517     DEBUG  5624[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083517     DEBUG  5625[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.ChgChargesDACImpl TO MAP
20230325: 083517     DEBUG  5625[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083517     DEBUG  5626[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083517     DEBUG  5627[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083517     DEBUG  5757[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |MBBIP|M1   |2023-03-25|F|
20230325: 083517     DEBUG  5796[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2022-08-10
20230325: 083517     DEBUG  5798[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2022-08-10
20230325: 083517     DEBUG  5799[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083517     DEBUG  5799[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083517     DEBUG  5800[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083517     DEBUG  5801[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083517     DEBUG  5929[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |MBBIP|M1   |2022-08-10|F|
20230325: 083517     DEBUG  5935[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2ff5659e
20230325: 083517     DEBUG  6017[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@161cd475
20230325: 083517     DEBUG  6018[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 083517     DEBUG  6018[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 083517     DEBUG  6018[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 083517     DEBUG  6019[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 083517     DEBUG  6077[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|PENB|
20230325: 083517     ERROR  6156[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1242) - Failed to get TT for group: ADHC_BUNDL and type: PENB
20230325: 083517     DEBUG  6157[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 083517     DEBUG  6157[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 083517     DEBUG  6194[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |PENB|1003411985|
20230325: 083517     DEBUG  6196[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@27ddd392
20230325: 083517     DEBUG  6284[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7cef4e59
20230325: 083517     DEBUG  6284[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 083517     DEBUG  6285[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 083517     DEBUG  6285[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 083517     DEBUG  6285[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 083517     DEBUG  6332[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|SPUL|
20230325: 083517     ERROR  6424[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1242) - Failed to get TT for group: ADHC_BUNDL and type: SPUL
20230325: 083517     DEBUG  6425[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 083517     DEBUG  6425[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 083517     DEBUG  6463[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |SPUL|1003411985|
20230325: 083517     DEBUG  6464[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@16b4a017
20230325: 083518     DEBUG  6547[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2a3046da
20230325: 083518     DEBUG  6548[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 083518     DEBUG  6549[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 083518     DEBUG  6549[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 083518     DEBUG  6551[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 083518     DEBUG  6602[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|SUB |
20230325: 083518     ERROR  6673[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1242) - Failed to get TT for group: ADHC_BUNDL and type: SUB 
20230325: 083518     DEBUG  6674[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 083518     DEBUG  6674[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 083518     DEBUG  6713[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |SUB |1003411985|
20230325: 083518     DEBUG  6714[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@59690aa4
20230325: 083518     DEBUG  6787[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@574caa3f
20230325: 083518     DEBUG  6822[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.TtTypeText )
20230325: 083518     DEBUG  6823[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractBLO.get(TtTypeTextAbstractBLO.java:542) - get( filter )
20230325: 083518     DEBUG  6823[main] - com.eppixcomm.eppix.base.blo.TtTypeTextAbstractDACImpl.get(TtTypeTextAbstractDACImpl.java:451) - get( filter )
20230325: 083518     DEBUG  6823[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
TtTypeText|0|equalTtGroup+equalTtType|

20230325: 083518     DEBUG  6860[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: TtTypeText
Execute SQL Statement: SELECT TT_GROUP, TT_LANG, TT_TYPE, TT_TEXT, TT_CONFIG
FROM TT_TYPE_TEXT
WHERE (TT_GROUP) = ? AND (TT_TYPE) = ?
Argument(s): |ADHC_BUNDL|VPNA|
20230325: 083518     ERROR  6933[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getTtTypeText(GetSULMaxUsageAllowedBLO.java:1242) - Failed to get TT for group: ADHC_BUNDL and type: VPNA
20230325: 083518     DEBUG  6933[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVstParameterised
20230325: 083518     DEBUG  6934[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVstParameterised|0||

20230325: 083518     DEBUG  6978[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVstParameterised
Execute SQL Statement: SELECT vst_parameterised FROM vst_service_types,vsr_service,vas_active_service WHERE vst_service_type = vsr_service_type AND vsr_service_code = vas_service_code AND vas_service_code = ? AND vas_subscriber_id = ? 
Argument(s): |VPNA|1003411985|
20230325: 083518     DEBUG  6979[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2280cdac
20230325: 083518     DEBUG  7145[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BlhBillLimitHd )
20230325: 083518     DEBUG  7147[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getBlhBillLimitHdDAC(BaseAbstractDACFactory.java:930) - getBlhBillLimitHdDAC()
20230325: 083518     DEBUG  7161[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl com.eppixcomm.eppix.base.dml.BlhBillLimitHdDMLFactory@60215eee
20230325: 083518     DEBUG  7162[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl
20230325: 083518     DEBUG  7164[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083518     DEBUG  7164[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.BlhBillLimitHdDACImpl TO MAP
20230325: 083518     DEBUG  7165[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractBLO.get(BlhBillLimitHdAbstractBLO.java:264) - get( filter )
20230325: 083518     DEBUG  7165[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractDACImpl.get(BlhBillLimitHdAbstractDACImpl.java:98) - get( filter )
20230325: 083518     DEBUG  7166[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BlhBillLimitHd|0|equalBlhSubscriberId+equalBlhServiceCode|

20230325: 083518     DEBUG  7320[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BlhBillLimitHd
Execute SQL Statement: SELECT BLH_SUBSCRIBER_ID, BLH_SERVICE_CODE, BLH_BILL_LIMIT_VAL, BLH_LEVEL,BLH_TYPE, BLH_VAT_IND, BLH_UNBILL_USAGE, BLH_UNBILL_CHARGES, BLH_DIFF,BLH_USER_STATUS, BLH_NEXT_THRESHOLD, BLH_PREV_THRESHOLD, BLH_NEXT_ACN_ID,BLH_PREV_ACN_ID, BLH_NETWORK_ACN, BLH_TRIG_FLAG, BLH_LAST_UPDATE
FROM BLH_BILL_LIMIT_HD
WHERE BLH_SUBSCRIBER_ID = ? AND BLH_SERVICE_CODE = ?
Argument(s): |1003411985|SPUL|
20230325: 083518     DEBUG  7322[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5479e3f
20230325: 083518     DEBUG  7391[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BlhBillLimitHd )
20230325: 083518     DEBUG  7391[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractBLO.get(BlhBillLimitHdAbstractBLO.java:264) - get( filter )
20230325: 083518     DEBUG  7392[main] - com.eppixcomm.eppix.base.blo.BlhBillLimitHdAbstractDACImpl.get(BlhBillLimitHdAbstractDACImpl.java:98) - get( filter )
20230325: 083518     DEBUG  7392[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BlhBillLimitHd|0|equalBlhSubscriberId+equalBlhServiceCode|

20230325: 083518     DEBUG  7448[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BlhBillLimitHd
Execute SQL Statement: SELECT BLH_SUBSCRIBER_ID, BLH_SERVICE_CODE, BLH_BILL_LIMIT_VAL, BLH_LEVEL,BLH_TYPE, BLH_VAT_IND, BLH_UNBILL_USAGE, BLH_UNBILL_CHARGES, BLH_DIFF,BLH_USER_STATUS, BLH_NEXT_THRESHOLD, BLH_PREV_THRESHOLD, BLH_NEXT_ACN_ID,BLH_PREV_ACN_ID, BLH_NETWORK_ACN, BLH_TRIG_FLAG, BLH_LAST_UPDATE
FROM BLH_BILL_LIMIT_HD
WHERE BLH_SUBSCRIBER_ID = ? AND BLH_SERVICE_CODE = ?
Argument(s): |1003411985|SUL|
20230325: 083518     ERROR  7520[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5888) - Failed to get Bill Limits for subscriber: 1003411985 and service code: SUL
20230325: 083518     ERROR  7521[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getBillLimit(SubscriberUpgradeMigradeBLO.java:5904) - Exception getting Bill Limits for subscriber: 1003411985 and service code: SUL EXCEPTION: com.eppixcomm.eppix.base.error.EPPIXSeriousException: Failed to get Bill Limits for subscriber: 1003411985 and service code: SUL
20230325: 083518     ERROR  7521[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1011) - Exception getting Bill Limits for subscriber: 1003411985 and service code: SUL EXCEPTION: com.eppixcomm.eppix.base.error.EPPIXSeriousException: Failed to get Bill Limits for subscriber: 1003411985 and service code: SUL
20230325: 083518     ERROR  7521[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1034) - 
CREDIT LIMIT: 578437.20
TOTAL CHARGES: 46169.73
TOTAL SUL320.00
20230325: 083518     ERROR  7522[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1058) - 
TOTAL SUL WITHOUT CURRENT SUL: 320.00
AFTER CREDIT LIMIT: 578437.20
TOTAL CHARGES: 46169.73TOTAL SUL: 320.00
PARAM CHARGES: 0.00
20230325: 083518     DEBUG  7524[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.SksKeySetting )
20230325: 083518     DEBUG  7524[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSksKeySettingDAC(BaseAbstractDACFactory.java:314) - getSksKeySettingDAC()
20230325: 083518     DEBUG  7528[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl com.eppixcomm.eppix.base.dml.SksKeySettingAbstractDMLFactory@4f4a7090
20230325: 083518     DEBUG  7529[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl
20230325: 083518     DEBUG  7530[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083518     DEBUG  7530[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SksKeySettingDACImpl TO MAP
20230325: 083518     DEBUG  7530[main] - com.eppixcomm.eppix.base.blo.SksKeySettingAbstractBLO.get(SksKeySettingAbstractBLO.java:500) - get( filter )
20230325: 083518     DEBUG  7531[main] - com.eppixcomm.eppix.base.blo.SksKeySettingAbstractDACImpl.get(SksKeySettingAbstractDACImpl.java:420) - get( filter )
20230325: 083518     DEBUG  7531[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
SksKeySetting|0|equalSksKeyCode|

20230325: 083519     DEBUG  7715[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: SksKeySetting
Execute SQL Statement: SELECT SKS_KEY_CODE, SKS_VALUE, SKS_COMMENT, SKS_TIMESTAMP
FROM SKS_KEY_SETTING
WHERE (SKS_KEY_CODE) = ?
Argument(s): |ALFTURNONO|
20230325: 083519     DEBUG  7715[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1ef7fe8e
20230325: 083519     DEBUG  7792[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.Sysdirm )
20230325: 083519     DEBUG  7794[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getSysdirmDAC(BaseAbstractDACFactory.java:327) - getSysdirmDAC()
20230325: 083519     DEBUG  7805[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.SysdirmDACImpl com.eppixcomm.eppix.base.dml.SysdirmAbstractDMLFactory@2471cca7
20230325: 083519     DEBUG  7807[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.SysdirmDACImpl
20230325: 083519     DEBUG  7812[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083519     DEBUG  7813[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.SysdirmDACImpl TO MAP
20230325: 083519     DEBUG  7814[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractBLO.get(SysdirmAbstractBLO.java:501) - get( filter )
20230325: 083519     DEBUG  7815[main] - com.eppixcomm.eppix.base.blo.SysdirmAbstractDACImpl.get(SysdirmAbstractDACImpl.java:435) - get( filter )
20230325: 083519     DEBUG  7816[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
Sysdirm|0|equalSystemKey|

20230325: 083519     DEBUG  7950[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: Sysdirm
Execute SQL Statement: SELECT SYSTEM_KEY, KEY_VALUE, DESCRIPTION
FROM SYSDIRM
WHERE (SYSTEM_KEY) = ?
Argument(s): |OPVATCODE|
20230325: 083519     DEBUG  7951[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@31b7dea0
20230325: 083519     DEBUG  8039[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getVatPercentageByCode
20230325: 083519     DEBUG  8040[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getVatPercentageByCode|0||

20230325: 083519     DEBUG  8162[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getVatPercentageByCode
Execute SQL Statement: SELECT percentage FROM cevatm WHERE vat_code = ? 
Argument(s): |VST|
20230325: 083519     DEBUG  8162[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3930015a
20230325: 083519     DEBUG  8237[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.BcyBillingCycle )
20230325: 083519     DEBUG  8238[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getBcyBillingCycleDAC(BaseAbstractDACFactory.java:550) - getBcyBillingCycleDAC()
20230325: 083519     DEBUG  8247[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.BcyBillingCycleDACImpl com.eppixcomm.eppix.base.dml.BcyBillingCycleDMLFactory@387c703b
20230325: 083519     DEBUG  8247[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.BcyBillingCycleDACImpl
20230325: 083519     DEBUG  8251[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083519     DEBUG  8252[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.BcyBillingCycleDACImpl TO MAP
20230325: 083519     DEBUG  8252[main] - com.eppixcomm.eppix.base.blo.BcyBillingCycleAbstractBLO.get(BcyBillingCycleAbstractBLO.java:587) - get( filter )
20230325: 083519     DEBUG  8252[main] - com.eppixcomm.eppix.base.blo.BcyBillingCycleAbstractDACImpl.get(BcyBillingCycleAbstractDACImpl.java:492) - get( filter )
20230325: 083519     DEBUG  8254[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
BcyBillingCycle|0|equalBcyBillCycle|

20230325: 083519     DEBUG  8389[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: BcyBillingCycle
Execute SQL Statement: SELECT BCY_BILL_CYCLE, BCY_DESCRIPTION, BCY_PERIOD, BCY_FREQUENCY, BCY_DAY_OF_RUN, BCY_NEXT_RUN, BCY_SUSPENDED, BCY_USE_STATUS, BCY_NEXT_CALL_RUN, BCY_IN_ADVANCE
FROM BCY_BILLING_CYCLE
WHERE BCY_BILL_CYCLE = ?
Argument(s): |CYC95|
20230325: 083519     DEBUG  8390[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@282ba1e
20230325: 083519     DEBUG  8472[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10040) - 
billTable=bill_CYC9520230205
20230325: 083519     DEBUG  8474[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.CrbaCustRiskAux )
20230325: 083519     DEBUG  8474[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getCrbaCustRiskAuxDAC(BaseAbstractDACFactory.java:1601) - getCrbaCustRiskAuxDAC()
20230325: 083519     DEBUG  8479[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxDACImpl com.eppixcomm.eppix.base.dml.CrbaCustRiskAuxDMLFactory@3ecf72fd
20230325: 083519     DEBUG  8479[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxDACImpl
20230325: 083519     DEBUG  8481[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083519     DEBUG  8481[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxDACImpl TO MAP
20230325: 083519     DEBUG  8482[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractBLO.get(CrbaCustRiskAuxAbstractBLO.java:270) - get( filter )
20230325: 083519     DEBUG  8482[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractDACImpl.get(CrbaCustRiskAuxAbstractDACImpl.java:322) - get( filter )
20230325: 083519     DEBUG  8482[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
CrbaCustRiskAux|0|equalcrbaBillAcNo|

20230325: 083520     DEBUG  8633[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: CrbaCustRiskAux
Execute SQL Statement: SELECT CRBA_BILL_AC_NO, CRBA_ACC_DISC_VAL, CRBA_AUX_FLOAT_1, CRBA_AUX_FLOAT_2, CRBA_AUX_FLOAT_3, CRBA_AUX_INT_1, CRBA_AUX_INT_2, CRBA_AUX_INT_3, CRBA_AUX_CHAR_1, CRBA_AUX_CHAR_2, CRBA_AUX_CHAR_3, CRBA_AUX_DATE_1, CRBA_AUX_DATE_2, CRBA_AUX_DATE_3
FROM crba_cust_risk_aux
WHERE CRBA_BILL_AC_NO = ? 
Argument(s): |A5085810|
20230325: 083520     DEBUG  8637[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4b6995df
20230325: 083520     DEBUG  8736[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.CrbCustRiskBal )
20230325: 083520     DEBUG  8737[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getCrbCustRiskBalDAC(BaseAbstractDACFactory.java:943) - getCrbCustRiskBalDAC()
20230325: 083520     DEBUG  8746[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.CrbCustRiskBalDACImpl com.eppixcomm.eppix.base.dml.CrbCustRiskBalDMLFactory@61443d8f
20230325: 083520     DEBUG  8747[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbCustRiskBalDACImpl
20230325: 083520     DEBUG  8751[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083520     DEBUG  8751[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.CrbCustRiskBalDACImpl TO MAP
20230325: 083520     DEBUG  8752[main] - com.eppixcomm.eppix.base.blo.CrbCustRiskBalAbstractBLO.get(CrbCustRiskBalAbstractBLO.java:256) - get( filter )
20230325: 083520     DEBUG  8752[main] - com.eppixcomm.eppix.base.blo.CrbCustRiskBalAbstractDACImpl.get(CrbCustRiskBalAbstractDACImpl.java:96) - get( filter )
20230325: 083520     DEBUG  8754[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
crbCustRiskBal|0|equalCrbBillAcNo|

20230325: 083520     DEBUG  8907[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: crbCustRiskBal
Execute SQL Statement: SELECT CRB_BILL_AC_NO, CRB_ACCOUNT_TYPE, CRB_CREDIT_LIMIT, CRB_ACC_BAL, CRB_UNBILL_CHARGES, CRB_UNBILL_CALLS, CRB_DIFF, CRB_NEXT_THRESHOLD, CRB_PREV_THRESHOLD, CRB_COLL_PLAN, CRB_MIN_THRESHOLD, CRB_ACTIVATE_FLAG, CRB_EAP_FLAG, CRB_BL_STATUS, CRB_BL_TYPE, CRB_BL_LIMIT, CRB_BL_DIFF, CRB_BL_NEXT_THRESH, CRB_BL_PREV_THRESH, CRB_BL_NEXT_ACN_ID, CRB_BL_PREV_ACN_ID, CRB_BL_TRIG_FLAG, CRB_BL_LAST_UPDATE
FROM CRB_CUST_RISK_BAL
WHERE CRB_BILL_AC_NO = ?
Argument(s): |A5085810|
20230325: 083520     DEBUG  8910[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3aa9e816
20230325: 083520     DEBUG  8982[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10087) - 
Select sbd_subscriber_id, start_period, sparech, chaserv, charge from sbd_sub_dets, vam_active_msisdn, bill_CYC9520230205 WHERE subscriber_id = sbd_subscriber_id AND subscriber_id =  vam_subscriber_id  AND handset =  vam_msisdn_no  AND sparech[1,3] != 'CCC'  AND charge > 0   AND sbd_bill_ac_no = 'A5085810'
20230325: 083520     DEBUG  9064[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31060221
chaserv: OTGR
charge: 17.3900000000000005684341886080801486968994140625
20230325: 083520     DEBUG  9064[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083520     DEBUG  9064[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083520     DEBUG  9064[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083520     DEBUG  9066[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083520     DEBUG  9066[main] - com.eppixcomm.eppix.base.blo.BaseAbstractDACFactory.getVcfVrbleChrgFeeDAC(BaseAbstractDACFactory.java:1477) - getVcfVrbleChrgFeeDAC()
20230325: 083520     DEBUG  9071[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:115) - getDAC( dacImplClass, dmlFactory )com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeDACImpl com.eppixcomm.eppix.base.dml.VcfVrbleChrgFeeDMLFactory@7907ec20
20230325: 083520     DEBUG  9072[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:129) - BEFORE INSTANTIATION DAC CLASS: class com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeDACImpl
20230325: 083520     DEBUG  9073[main] - com.eppixcomm.eppix.common.data.DAC.<init>(DAC.java:66) - constructor(dao, thrower )
20230325: 083520     DEBUG  9073[main] - com.eppixcomm.eppix.common.data.DACFactory.getDAC(DACFactory.java:136) - AFTER ADDING DAC CLASS: class com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeDACImpl TO MAP
20230325: 083520     DEBUG  9073[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083520     DEBUG  9074[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083520     DEBUG  9074[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083520     DEBUG  9222[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230325: 083520     DEBUG  9261[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230325: 083520     DEBUG  9263[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31060267
chaserv: OTGR
charge: 117.3900000000000005684341886080801486968994140625
20230325: 083520     DEBUG  9263[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083520     DEBUG  9263[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083520     DEBUG  9264[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083520     DEBUG  9264[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083520     DEBUG  9265[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083520     DEBUG  9265[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083520     DEBUG  9266[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083520     DEBUG  9327[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230325: 083520     DEBUG  9363[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230325: 083520     DEBUG  9364[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31064291
chaserv: OTGR
charge: 33.909999999999996589394868351519107818603515625
20230325: 083520     DEBUG  9365[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083520     DEBUG  9365[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083520     DEBUG  9366[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083520     DEBUG  9366[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083520     DEBUG  9367[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083520     DEBUG  9367[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083520     DEBUG  9368[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083520     DEBUG  9411[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230325: 083520     DEBUG  9448[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230325: 083520     DEBUG  9448[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 15422876
start_period: 2023-02-05
sparech: CFA SVRCHG         31064292
chaserv: OTGR
charge: 33.909999999999996589394868351519107818603515625
20230325: 083520     DEBUG  9448[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083520     DEBUG  9449[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083520     DEBUG  9449[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083520     DEBUG  9449[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083520     DEBUG  9449[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083520     DEBUG  9449[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083520     DEBUG  9450[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083520     DEBUG  9487[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|15422876|A5085810|A|
20230325: 083520     DEBUG  9529[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  4
20230325: 083520     DEBUG  9529[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000287625
start_period: 2023-01-09
sparech: CFF             BSWA      VS1R
chaserv: EVS5R
charge: 120.4200000000000017053025658242404460906982421875
20230325: 083520     DEBUG  9530[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFF
20230325: 083520     DEBUG  9530[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-09 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083520     DEBUG  9530[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFF
20230325: 083520     DEBUG  9530[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083520     DEBUG  9531[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083520     DEBUG  9531[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083520     DEBUG  9531[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083521     DEBUG  9568[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |EVS5R|1000287625|A5085810|A|
20230325: 083521     DEBUG  9605[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR EVS5R COUNT:  0
20230325: 083521     DEBUG  9606[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 120.4200000000000017053025658242404460906982421875
20230325: 083521     DEBUG  9606[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA CUGCHG           619420822
chaserv: ESMCC
charge: 48.59999847412109375
20230325: 083521     DEBUG  9606[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083521     DEBUG  9607[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083521     DEBUG  9607[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083521     DEBUG  9607[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083521     DEBUG  9607[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083521     DEBUG  9608[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083521     DEBUG  9608[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083521     DEBUG  9661[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCC|1000740188|A5085810|A|
20230325: 083521     DEBUG  9699[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCC COUNT:  0
20230325: 083521     DEBUG  9699[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 48.59999847412109375
20230325: 083521     DEBUG  9699[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA DATACHG           61942082
chaserv: ESMCD
charge: 25.5
20230325: 083521     DEBUG  9700[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083521     DEBUG  9700[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083521     DEBUG  9700[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083521     DEBUG  9701[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083521     DEBUG  9701[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083521     DEBUG  9701[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083521     DEBUG  9702[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083521     DEBUG  9747[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCD|1000740188|A5085810|A|
20230325: 083521     DEBUG  9786[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCD COUNT:  0
20230325: 083521     DEBUG  9786[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 25.5
20230325: 083521     DEBUG  9787[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA SMSCHG           -49820895
chaserv: ESMCS
charge: 34.5
20230325: 083521     DEBUG  9787[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083521     DEBUG  9788[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083521     DEBUG  9788[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083521     DEBUG  9789[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083521     DEBUG  9789[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083521     DEBUG  9789[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083521     DEBUG  9790[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083521     DEBUG  9834[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCS|1000740188|A5085810|A|
20230325: 083521     DEBUG  9873[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCS COUNT:  0
20230325: 083521     DEBUG  9873[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 34.5
20230325: 083521     DEBUG  9873[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA VOICECHG           6194208
chaserv: ESMCV
charge: 243
20230325: 083521     DEBUG  9873[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083521     DEBUG  9874[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083521     DEBUG  9874[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083521     DEBUG  9874[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083521     DEBUG  9874[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083521     DEBUG  9874[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083521     DEBUG  9874[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083521     DEBUG  9919[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESMCV|1000740188|A5085810|A|
20230325: 083521     DEBUG  9967[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESMCV COUNT:  0
20230325: 083521     DEBUG  9967[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 243
20230325: 083521     DEBUG  9968[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA ESPRCHG           61942082
chaserv: ESOBD
charge: 7750.81005859375
20230325: 083521     DEBUG  9968[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083521     DEBUG  9968[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083521     DEBUG  9968[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083521     DEBUG  9969[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083521     DEBUG  9969[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083521     DEBUG  9969[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083521     DEBUG  9969[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083521     DEBUG 10005[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESOBD|1000740188|A5085810|A|
20230325: 083521     DEBUG 10043[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESOBD COUNT:  0
20230325: 083521     DEBUG 10043[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 7750.81005859375
20230325: 083521     DEBUG 10044[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1000740188
start_period: 2023-01-22
sparech: CFA ESPRCHG           61942082
chaserv: ESOBV
charge: 632.6099853515625
20230325: 083521     DEBUG 10044[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083521     DEBUG 10045[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-22 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083521     DEBUG 10045[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083521     DEBUG 10046[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083521     DEBUG 10047[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083521     DEBUG 10047[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083521     DEBUG 10048[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083521     DEBUG 10123[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |ESOBV|1000740188|A5085810|A|
20230325: 083521     DEBUG 10159[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR ESOBV COUNT:  0
20230325: 083521     DEBUG 10160[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 632.6099853515625
20230325: 083521     DEBUG 10162[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1001769643
start_period: 2023-02-05
sparech: CFA SVRCHG         31064290
chaserv: OTGR
charge: 51.2999999999999971578290569595992565155029296875
20230325: 083521     DEBUG 10162[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFA
20230325: 083521     DEBUG 10163[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-02-05 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083521     DEBUG 10163[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFA
20230325: 083521     DEBUG 10164[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083521     DEBUG 10164[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083521     DEBUG 10164[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083521     DEBUG 10165[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083521     DEBUG 10207[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |OTGR|1001769643|A5085810|A|
20230325: 083521     DEBUG 10244[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR OTGR COUNT:  1
20230325: 083521     DEBUG 10244[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10117) - 
sbd_subscriber_id: 1003400281
start_period: 2023-01-20
sparech: CFF             BUDA      UCWD
chaserv: UCPWD
charge: 122.0799999999999982946974341757595539093017578125
20230325: 083521     DEBUG 10244[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10122) - 
TEST CFACFF
20230325: 083521     DEBUG 10245[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10123) - 
startPeriod: 2023-01-20 bcyDMO.getBcyNextRun: 2023-02-05
20230325: 083521     DEBUG 10245[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10131) - 
IN CFA TEST: CFF
20230325: 083521     DEBUG 10245[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.VcfVrbleChrgFee )
20230325: 083521     DEBUG 10245[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractBLO.count(VcfVrbleChrgFeeAbstractBLO.java:313) - count( filter )
20230325: 083521     DEBUG 10245[main] - com.eppixcomm.eppix.base.blo.VcfVrbleChrgFeeAbstractDACImpl.count(VcfVrbleChrgFeeAbstractDACImpl.java:469) - count( filter )
20230325: 083521     DEBUG 10245[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
VcfVrbleChrgFee|10|equalVcfChargeCode+equalVcfSubscriberId+equalVcfCustomer+equalVcfStatus|

20230325: 083521     DEBUG 10281[main] - com.eppixcomm.eppix.common.data.DAOImpl.count(DAOImpl.java:1163) - count(param SQL): DML Name: VcfVrbleChrgFee
Execute SQL Statement: SELECT COUNT(*)
FROM vcf_vrble_chrg_fee
WHERE VCF_CHARGE_CODE = ?  AND VCF_SUBSCRIBER_ID = ?  AND VCF_CUSTOMER = ?  AND VCF_STATUS = ? 
Argument(s): |UCPWD|1003400281|A5085810|A|
20230325: 083521     DEBUG 10317[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10157) - 
COUNT VCF VARIABLE CHARGES FOR UCPWD COUNT:  0
20230325: 083521     DEBUG 10317[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10163) - 
CHARGED TO ADD TO OTHER CHARGES: 122.0799999999999982946974341757595539093017578125
20230325: 083521     DEBUG 10352[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10193) - 
otherCharges: 8977.5200424194335937500000000000000000000000000000
20230325: 083521     DEBUG 10352[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10197) - 
Before VAT unbilledCharges: 35617.1099575805637869052588939666748046875000000000
20230325: 083521     DEBUG 10353[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getCrbCharges(SubscriberUpgradeMigradeBLO.java:10201) - 
UNBILLED CHARGES + VAT: 40959.676451217648354941047728061676025390625000000000
20230325: 083521     DEBUG 10354[main] - com.eppixcomm.eppix.base.blo.GetSULMaxUsageAllowedBLO.getMaxUsageAllowed(GetSULMaxUsageAllowedBLO.java:1110) - 
TOTAL MAX ALLOWED: 537477.52
20230325: 083521     DEBUG 10354[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSpulByAccount
20230325: 083521     DEBUG 10354[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSpulByAccount|0||

20230325: 083521     DEBUG 10478[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSpulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SPUL' AND sbd_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 083521     DEBUG 10479[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4e04a765
20230325: 083522     DEBUG 10557[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.CrbaCustRiskAux )
20230325: 083522     DEBUG 10557[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractBLO.get(CrbaCustRiskAuxAbstractBLO.java:270) - get( filter )
20230325: 083522     DEBUG 10557[main] - com.eppixcomm.eppix.base.blo.CrbaCustRiskAuxAbstractDACImpl.get(CrbaCustRiskAuxAbstractDACImpl.java:322) - get( filter )
20230325: 083522     DEBUG 10558[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
CrbaCustRiskAux|0|equalcrbaBillAcNo|

20230325: 083522     DEBUG 10596[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: CrbaCustRiskAux
Execute SQL Statement: SELECT CRBA_BILL_AC_NO, CRBA_ACC_DISC_VAL, CRBA_AUX_FLOAT_1, CRBA_AUX_FLOAT_2, CRBA_AUX_FLOAT_3, CRBA_AUX_INT_1, CRBA_AUX_INT_2, CRBA_AUX_INT_3, CRBA_AUX_CHAR_1, CRBA_AUX_CHAR_2, CRBA_AUX_CHAR_3, CRBA_AUX_DATE_1, CRBA_AUX_DATE_2, CRBA_AUX_DATE_3
FROM crba_cust_risk_aux
WHERE CRBA_BILL_AC_NO = ? 
Argument(s): |A5085810|
20230325: 083522     DEBUG 10596[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@246ae04d
20230325: 083522     DEBUG 10674[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:761) - DML NAME: getSumSulByAccount
20230325: 083522     DEBUG 10675[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getSumSulByAccount|0||

20230325: 083522     DEBUG 10720[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:788) - get(static SQL): DML Name: getSumSulByAccount
Execute SQL Statement: Select SUM(BLH_BILL_LIMIT_VAL) FROM blh_bill_limit_hd,sbd_sub_dets WHERE blh_subscriber_id = sbd_subscriber_id AND blh_service_code  = 'SUL' AND sbd_bill_ac_no = ? 
Argument(s): |A5085810|
20230325: 083522     DEBUG 10721[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1e67b872
20230325: 083522     DEBUG 10795[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
getTsServiceBySubscriber|0|NONE|

20230325: 083522     DEBUG 10940[main] - com.eppixcomm.eppix.common.data.DAOImpl.iterator(DAOImpl.java:2377) - iterator(static SQL): DML Name: getTsServiceBySubscriber
Execute SQL Statement:  select * from ts_tariff_service  where ts_service_code  in  (select vas_service_code from vas_active_service  where vas_subscriber_id in   (select sbd_subscriber_id from sbd_sub_dets  where sbd_bill_ac_no = ?))  and ts_package_code =  ?  and ts_internal_tariff = ?  and (ts_sub_charge1 <> '' ) 
Argument(s): |A5085810|M4BDS|YT_34|
20230325: 083522     DEBUG 10941[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6fb554cc
20230325: 083522     DEBUG 10942[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: AR100
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083522     DEBUG 10942[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: AR100
20230325: 083522     DEBUG 10943[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083522     DEBUG 10943[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083522     DEBUG 10943[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083522     DEBUG 10944[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083522     DEBUG 10995[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |AR100|M1|2023-03-25|F|
20230325: 083522     DEBUG 11033[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-04-04
20230325: 083522     DEBUG 11034[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-04-04
20230325: 083522     DEBUG 11034[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083522     DEBUG 11034[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083522     DEBUG 11034[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083522     DEBUG 11034[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083522     DEBUG 11076[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |AR100|M1|2018-04-04|F|
20230325: 083522     DEBUG 11077[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3a03464
20230325: 083522     DEBUG 11153[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@617c74e5
20230325: 083522     DEBUG 11154[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: AR50
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083522     DEBUG 11154[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: AR50
20230325: 083522     DEBUG 11154[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083522     DEBUG 11155[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083522     DEBUG 11155[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083522     DEBUG 11156[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083522     DEBUG 11202[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |AR50|M1|2023-03-25|F|
20230325: 083522     DEBUG 11238[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-07-26
20230325: 083522     DEBUG 11239[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-07-26
20230325: 083522     DEBUG 11240[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083522     DEBUG 11240[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083522     DEBUG 11240[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083522     DEBUG 11241[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083522     DEBUG 11278[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |AR50|M1|2018-07-26|F|
20230325: 083522     DEBUG 11279[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2c9f9fb0
20230325: 083522     DEBUG 11361[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@9f70c54
20230325: 083522     DEBUG 11361[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: AR500
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083522     DEBUG 11362[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: AR500
20230325: 083522     DEBUG 11362[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083522     DEBUG 11362[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083522     DEBUG 11362[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083522     DEBUG 11362[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083522     DEBUG 11399[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |AR500|M1|2023-03-25|F|
20230325: 083522     DEBUG 11436[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-04-04
20230325: 083522     DEBUG 11436[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-04-04
20230325: 083522     DEBUG 11436[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083522     DEBUG 11437[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083522     DEBUG 11437[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083522     DEBUG 11437[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083522     DEBUG 11474[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |AR500|M1|2018-04-04|F|
20230325: 083522     DEBUG 11475[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@337d0578
20230325: 083523     DEBUG 11561[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@61a485d2
20230325: 083523     DEBUG 11561[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: BDB01
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083523     DEBUG 11561[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: BDB01
20230325: 083523     DEBUG 11562[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083523     DEBUG 11562[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083523     DEBUG 11562[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083523     DEBUG 11563[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083523     DEBUG 11599[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |BDB01|M1|2023-03-25|F|
20230325: 083523     DEBUG 11638[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-15
20230325: 083523     DEBUG 11638[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-15
20230325: 083523     DEBUG 11638[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083523     DEBUG 11638[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083523     DEBUG 11638[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083523     DEBUG 11638[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083523     DEBUG 11679[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |BDB01|M1|2018-05-15|F|
20230325: 083523     DEBUG 11680[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6a024a67
20230325: 083523     DEBUG 11753[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@174d20a
20230325: 083523     DEBUG 11754[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: M4BDS
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083523     DEBUG 11754[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: M4BDS
20230325: 083523     DEBUG 11754[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083523     DEBUG 11755[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083523     DEBUG 11755[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083523     DEBUG 11755[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083523     DEBUG 11807[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |M4BDS|M1|2023-03-25|F|
20230325: 083523     DEBUG 11844[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2021-11-22
20230325: 083523     DEBUG 11844[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2021-11-22
20230325: 083523     DEBUG 11845[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083523     DEBUG 11846[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083523     DEBUG 11846[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083523     DEBUG 11847[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083523     DEBUG 11892[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |M4BDS|M1|2021-11-22|F|
20230325: 083523     DEBUG 11893[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5f375618
20230325: 083523     DEBUG 11974[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@32d992b2
20230325: 083523     DEBUG 11975[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: BVB02
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083523     DEBUG 11975[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: BVB02
20230325: 083523     DEBUG 11975[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083523     DEBUG 11975[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083523     DEBUG 11975[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083523     DEBUG 11976[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083523     DEBUG 12026[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |BVB02|M1|2023-03-25|F|
20230325: 083523     DEBUG 12075[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-15
20230325: 083523     DEBUG 12075[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-15
20230325: 083523     DEBUG 12075[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083523     DEBUG 12075[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083523     DEBUG 12075[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083523     DEBUG 12076[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083523     DEBUG 12112[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |BVB02|M1|2018-05-15|F|
20230325: 083523     DEBUG 12113[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@51081592
20230325: 083523     DEBUG 12184[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@9629756
20230325: 083523     DEBUG 12184[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: C20G
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083523     DEBUG 12184[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: C20G
20230325: 083523     DEBUG 12185[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083523     DEBUG 12185[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083523     DEBUG 12185[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083523     DEBUG 12185[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083523     DEBUG 12231[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |C20G|M1|2023-03-25|F|
20230325: 083523     DEBUG 12271[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-11
20230325: 083523     DEBUG 12271[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-11
20230325: 083523     DEBUG 12271[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083523     DEBUG 12271[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083523     DEBUG 12272[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083523     DEBUG 12272[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083523     DEBUG 12318[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |C20G|M1|2018-05-11|F|
20230325: 083523     DEBUG 12322[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@28feb3fa
20230325: 083523     DEBUG 12421[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@51565ec2
20230325: 083523     DEBUG 12421[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: CL
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083523     DEBUG 12422[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: CL
20230325: 083523     DEBUG 12422[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083523     DEBUG 12422[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083523     DEBUG 12422[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083523     DEBUG 12423[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083523     DEBUG 12459[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |CL|M1|2023-03-25|F|
20230325: 083523     DEBUG 12502[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2019-05-25
20230325: 083523     DEBUG 12502[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2019-05-25
20230325: 083523     DEBUG 12502[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083523     DEBUG 12502[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083523     DEBUG 12502[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083523     DEBUG 12503[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083524     DEBUG 12554[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |CL|M1|2019-05-25|F|
20230325: 083524     DEBUG 12555[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@8bd1b6a
20230325: 083524     DEBUG 12625[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@cb5822
20230325: 083524     DEBUG 12625[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: CUGR6
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083524     DEBUG 12625[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: CUGR6
20230325: 083524     DEBUG 12626[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083524     DEBUG 12626[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083524     DEBUG 12626[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083524     DEBUG 12626[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083524     DEBUG 12661[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |CUGR6|M1|2023-03-25|F|
20230325: 083524     DEBUG 12695[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2019-04-29
20230325: 083524     DEBUG 12696[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2019-04-29
20230325: 083524     DEBUG 12696[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083524     DEBUG 12697[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083524     DEBUG 12697[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083524     DEBUG 12697[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083524     DEBUG 12734[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |CUGR6|M1|2019-04-29|F|
20230325: 083524     DEBUG 12736[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@61832929
20230325: 083524     DEBUG 12817[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3ffc5af1
20230325: 083524     DEBUG 12818[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: DBR
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083524     DEBUG 12818[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: DBR
20230325: 083524     DEBUG 12819[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083524     DEBUG 12819[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083524     DEBUG 12819[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083524     DEBUG 12820[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083524     DEBUG 12857[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |DBR|M1|2023-03-25|F|
20230325: 083524     DEBUG 12893[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-10-14
20230325: 083524     DEBUG 12893[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-10-14
20230325: 083524     DEBUG 12894[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083524     DEBUG 12894[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083524     DEBUG 12895[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083524     DEBUG 12895[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083524     DEBUG 12932[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |DBR|M1|2018-10-14|F|
20230325: 083524     DEBUG 12933[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1bce4f0a
20230325: 083524     DEBUG 13008[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5c3bd550
20230325: 083524     DEBUG 13008[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: DBR1
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083524     DEBUG 13008[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: DBR1
20230325: 083524     DEBUG 13009[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083524     DEBUG 13009[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083524     DEBUG 13009[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083524     DEBUG 13009[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083524     DEBUG 13044[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |DBR1|M1|2023-03-25|F|
20230325: 083524     DEBUG 13080[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-11
20230325: 083524     DEBUG 13080[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-11
20230325: 083524     DEBUG 13081[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083524     DEBUG 13081[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083524     DEBUG 13081[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083524     DEBUG 13082[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083524     DEBUG 13148[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |DBR1|M1|2018-05-11|F|
20230325: 083524     DEBUG 13149[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@343f4d3d
20230325: 083524     DEBUG 13226[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5442a311
20230325: 083524     DEBUG 13227[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: DR5M
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083524     DEBUG 13227[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: DR5M
20230325: 083524     DEBUG 13228[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083524     DEBUG 13228[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083524     DEBUG 13228[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083524     DEBUG 13229[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083524     DEBUG 13263[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |DR5M|M1|2023-03-25|F|
20230325: 083524     DEBUG 13299[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-05-15
20230325: 083524     DEBUG 13300[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-05-15
20230325: 083524     DEBUG 13300[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083524     DEBUG 13300[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083524     DEBUG 13300[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083524     DEBUG 13301[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083524     DEBUG 13337[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |DR5M|M1|2018-05-15|F|
20230325: 083524     DEBUG 13338[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@57fffcd7
20230325: 083524     DEBUG 13414[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@598067a5
20230325: 083524     DEBUG 13415[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: ERR
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083524     DEBUG 13416[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: ERR
20230325: 083524     DEBUG 13416[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083524     DEBUG 13416[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083524     DEBUG 13417[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083524     DEBUG 13417[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083524     DEBUG 13468[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |ERR|M1|2023-03-25|F|
20230325: 083524     DEBUG 13505[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2020-12-14
20230325: 083524     DEBUG 13505[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2020-12-14
20230325: 083524     DEBUG 13506[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083524     DEBUG 13506[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083524     DEBUG 13506[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083524     DEBUG 13506[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083525     DEBUG 13543[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |ERR|M1|2020-12-14|F|
20230325: 083525     DEBUG 13544[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7085bdee
20230325: 083525     DEBUG 13624[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5700d6b1
20230325: 083525     DEBUG 13625[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: LTE
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083525     DEBUG 13626[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: LTE
20230325: 083525     DEBUG 13627[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083525     DEBUG 13628[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083525     DEBUG 13628[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083525     DEBUG 13629[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083525     DEBUG 13686[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |LTE|M1|2023-03-25|F|
20230325: 083525     DEBUG 13730[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2013-05-16
20230325: 083525     DEBUG 13730[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2013-05-16
20230325: 083525     DEBUG 13731[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083525     DEBUG 13731[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083525     DEBUG 13732[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083525     DEBUG 13732[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083525     DEBUG 13788[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |LTE|M1|2013-05-16|F|
20230325: 083525     DEBUG 13789[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@cb644e
20230325: 083525     DEBUG 13863[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@56ef9176
20230325: 083525     DEBUG 13863[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: MBBIP
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083525     DEBUG 13863[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: MBBIP
20230325: 083525     DEBUG 13864[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083525     DEBUG 13864[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083525     DEBUG 13864[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083525     DEBUG 13864[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083525     DEBUG 13928[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |MBBIP|M1|2023-03-25|F|
20230325: 083525     DEBUG 13962[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2022-08-10
20230325: 083525     DEBUG 13963[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2022-08-10
20230325: 083525     DEBUG 13963[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083525     DEBUG 13963[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083525     DEBUG 13964[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083525     DEBUG 13964[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083525     DEBUG 14000[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |MBBIP|M1|2022-08-10|F|
20230325: 083525     DEBUG 14001[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@20322d26
20230325: 083525     DEBUG 14073[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@64bf3bbf
20230325: 083525     DEBUG 14073[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: PASS
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083525     DEBUG 14074[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: PASS
20230325: 083525     DEBUG 14074[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083525     DEBUG 14074[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083525     DEBUG 14074[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083525     DEBUG 14075[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083525     DEBUG 14126[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |PASS|M1|2023-03-25|F|
20230325: 083525     DEBUG 14165[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2020-01-23
20230325: 083525     DEBUG 14165[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2020-01-23
20230325: 083525     DEBUG 14165[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083525     DEBUG 14166[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083525     DEBUG 14166[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083525     DEBUG 14166[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083525     DEBUG 14203[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |PASS|M1|2020-01-23|F|
20230325: 083525     DEBUG 14204[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@21213b92
20230325: 083525     DEBUG 14308[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@3327bd23
20230325: 083525     DEBUG 14308[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: R750
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083525     DEBUG 14308[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: R750
20230325: 083525     DEBUG 14308[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083525     DEBUG 14309[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083525     DEBUG 14309[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083525     DEBUG 14309[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083525     DEBUG 14346[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |R750|M1|2023-03-25|F|
20230325: 083525     DEBUG 14384[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2021-08-04
20230325: 083525     DEBUG 14384[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2021-08-04
20230325: 083525     DEBUG 14384[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083525     DEBUG 14385[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083525     DEBUG 14385[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083525     DEBUG 14385[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083525     DEBUG 14430[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |R750|M1|2021-08-04|F|
20230325: 083525     DEBUG 14431[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2286778
20230325: 083525     DEBUG 14501[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6d7b4f4c
20230325: 083525     DEBUG 14501[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: SMR3
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083525     DEBUG 14501[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: SMR3
20230325: 083525     DEBUG 14501[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083525     DEBUG 14502[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083525     DEBUG 14502[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083525     DEBUG 14502[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083526     DEBUG 14538[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |SMR3|M1|2023-03-25|F|
20230325: 083526     DEBUG 14572[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-08-08
20230325: 083526     DEBUG 14572[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-08-08
20230325: 083526     DEBUG 14572[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083526     DEBUG 14572[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083526     DEBUG 14572[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083526     DEBUG 14572[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083526     DEBUG 14613[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |SMR3|M1|2018-08-08|F|
20230325: 083526     DEBUG 14613[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@335eadca
20230325: 083526     DEBUG 14684[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@eec5a4a
20230325: 083526     DEBUG 14684[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: SMR30
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083526     DEBUG 14684[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: SMR30
20230325: 083526     DEBUG 14685[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083526     DEBUG 14685[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083526     DEBUG 14685[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083526     DEBUG 14685[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083526     DEBUG 14722[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |SMR30|M1|2023-03-25|F|
20230325: 083526     DEBUG 14764[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-04-04
20230325: 083526     DEBUG 14764[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-04-04
20230325: 083526     DEBUG 14764[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083526     DEBUG 14764[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083526     DEBUG 14764[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083526     DEBUG 14764[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083526     DEBUG 14805[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |SMR30|M1|2018-04-04|F|
20230325: 083526     DEBUG 14805[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2b9627bc
20230325: 083526     DEBUG 14885[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@4f970963
20230325: 083526     DEBUG 14886[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: UCMS
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083526     DEBUG 14886[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: UCMS
20230325: 083526     DEBUG 14886[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083526     DEBUG 14887[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083526     DEBUG 14887[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083526     DEBUG 14887[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083526     DEBUG 14933[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |UCMS|M1|2023-03-25|F|
20230325: 083526     DEBUG 14970[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2021-07-20
20230325: 083526     DEBUG 14970[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2021-07-20
20230325: 083526     DEBUG 14970[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083526     DEBUG 14971[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083526     DEBUG 14971[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083526     DEBUG 14971[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083526     DEBUG 15006[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |UCMS|M1|2021-07-20|F|
20230325: 083526     DEBUG 15007[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@627551fb
20230325: 083526     DEBUG 15087[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@2758fe70
20230325: 083526     DEBUG 15087[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: UCMV
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083526     DEBUG 15087[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: UCMV
20230325: 083526     DEBUG 15087[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083526     DEBUG 15087[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083526     DEBUG 15088[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083526     DEBUG 15088[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083526     DEBUG 15162[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |UCMV|M1|2023-03-25|F|
20230325: 083526     DEBUG 15197[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2021-07-20
20230325: 083526     DEBUG 15198[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2021-07-20
20230325: 083526     DEBUG 15198[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083526     DEBUG 15198[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083526     DEBUG 15198[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083526     DEBUG 15198[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083526     DEBUG 15234[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |UCMV|M1|2021-07-20|F|
20230325: 083526     DEBUG 15234[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6321e813
20230325: 083526     DEBUG 15306[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@22a67b4
20230325: 083526     DEBUG 15306[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: EVS5R
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083526     DEBUG 15306[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: EVS5R
20230325: 083526     DEBUG 15307[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083526     DEBUG 15307[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083526     DEBUG 15307[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083526     DEBUG 15307[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083526     DEBUG 15343[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |EVS5R|M1|2023-03-25|F|
20230325: 083526     DEBUG 15378[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2022-11-13
20230325: 083526     DEBUG 15378[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2022-11-13
20230325: 083526     DEBUG 15378[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083526     DEBUG 15378[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083526     DEBUG 15379[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083526     DEBUG 15379[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083526     DEBUG 15414[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |EVS5R|M1|2022-11-13|F|
20230325: 083526     DEBUG 15415[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@6c49835d
20230325: 083526     DEBUG 15485[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@67205a84
20230325: 083526     DEBUG 15486[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: WABR
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083526     DEBUG 15486[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: WABR
20230325: 083526     DEBUG 15486[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083526     DEBUG 15486[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083526     DEBUG 15486[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083526     DEBUG 15486[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083526     DEBUG 15522[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |WABR|M1|2023-03-25|F|
20230325: 083527     DEBUG 15557[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2020-09-28
20230325: 083527     DEBUG 15557[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2020-09-28
20230325: 083527     DEBUG 15557[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083527     DEBUG 15557[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083527     DEBUG 15557[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083527     DEBUG 15557[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083527     DEBUG 15592[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |WABR|M1|2020-09-28|F|
20230325: 083527     DEBUG 15592[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7f13d6e
20230325: 083527     DEBUG 15683[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@d44fc21
20230325: 083527     DEBUG 15684[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: ZRDB
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083527     DEBUG 15684[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: ZRDB
20230325: 083527     DEBUG 15684[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083527     DEBUG 15684[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083527     DEBUG 15684[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083527     DEBUG 15684[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083527     DEBUG 15732[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |ZRDB|M1|2023-03-25|F|
20230325: 083527     DEBUG 15796[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-03-29
20230325: 083527     DEBUG 15796[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-03-29
20230325: 083527     DEBUG 15796[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083527     DEBUG 15796[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083527     DEBUG 15796[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083527     DEBUG 15797[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083527     DEBUG 15856[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |ZRDB|M1|2018-03-29|F|
20230325: 083527     DEBUG 15856[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@5f282abb
20230325: 083527     DEBUG 15930[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1e965684
20230325: 083527     DEBUG 15930[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: OA25
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083527     DEBUG 15930[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: OA25
20230325: 083527     DEBUG 15930[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083527     DEBUG 15930[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083527     DEBUG 15930[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083527     DEBUG 15930[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083527     DEBUG 15967[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |OA25|M1|2023-03-25|F|
20230325: 083527     DEBUG 16014[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2016-05-27
20230325: 083527     DEBUG 16015[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2016-05-27
20230325: 083527     DEBUG 16015[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083527     DEBUG 16015[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083527     DEBUG 16015[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083527     DEBUG 16016[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083527     DEBUG 16075[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |OA25|M1|2016-05-27|F|
20230325: 083527     DEBUG 16075[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@1b68ddbd
20230325: 083527     DEBUG 16163[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@59e5ddf
20230325: 083527     DEBUG 16198[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14946) - 
String chargeCode: OR50
String netId: M1
Date chargeDate: 2023-03-25
Date effectiveDate: null
String chgType: F
20230325: 083527     DEBUG 16198[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:14957) - 
CHARGE CODE IS NOT NULL: OR50
20230325: 083527     DEBUG 16198[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083527     DEBUG 16198[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.max(ChgChargesAbstractBLO.java:593) - max( filter )
20230325: 083527     DEBUG 16198[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.max(ChgChargesAbstractDACImpl.java:542) - max( filter )
20230325: 083527     DEBUG 16198[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|14|equalChgCode+equalChgNetid+lessthanorequalChgEffectiveDate+equalChgChargef|

20230325: 083527     DEBUG 16242[main] - com.eppixcomm.eppix.common.data.DAOImpl.max(DAOImpl.java:1221) - max(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT MAX(CHG_CODE, CHG_NETID, CHG_EFFECTIVE_DATE)
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE <= ? AND CHG_CHARGEF = ?
Argument(s): |OR50|M1|2023-03-25|F|
20230325: 083527     DEBUG 16277[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15002) - 1 EFF DATE: 2018-04-04
20230325: 083527     DEBUG 16277[main] - com.eppixcomm.eppix.base.blo.SubscriberUpgradeMigradeBLO.getChg(SubscriberUpgradeMigradeBLO.java:15161) - Effective Date set to 2018-04-04
20230325: 083527     DEBUG 16277[main] - com.eppixcomm.eppix.common.core.BLOBinder.getBLO(BLOBinder.java:225) - getBLO( bloClass=com.eppixcomm.eppix.base.blo.ChgCharges )
20230325: 083527     DEBUG 16277[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractBLO.get(ChgChargesAbstractBLO.java:564) - get( filter )
20230325: 083527     DEBUG 16277[main] - com.eppixcomm.eppix.base.blo.ChgChargesAbstractDACImpl.get(ChgChargesAbstractDACImpl.java:523) - get( filter )
20230325: 083527     DEBUG 16277[main] - com.eppixcomm.eppix.common.data.DAOImpl$DAOStmtPool.get(DAOImpl.java:4480) - 
======================================================================
ChgCharges|0|equalChgCode+equalChgNetid+equalChgEffectiveDate+equalChgChargef|

20230325: 083527     DEBUG 16323[main] - com.eppixcomm.eppix.common.data.DAOImpl.get(DAOImpl.java:631) - get(param SQL): DML Name: ChgCharges
Execute SQL Statement: SELECT CHG_CODE, CHG_DESCRIPTION, CHG_VALUE, CHG_VAT_CODE, CHG_NCODE, CHG_NETID, CHG_CHARGEF, CHG_PERIOD, CHG_FREQUENCY, CHG_EFFECTIVE_DATE, CHG_CLASS_ID
FROM CHG_CHARGES
WHERE CHG_CODE = ? AND CHG_NETID = ? AND CHG_EFFECTIVE_DATE = ? AND CHG_CHARGEF = ?
Argument(s): |OR50|M1|2018-04-04|F|
20230325: 083527     DEBUG 16323[main] - com.eppixcomm.eppix.common.data.DAOImpl.fetchDMO(DAOImpl.java:4058) - ROW COMPLETED AND DMO CREATED: ROW: [Ljava.lang.Object;@7a1ebcd8
